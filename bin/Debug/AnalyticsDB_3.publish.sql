/*
Deployment script for Analytics

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Analytics"
:setvar DefaultFilePrefix "Analytics"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL12.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL12.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [DW]...';


GO
CREATE SCHEMA [DW]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Extract]...';


GO
CREATE SCHEMA [Extract]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Transform]...';


GO
CREATE SCHEMA [Transform]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [DW].[DimCampus]...';


GO
CREATE TABLE [DW].[DimCampus] (
    [CampusID]           INT               NOT NULL,
    [TenantID]           INT               NOT NULL,
    [Code]               NVARCHAR (255)    NOT NULL,
    [Name]               NVARCHAR (255)    NOT NULL,
    [Zipcode]            INT               NULL,
    [Latitude]           FLOAT (53)        NULL,
    [Longitude]          FLOAT (53)        NULL,
    [LocationGeographgy] [sys].[geography] NULL,
    [StartDateTime]      DATETIME          NOT NULL,
    [EndDateTime]        DATETIME          NULL,
    [Active]             BIT               NOT NULL,
    [ExecutionID]        VARCHAR (50)      NOT NULL,
    [InsertedDateTime]   DATETIME          NULL,
    [UpdatedDateTime]    DATETIME          NULL,
    [Hashvalue]          NVARCHAR (64)     NOT NULL,
    CONSTRAINT [pk_DWDimCampus__CampusID_TenantID] PRIMARY KEY CLUSTERED ([CampusID] ASC, [TenantID] ASC)
);


GO
PRINT N'Creating [DW].[DimDate]...';


GO
CREATE TABLE [DW].[DimDate] (
    [DateID]                     INT           NOT NULL,
    [ActualDateLabel]            VARCHAR (50)  NULL,
    [ActualDate]                 DATE          NULL,
    [CalendarDayOfMonth]         TINYINT       NULL,
    [CalendarDayOfYear]          SMALLINT      NULL,
    [CalendarLastDayOfMonthFlag] TINYINT       NULL,
    [CalendarMonth]              TINYINT       NULL,
    [CalendarMonthAbbreviation]  VARCHAR (12)  NULL,
    [CalendarMonthLabel]         VARCHAR (50)  NULL,
    [CalendarQuarter]            TINYINT       NULL,
    [CalendarQuarterLabel]       VARCHAR (50)  NULL,
    [CalendarWeek]               TINYINT       NULL,
    [CalendarWeekStartLabel]     VARCHAR (50)  NULL,
    [CalendarWeekEndLabel]       VARCHAR (50)  NULL,
    [CalendarYear]               SMALLINT      NULL,
    [CalendarYearLabel]          VARCHAR (50)  NULL,
    [DateDescription]            VARCHAR (50)  NULL,
    [DayOfWeek]                  TINYINT       NULL,
    [DayOfWeekAbbreviation]      VARCHAR (12)  NULL,
    [DayOfWeekLabel]             VARCHAR (50)  NULL,
    [FiscalDayOfWeek]            TINYINT       NULL,
    [FiscalDayOfMonth]           TINYINT       NULL,
    [FiscalDayOfYear]            SMALLINT      NULL,
    [FiscalMonth]                TINYINT       NULL,
    [FiscalMonthAbbreviation]    VARCHAR (12)  NULL,
    [FiscalMonthLabel]           VARCHAR (50)  NULL,
    [FiscalQuarter]              TINYINT       NULL,
    [FiscalQuarterLabel]         VARCHAR (50)  NULL,
    [FiscalWeek]                 TINYINT       NULL,
    [FiscalWeekStartLabel]       VARCHAR (50)  NULL,
    [FiscalWeekEndLabel]         VARCHAR (50)  NULL,
    [FiscalYear]                 SMALLINT      NULL,
    [FiscalYearLabel]            VARCHAR (50)  NULL,
    [HolidayFlag]                TINYINT       NULL,
    [WeekendFlag]                TINYINT       NULL,
    [ExecutionID]                VARCHAR (50)  NULL,
    [InsertedDateTime]           DATETIME      NULL,
    [UpdatedDateTime]            DATETIME      NULL,
    [Hashvalue]                  NVARCHAR (64) NULL,
    CONSTRAINT [PK_DWDimDate__DateID] PRIMARY KEY CLUSTERED ([DateID] ASC)
);


GO
PRINT N'Creating [DW].[FactLifeEvent]...';


GO
CREATE TABLE [DW].[FactLifeEvent] (
    [LifeEventID]        INT           NOT NULL,
    [TenantID]           INT           NOT NULL,
    [LifeEventTypeID]    INT           NOT NULL,
    [CampusID]           INT           NOT NULL,
    [MinistryID]         INT           NOT NULL,
    [ActivityID]         INT           NOT NULL,
    [RosterID]           INT           NOT NULL,
    [Age]                INT           NULL,
    [Gender]             NCHAR (1)     NULL,
    [MaritalStatusID]    INT           NULL,
    [IndividualStatusID] INT           NULL,
    [AttendeeZipCode]    INT           NULL,
    [InstanceDateID]     INT           NOT NULL,
    [InstanceTimeID]     INT           NOT NULL,
    [LifeEventCount]     INT           NOT NULL,
    [ExecutionID]        VARCHAR (50)  NOT NULL,
    [InsertedDateTime]   DATETIME      NULL,
    [UpdatedDateTime]    DATETIME      NULL,
    [Hashvalue]          NVARCHAR (64) NOT NULL,
    CONSTRAINT [pk_DWFactLifeEvent__LifeEventID_TenantID] PRIMARY KEY CLUSTERED ([LifeEventID] ASC, [TenantID] ASC)
);


GO
PRINT N'Creating [DW].[DimLifeEventType]...';


GO
CREATE TABLE [DW].[DimLifeEventType] (
    [LifeEventTypeID]  INT            NOT NULL,
    [TenantID]         INT            NOT NULL,
    [Name]             NVARCHAR (255) NOT NULL,
    [ExecutionID]      VARCHAR (50)   NOT NULL,
    [InsertedDateTime] DATETIME       NULL,
    [UpdatedDateTime]  DATETIME       NULL,
    [Hashvalue]        NVARCHAR (64)  NOT NULL,
    CONSTRAINT [pk_DWDimLifeEventType__LifeEventTypeID_TenantID] PRIMARY KEY CLUSTERED ([LifeEventTypeID] ASC, [TenantID] ASC)
);


GO
PRINT N'Creating [DW].[DimIndividualStatus]...';


GO
CREATE TABLE [DW].[DimIndividualStatus] (
    [IndividualStatusID] INT            NOT NULL,
    [TenantID]           INT            NOT NULL,
    [Status]             NVARCHAR (255) NULL,
    [SubStatus]          NVARCHAR (255) NULL,
    [CampusID]           INT            NULL,
    [ExecutionID]        VARCHAR (50)   NOT NULL,
    [InsertedDateTime]   DATETIME       NULL,
    [UpdatedDateTime]    DATETIME       NULL,
    [Hashvalue]          NVARCHAR (64)  NOT NULL,
    CONSTRAINT [pk_DWDimIndividualStatus__IndividualStatusID_TenantID] PRIMARY KEY CLUSTERED ([IndividualStatusID] ASC, [TenantID] ASC)
);


GO
PRINT N'Creating [DW].[FactAttendance]...';


GO
CREATE TABLE [DW].[FactAttendance] (
    [AttendanceID]       INT           NOT NULL,
    [TenantID]           INT           NOT NULL,
    [CampusID]           INT           NOT NULL,
    [MinistryID]         INT           NOT NULL,
    [ActivityID]         INT           NOT NULL,
    [RosterID]           INT           NOT NULL,
    [AttendanceTypeID]   INT           NOT NULL,
    [Age]                INT           NULL,
    [MaritalStatusID]    INT           NULL,
    [IndividualStatusID] INT           NULL,
    [AttendeeZipCode]    INT           NULL,
    [InstanceDateID]     INT           NOT NULL,
    [InstanceTimeID]     INT           NOT NULL,
    [AttendanceCount]    INT           NOT NULL,
    [ExecutionID]        VARCHAR (50)  NOT NULL,
    [InsertedDateTime]   DATETIME      NULL,
    [UpdatedDateTime]    DATETIME      NULL,
    [Hashvalue]          NVARCHAR (64) NOT NULL,
    CONSTRAINT [pk_DWFactAttendance__AttendanceID_TenantID] PRIMARY KEY CLUSTERED ([AttendanceID] ASC, [TenantID] ASC)
);


GO
PRINT N'Creating [DW].[DimRoster]...';


GO
CREATE TABLE [DW].[DimRoster] (
    [RosterID]         INT            NOT NULL,
    [TenantID]         INT            NOT NULL,
    [RosterFolder]     NVARCHAR (255) NULL,
    [Roster]           NVARCHAR (255) NULL,
    [BreakoutGroup]    NVARCHAR (255) NULL,
    [StartDateTime]    DATETIME       NOT NULL,
    [EndDateTime]      DATETIME       NULL,
    [Active]           BIT            NOT NULL,
    [ExecutionID]      VARCHAR (50)   NOT NULL,
    [InsertedDateTime] DATETIME       NULL,
    [UpdatedDateTime]  DATETIME       NULL,
    [Hashvalue]        NVARCHAR (64)  NOT NULL,
    CONSTRAINT [pk_DWDimRoster__RosterID_TenantID] PRIMARY KEY CLUSTERED ([RosterID] ASC, [TenantID] ASC)
);


GO
PRINT N'Creating [DW].[DimActivity]...';


GO
CREATE TABLE [DW].[DimActivity] (
    [ActivityID]       INT            NOT NULL,
    [TenantID]         INT            NOT NULL,
    [Name]             NVARCHAR (255) NOT NULL,
    [MinistryID]       INT            NOT NULL,
    [CampusID]         INT            NOT NULL,
    [StartDateTime]    DATETIME       NOT NULL,
    [EndDateTime]      DATETIME       NULL,
    [Active]           BIT            NOT NULL,
    [ExecutionID]      VARCHAR (50)   NOT NULL,
    [InsertedDateTime] DATETIME       NULL,
    [UpdatedDateTime]  DATETIME       NULL,
    [Hashvalue]        NVARCHAR (64)  NOT NULL,
    CONSTRAINT [pk_DWDimActivity__ActivityID_TenantID] PRIMARY KEY CLUSTERED ([ActivityID] ASC, [TenantID] ASC)
);


GO
PRINT N'Creating [DW].[DimMaritalStatus]...';


GO
CREATE TABLE [DW].[DimMaritalStatus] (
    [MaritalStatusID]  INT            NOT NULL,
    [TenantID]         INT            NOT NULL,
    [Name]             NVARCHAR (255) NOT NULL,
    [ExecutionID]      VARCHAR (50)   NOT NULL,
    [InsertedDateTime] DATETIME       NULL,
    [UpdatedDateTime]  DATETIME       NULL,
    [Hashvalue]        NVARCHAR (64)  NOT NULL,
    CONSTRAINT [pk_DWDimMaritalStatus__MaritalStatusID_TenantID] PRIMARY KEY CLUSTERED ([MaritalStatusID] ASC, [TenantID] ASC)
);


GO
PRINT N'Creating [DW].[DimAttendanceType]...';


GO
CREATE TABLE [DW].[DimAttendanceType] (
    [AttendanceTypeID] INT            NOT NULL,
    [TenantID]         INT            NOT NULL,
    [Category]         NVARCHAR (255) NOT NULL,
    [Job]              NVARCHAR (255) NULL,
    [VolStaffSchedule] NVARCHAR (255) NULL,
    [ExecutionID]      VARCHAR (50)   NOT NULL,
    [InsertedDateTime] DATETIME       NULL,
    [UpdatedDateTime]  DATETIME       NULL,
    [Hashvalue]        NVARCHAR (64)  NOT NULL,
    CONSTRAINT [pk_DWDimAttendanceType__AttendanceTypeID_TenantID] PRIMARY KEY CLUSTERED ([AttendanceTypeID] ASC, [TenantID] ASC)
);


GO
PRINT N'Creating [DW].[DimMinistry]...';


GO
CREATE TABLE [DW].[DimMinistry] (
    [MinistryID]       INT            NOT NULL,
    [TenantID]         INT            NOT NULL,
    [Name]             NVARCHAR (255) NOT NULL,
    [CampusID]         INT            NOT NULL,
    [StartDateTime]    DATETIME       NOT NULL,
    [EndDateTime]      DATETIME       NULL,
    [Active]           BIT            NOT NULL,
    [ExecutionID]      VARCHAR (50)   NOT NULL,
    [InsertedDateTime] DATETIME       NULL,
    [UpdatedDateTime]  DATETIME       NULL,
    [Hashvalue]        NVARCHAR (64)  NOT NULL,
    CONSTRAINT [pk_DWDimMinistry__MinistryID_TenantID] PRIMARY KEY CLUSTERED ([MinistryID] ASC, [TenantID] ASC)
);


GO
PRINT N'Creating [DW].[FactSmallGroup]...';


GO
CREATE TABLE [DW].[FactSmallGroup] (
    [SmallGroupID]       INT           NOT NULL,
    [TenantID]           INT           NOT NULL,
    [SmallGroupDetailID] INT           NOT NULL,
    [CalendarMonth]      INT           NOT NULL,
    [CalendarYear]       INT           NOT NULL,
    [MissingReports]     INT           NOT NULL,
    [DidNotMeets]        INT           NOT NULL,
    [ActualAttendance]   INT           NOT NULL,
    [UniqueAttenders]    INT           NOT NULL,
    [TotalLeaders]       INT           NOT NULL,
    [TotalMembers]       INT           NOT NULL,
    [TotalProspects]     INT           NOT NULL,
    [ExecutionID]        VARCHAR (50)  NOT NULL,
    [InsertedDateTime]   DATETIME      NULL,
    [UpdatedDateTime]    DATETIME      NULL,
    [Hashvalue]          NVARCHAR (64) NOT NULL,
    CONSTRAINT [pk_DWFactSmallGroup__SmallGroupID_TenantID] PRIMARY KEY CLUSTERED ([SmallGroupID] ASC, [TenantID] ASC)
);


GO
PRINT N'Creating [DW].[DimSmallGroupDetail]...';


GO
CREATE TABLE [DW].[DimSmallGroupDetail] (
    [SmallGroupDetailID] INT               NOT NULL,
    [TenantID]           INT               NOT NULL,
    [CampusID]           INT               NULL,
    [GroupType]          NVARCHAR (255)    NULL,
    [GroupName]          NVARCHAR (255)    NOT NULL,
    [ZipCode]            INT               NULL,
    [Latitude]           FLOAT (53)        NULL,
    [Longitude]          FLOAT (53)        NULL,
    [LocationGeography]  [sys].[geography] NULL,
    [StartDateTime]      DATETIME          NOT NULL,
    [EndDateTime]        DATETIME          NULL,
    [Active]             BIT               NOT NULL,
    [ExecutionID]        VARCHAR (50)      NOT NULL,
    [InsertedDateTime]   DATETIME          NULL,
    [UpdatedDateTime]    DATETIME          NULL,
    [Hashvalue]          NVARCHAR (64)     NOT NULL,
    CONSTRAINT [pk_DWDimSmallGroupDetail__SmallGroupDetailID_TenantID] PRIMARY KEY CLUSTERED ([SmallGroupDetailID] ASC, [TenantID] ASC)
);


GO
PRINT N'Creating [DW].[DimEntity]...';


GO
CREATE TABLE [DW].[DimEntity] (
    [EntityID]         INT            NOT NULL,
    [TenantID]         INT            NOT NULL,
    [Code]             NVARCHAR (10)  NOT NULL,
    [Name]             NVARCHAR (255) NOT NULL,
    [ExecutionID]      VARCHAR (50)   NOT NULL,
    [InsertedDateTime] DATETIME       NULL,
    [UpdatedDateTime]  DATETIME       NULL,
    [Hashvalue]        NVARCHAR (64)  NOT NULL,
    CONSTRAINT [pk_DWDimEntity__EntityID_TenantID] PRIMARY KEY CLUSTERED ([EntityID] ASC, [TenantID] ASC)
);


GO
PRINT N'Creating [DW].[DimFinancialCategory]...';


GO
CREATE TABLE [DW].[DimFinancialCategory] (
    [FinancialCategoryID]        INT            NOT NULL,
    [TenantID]                   INT            NOT NULL,
    [GLCode]                     NVARCHAR (6)   NOT NULL,
    [GLName]                     NVARCHAR (100) NULL,
    [GLType]                     NVARCHAR (3)   NULL,
    [GLDesignationCode]          NVARCHAR (3)   NULL,
    [FundCode]                   NVARCHAR (6)   NOT NULL,
    [FundName]                   NVARCHAR (100) NULL,
    [FundType]                   NVARCHAR (3)   NULL,
    [FundDesignationCode]        NVARCHAR (3)   NULL,
    [CampusCode]                 NVARCHAR (6)   NOT NULL,
    [CampusName]                 NVARCHAR (100) NULL,
    [CampusType]                 NVARCHAR (3)   NULL,
    [CampusDesignationCode]      NVARCHAR (3)   NULL,
    [DepartmentCode]             NVARCHAR (6)   NOT NULL,
    [DepartmentName]             NVARCHAR (100) NULL,
    [DepartmentType]             NVARCHAR (3)   NULL,
    [DepartmentDesignationCode]  NVARCHAR (3)   NULL,
    [AccountingCode5]            NVARCHAR (6)   NOT NULL,
    [AccountingName5]            NVARCHAR (100) NULL,
    [AccountingType5]            NVARCHAR (3)   NULL,
    [AccountingDesignationCode5] NVARCHAR (3)   NULL,
    [ProjectCode]                NVARCHAR (6)   NOT NULL,
    [ProjectName]                NVARCHAR (100) NULL,
    [ProjectType]                NVARCHAR (3)   NULL,
    [ProjectDesignationCode]     NVARCHAR (3)   NULL,
    [AccountingCode7]            NVARCHAR (6)   NOT NULL,
    [AccountingName7]            NVARCHAR (100) NULL,
    [AccountingType7]            NVARCHAR (3)   NULL,
    [AccountingDesignationCode7] NVARCHAR (3)   NULL,
    [AccountingCode8]            NVARCHAR (6)   NOT NULL,
    [AccountingName8]            NVARCHAR (100) NULL,
    [AccountingType8]            NVARCHAR (3)   NULL,
    [AccountingDesignationCode8] NVARCHAR (3)   NULL,
    [AccountingCode9]            NVARCHAR (6)   NOT NULL,
    [AccountingName9]            NVARCHAR (100) NULL,
    [AccountingType9]            NVARCHAR (3)   NULL,
    [AccountingDesignationCode9] NVARCHAR (3)   NULL,
    [AccountingCode10]           NVARCHAR (6)   NOT NULL,
    [ExecutionID]                VARCHAR (50)   NOT NULL,
    [InsertedDateTime]           DATETIME       NULL,
    [UpdatedDateTime]            DATETIME       NULL,
    [Hashvalue]                  NVARCHAR (64)  NOT NULL,
    CONSTRAINT [pk_DWDimFinancialCategory__FinancialCategoryID_TenantID] PRIMARY KEY CLUSTERED ([FinancialCategoryID] ASC, [TenantID] ASC)
);


GO
PRINT N'Creating [DW].[FactRevenue]...';


GO
CREATE TABLE [DW].[FactRevenue] (
    [RevenueID]           INT           NOT NULL,
    [TenantID]            INT           NOT NULL,
    [DateID]              INT           NOT NULL,
    [EntityID]            INT           NOT NULL,
    [FinancialCategoryID] INT           NOT NULL,
    [Amount]              MONEY         NOT NULL,
    [ExecutionID]         VARCHAR (50)  NOT NULL,
    [InsertedDateTime]    DATETIME      NULL,
    [UpdatedDateTime]     DATETIME      NULL,
    [Hashvalue]           NVARCHAR (64) NOT NULL,
    CONSTRAINT [pk_DWFactRevenue__RevenueID_TenantID] PRIMARY KEY CLUSTERED ([RevenueID] ASC, [TenantID] ASC)
);


GO
PRINT N'Creating [DW].[FactExpense]...';


GO
CREATE TABLE [DW].[FactExpense] (
    [ExpenseID]           INT           NOT NULL,
    [TenantID]            INT           NOT NULL,
    [DateID]              INT           NOT NULL,
    [EntityID]            INT           NOT NULL,
    [FinancialCategoryID] INT           NOT NULL,
    [Amount]              MONEY         NOT NULL,
    [ExecutionID]         VARCHAR (50)  NOT NULL,
    [InsertedDateTime]    DATETIME      NULL,
    [UpdatedDateTime]     DATETIME      NULL,
    [Hashvalue]           NVARCHAR (64) NOT NULL,
    CONSTRAINT [pk_DWFactExpense__ExpenseID_TenantID] PRIMARY KEY CLUSTERED ([ExpenseID] ASC, [TenantID] ASC)
);


GO
PRINT N'Creating [DW].[FactBudgetRevenue]...';


GO
CREATE TABLE [DW].[FactBudgetRevenue] (
    [BudgetRevenueID]     INT           NOT NULL,
    [TenantID]            INT           NOT NULL,
    [BudgetYear]          INT           NOT NULL,
    [BudgetMonth]         TINYINT       NOT NULL,
    [EntityID]            INT           NOT NULL,
    [FinancialCategoryID] INT           NOT NULL,
    [Amount]              MONEY         NOT NULL,
    [ExecutionID]         VARCHAR (50)  NOT NULL,
    [InsertedDateTime]    DATETIME      NULL,
    [UpdatedDateTime]     DATETIME      NULL,
    [Hashvalue]           NVARCHAR (64) NOT NULL,
    CONSTRAINT [pk_DWFactBudgetRevenue__BudgetRevenueID_TenantID] PRIMARY KEY CLUSTERED ([BudgetRevenueID] ASC, [TenantID] ASC)
);


GO
PRINT N'Creating [DW].[FactBudgetExpense]...';


GO
CREATE TABLE [DW].[FactBudgetExpense] (
    [BudgetExpenseID]     INT           NOT NULL,
    [TenantID]            INT           NOT NULL,
    [BudgetYear]          INT           NOT NULL,
    [BudgetMonth]         TINYINT       NOT NULL,
    [EntityID]            INT           NOT NULL,
    [FinancialCategoryID] INT           NOT NULL,
    [Amount]              MONEY         NOT NULL,
    [ExecutionID]         VARCHAR (50)  NOT NULL,
    [InsertedDateTime]    DATETIME      NULL,
    [UpdatedDateTime]     DATETIME      NULL,
    [Hashvalue]           NVARCHAR (64) NOT NULL,
    CONSTRAINT [pk_DWFactBudgetExpense__BudgetExpenseID_TenantID] PRIMARY KEY CLUSTERED ([BudgetExpenseID] ASC, [TenantID] ASC)
);


GO
PRINT N'Creating [Extract].[FellowshipOne_Attendance]...';


GO
CREATE TABLE [Extract].[FellowshipOne_Attendance] (
    [RowNumber]         NVARCHAR (255) NULL,
    [Assigned]          NVARCHAR (255) NULL,
    [ActivityType]      NVARCHAR (255) NULL,
    [Ministry]          NVARCHAR (255) NULL,
    [Activity]          NVARCHAR (255) NULL,
    [RosterFolder]      NVARCHAR (255) NULL,
    [Roster]            NVARCHAR (255) NULL,
    [BreakoutGroup]     NVARCHAR (255) NULL,
    [VolStaffType]      NVARCHAR (255) NULL,
    [VolStaffJob]       NVARCHAR (255) NULL,
    [VolStaffSchedule]  NVARCHAR (255) NULL,
    [IndividualID]      NVARCHAR (255) NULL,
    [Name]              NVARCHAR (255) NULL,
    [FirstName]         NVARCHAR (255) NULL,
    [LastName]          NVARCHAR (255) NULL,
    [DOB]               NVARCHAR (255) NULL,
    [MaritalStatus]     NVARCHAR (255) NULL,
    [Gender]            NVARCHAR (255) NULL,
    [HouseholdPosition] NVARCHAR (255) NULL,
    [Status]            NVARCHAR (255) NULL,
    [SubStatus]         NVARCHAR (255) NULL,
    [School]            NVARCHAR (255) NULL,
    [HouseholdID]       NVARCHAR (255) NULL,
    [HouseholdFullName] NVARCHAR (255) NULL,
    [Address]           NVARCHAR (255) NULL,
    [City]              NVARCHAR (255) NULL,
    [StateProvince]     NVARCHAR (255) NULL,
    [PostalCode]        NVARCHAR (255) NULL,
    [CheckInTagCode]    NVARCHAR (255) NULL,
    [CheckInvPager]     NVARCHAR (255) NULL,
    [CheckInTime]       NVARCHAR (255) NULL,
    [CheckInStation]    NVARCHAR (255) NULL,
    [Instance]          NVARCHAR (255) NULL,
    [TenantID]          INT            NOT NULL,
    [ExecutionID]       VARCHAR (50)   NOT NULL,
    [InsertedDateTime]  DATETIME       NULL
);


GO
PRINT N'Creating [Extract].[FellowshipOne_Attendance].[CIX_ExtractFellowshipOneAttendance__ExecutionID]...';


GO
CREATE CLUSTERED INDEX [CIX_ExtractFellowshipOneAttendance__ExecutionID]
    ON [Extract].[FellowshipOne_Attendance]([ExecutionID] ASC);


GO
PRINT N'Creating [Extract].[FellowshipOne_PersonSubStatus]...';


GO
CREATE TABLE [Extract].[FellowshipOne_PersonSubStatus] (
    [PersonSubStatusID] INT          NOT NULL,
    [TenantID]          INT          NULL,
    [Name]              NVARCHAR (1) NULL,
    [StatusID]          INT          NULL,
    [ExecutionID]       VARCHAR (50) NOT NULL,
    [InsertedDateTime]  DATETIME     NULL
);


GO
PRINT N'Creating [Extract].[FellowshipOne_PersonSubStatus].[CIX_ExtractFellowshipOnePersonSubStatus__PersonSubStatusID_TenantID]...';


GO
CREATE CLUSTERED INDEX [CIX_ExtractFellowshipOnePersonSubStatus__PersonSubStatusID_TenantID]
    ON [Extract].[FellowshipOne_PersonSubStatus]([PersonSubStatusID] ASC, [TenantID] ASC);


GO
PRINT N'Creating [Extract].[TransactionalTenant]...';


GO
CREATE TABLE [Extract].[TransactionalTenant] (
    [TenantID]           INT            NULL,
    [TenantName]         NVARCHAR (255) NULL,
    [ConnectionStringID] INT            NULL,
    [isActive]           INT            NULL,
    [ExecutionID]        VARCHAR (50)   NOT NULL,
    [InsertedDateTime]   DATETIME       NULL
);


GO
PRINT N'Creating [Extract].[TransactionalTenant].[CIX_ExtractTransactionalTenant__TenantID]...';


GO
CREATE NONCLUSTERED INDEX [CIX_ExtractTransactionalTenant__TenantID]
    ON [Extract].[TransactionalTenant]([TenantID] ASC);


GO
PRINT N'Creating [Extract].[TransactionalConnectionString]...';


GO
CREATE TABLE [Extract].[TransactionalConnectionString] (
    [ConnectionStringID] INT             NULL,
    [Source]             NVARCHAR (1000) NULL,
    [Note]               NVARCHAR (1000) NULL,
    [ExecutionID]        VARCHAR (50)    NOT NULL,
    [InsertedDateTime]   DATETIME        NULL
);


GO
PRINT N'Creating [Extract].[TransactionalConnectionString].[CIX_ExtractTransactionalConnectionString__ConnectionStringID]...';


GO
CREATE CLUSTERED INDEX [CIX_ExtractTransactionalConnectionString__ConnectionStringID]
    ON [Extract].[TransactionalConnectionString]([ConnectionStringID] ASC);


GO
PRINT N'Creating [Extract].[FellowshipOne_SubFund]...';


GO
CREATE TABLE [Extract].[FellowshipOne_SubFund] (
    [SubFundID]          INT            NOT NULL,
    [TenantID]           INT            NULL,
    [ParentFundID]       INT            NULL,
    [ParentFundName]     NVARCHAR (255) NULL,
    [SubFundName]        NVARCHAR (255) NULL,
    [GeneralLedger]      NVARCHAR (255) NULL,
    [SubFundCode]        NVARCHAR (255) NULL,
    [IsWebEnabled]       NVARCHAR (255) NULL,
    [IsActive]           BIT            NULL,
    [CreatedDateTime]    DATETIME       NULL,
    [LastUpdateDateTime] DATETIME       NULL,
    [ExecutionID]        VARCHAR (50)   NOT NULL,
    [InsertedDateTime]   DATETIME       NULL
);


GO
PRINT N'Creating [Extract].[FellowshipOne_SubFund].[CIX_ExtractFellowshipOneSubFund__SubFundID_TenantID]...';


GO
CREATE CLUSTERED INDEX [CIX_ExtractFellowshipOneSubFund__SubFundID_TenantID]
    ON [Extract].[FellowshipOne_SubFund]([SubFundID] ASC, [TenantID] ASC);


GO
PRINT N'Creating [Extract].[FellowshipOne_PledgeDrive]...';


GO
CREATE TABLE [Extract].[FellowshipOne_PledgeDrive] (
    [PledgeDriveID]       INT            NULL,
    [TenantID]            INT            NULL,
    [Name]                NVARCHAR (255) NULL,
    [StartDateTime]       DATETIME       NULL,
    [EndDateTime]         DATETIME       NULL,
    [Goal]                FLOAT (53)     NULL,
    [FundID]              INT            NULL,
    [FundName]            NVARCHAR (255) NULL,
    [SubFundID]           INT            NULL,
    [SubFundName]         NVARCHAR (255) NULL,
    [Iswebactive]         BIT            NULL,
    [CreateDateTime]      DATETIME       NULL,
    [LastUpdatedDateTime] DATETIME       NULL,
    [ExecutionID]         VARCHAR (50)   NOT NULL,
    [InsertedDateTime]    DATETIME       NULL
);


GO
PRINT N'Creating [Extract].[FellowshipOne_PledgeDrive].[CIX_ExtractFellowshipOnePledgeDrive__PledgeDriveID_TenantID]...';


GO
CREATE CLUSTERED INDEX [CIX_ExtractFellowshipOnePledgeDrive__PledgeDriveID_TenantID]
    ON [Extract].[FellowshipOne_PledgeDrive]([PledgeDriveID] ASC, [TenantID] ASC);


GO
PRINT N'Creating [Extract].[FellowshipOne_PersonStatus]...';


GO
CREATE TABLE [Extract].[FellowshipOne_PersonStatus] (
    [PersonStatusID]   INT          NOT NULL,
    [TenantID]         INT          NULL,
    [Name]             NVARCHAR (1) NULL,
    [ExecutionID]      VARCHAR (50) NOT NULL,
    [InsertedDateTime] DATETIME     NULL
);


GO
PRINT N'Creating [Extract].[FellowshipOne_PersonStatus].[CIX_ExtractFellowshipOnePersonStatus__PersonStatusID_TenantID]...';


GO
CREATE CLUSTERED INDEX [CIX_ExtractFellowshipOnePersonStatus__PersonStatusID_TenantID]
    ON [Extract].[FellowshipOne_PersonStatus]([PersonStatusID] ASC, [TenantID] ASC);


GO
PRINT N'Creating [Extract].[FellowshipOne_Fund]...';


GO
CREATE TABLE [Extract].[FellowshipOne_Fund] (
    [FundID]             INT            NOT NULL,
    [TenantID]           INT            NULL,
    [Name]               NVARCHAR (255) NULL,
    [FundTypeID]         INT            NULL,
    [FundTypeName]       NVARCHAR (255) NULL,
    [FundCode]           NVARCHAR (255) NULL,
    [IsWebEnabled]       BIT            NULL,
    [AccountReferenceID] NVARCHAR (255) NULL,
    [IsActive]           BIT            NULL,
    [CreatedDateTime]    DATETIME       NULL,
    [LastUpdateDateTime] DATETIME       NULL,
    [ExecutionID]        VARCHAR (50)   NOT NULL,
    [InsertedDateTime]   DATETIME       NULL
);


GO
PRINT N'Creating [Extract].[FellowshipOne_Fund].[CIX_ExtractFellowshipOneFund__FundID_TenantID]...';


GO
CREATE CLUSTERED INDEX [CIX_ExtractFellowshipOneFund__FundID_TenantID]
    ON [Extract].[FellowshipOne_Fund]([FundID] ASC, [TenantID] ASC);


GO
PRINT N'Creating [Extract].[FellowshipOne_ContributionType]...';


GO
CREATE TABLE [Extract].[FellowshipOne_ContributionType] (
    [ContributionTypeID] INT            NOT NULL,
    [TenantID]           INT            NOT NULL,
    [Name]               NVARCHAR (255) NOT NULL,
    [ExecutionID]        VARCHAR (50)   NOT NULL,
    [InsertedDateTime]   DATETIME       NULL
);


GO
PRINT N'Creating [Extract].[FellowshipOne_ContributionType].[CIX_Extractf1ContributionType__ContributionTypeID_TenantID]...';


GO
CREATE CLUSTERED INDEX [CIX_Extractf1ContributionType__ContributionTypeID_TenantID]
    ON [Extract].[FellowshipOne_ContributionType]([ContributionTypeID] ASC, [TenantID] ASC);


GO
PRINT N'Creating [Extract].[FellowshipOne_ContributionSubType]...';


GO
CREATE TABLE [Extract].[FellowshipOne_ContributionSubType] (
    [ContributionSubTypeID] INT            NOT NULL,
    [TenantID]              INT            NOT NULL,
    [Name]                  NVARCHAR (255) NOT NULL,
    [ContributionTypeID]    INT            NULL,
    [ExecutionID]           VARCHAR (50)   NOT NULL,
    [InsertedDateTime]      DATETIME       NULL
);


GO
PRINT N'Creating [Extract].[FellowshipOne_ContributionSubType].[CIX_ExtractFellowshipOneContributionSubType__ContributionSubTypeID_TenantID]...';


GO
CREATE CLUSTERED INDEX [CIX_ExtractFellowshipOneContributionSubType__ContributionSubTypeID_TenantID]
    ON [Extract].[FellowshipOne_ContributionSubType]([ContributionSubTypeID] ASC, [TenantID] ASC);


GO
PRINT N'Creating [Extract].[Transactional_HeadCount]...';


GO
CREATE TABLE [Extract].[Transactional_HeadCount] (
    [MinistryName]     NVARCHAR (255) NOT NULL,
    [ActivityName]     NVARCHAR (255) NOT NULL,
    [RosterName]       NVARCHAR (255) NOT NULL,
    [RecordedValue]    INT            NOT NULL,
    [InstanceDateTime] DATETIME       NOT NULL,
    [TenantID]         INT            NOT NULL,
    [ExecutionID]      VARCHAR (50)   NOT NULL,
    [InsertedDateTime] DATETIME       NULL
);


GO
PRINT N'Creating [Extract].[Transactional_HeadCount].[CIX_ExtractTransactionalHeadCount_ExecutionID]...';


GO
CREATE CLUSTERED INDEX [CIX_ExtractTransactionalHeadCount_ExecutionID]
    ON [Extract].[Transactional_HeadCount]([ExecutionID] ASC);


GO
PRINT N'Creating [Extract].[FellowshipOne_AssimilationSteps]...';


GO
CREATE TABLE [Extract].[FellowshipOne_AssimilationSteps] (
    [IndividualID]      NVARCHAR (255) NULL,
    [Name]              NVARCHAR (255) NULL,
    [LastName]          NVARCHAR (255) NULL,
    [FirstName]         NVARCHAR (255) NULL,
    [HouseholdPosition] NVARCHAR (255) NULL,
    [Gender]            NVARCHAR (255) NULL,
    [MaritalStatus]     NVARCHAR (255) NULL,
    [DOB]               NVARCHAR (255) NULL,
    [Status]            NVARCHAR (255) NULL,
    [SubStatus]         NVARCHAR (255) NULL,
    [School]            NVARCHAR (255) NULL,
    [HouseholdID]       NVARCHAR (255) NULL,
    [PostalCode]        NVARCHAR (255) NULL,
    [MeetDate]          NVARCHAR (255) NULL,
    [ConnectDate]       NVARCHAR (255) NULL,
    [BaptismDate]       NVARCHAR (255) NULL,
    [MembershipDate]    NVARCHAR (255) NULL,
    [TenantID]          INT            NOT NULL,
    [ExecutionID]       VARCHAR (50)   NOT NULL,
    [InsertedDateTime]  DATETIME       NULL
);


GO
PRINT N'Creating [Extract].[FellowshipOne_AssimilationSteps].[CIX_ExtractFellowshipOneAssimilationSteps_ExecutionID]...';


GO
CREATE CLUSTERED INDEX [CIX_ExtractFellowshipOneAssimilationSteps_ExecutionID]
    ON [Extract].[FellowshipOne_AssimilationSteps]([ExecutionID] ASC);


GO
PRINT N'Creating [Extract].[FellowshipOne_FTV]...';


GO
CREATE TABLE [Extract].[FellowshipOne_FTV] (
    [RowNumber]         NVARCHAR (255) NULL,
    [Assigned]          NVARCHAR (255) NULL,
    [ActivityType]      NVARCHAR (255) NULL,
    [Ministry]          NVARCHAR (255) NULL,
    [Activity]          NVARCHAR (255) NULL,
    [RosterFolder]      NVARCHAR (255) NULL,
    [Roster]            NVARCHAR (255) NULL,
    [BreakoutGroup]     NVARCHAR (255) NULL,
    [VolStaffType]      NVARCHAR (255) NULL,
    [VolStaffJob]       NVARCHAR (255) NULL,
    [VolStaffSchedule]  NVARCHAR (255) NULL,
    [IndividualID]      NVARCHAR (255) NULL,
    [Name]              NVARCHAR (255) NULL,
    [FirstName]         NVARCHAR (255) NULL,
    [LastName]          NVARCHAR (255) NULL,
    [DOB]               NVARCHAR (255) NULL,
    [MaritalStatus]     NVARCHAR (255) NULL,
    [Gender]            NVARCHAR (255) NULL,
    [HouseholdPosition] NVARCHAR (255) NULL,
    [Status]            NVARCHAR (255) NULL,
    [SubStatus]         NVARCHAR (255) NULL,
    [School]            NVARCHAR (255) NULL,
    [HouseholdID]       NVARCHAR (255) NULL,
    [HouseholdFullName] NVARCHAR (255) NULL,
    [Address]           NVARCHAR (255) NULL,
    [City]              NVARCHAR (255) NULL,
    [StateProvince]     NVARCHAR (255) NULL,
    [PostalCode]        NVARCHAR (255) NULL,
    [Instance]          NVARCHAR (255) NULL,
    [TenantID]          INT            NOT NULL,
    [ExecutionID]       VARCHAR (50)   NOT NULL,
    [InsertedDateTime]  DATETIME       NULL
);


GO
PRINT N'Creating [Extract].[FellowshipOne_FTV].[CIX_ExtractFellowshipOneFTV_ExecutionID]...';


GO
CREATE CLUSTERED INDEX [CIX_ExtractFellowshipOneFTV_ExecutionID]
    ON [Extract].[FellowshipOne_FTV]([ExecutionID] ASC);


GO
PRINT N'Creating [Extract].[FellowshipOne_SmallGroupStatus]...';


GO
CREATE TABLE [Extract].[FellowshipOne_SmallGroupStatus] (
    [RowNumber]        NVARCHAR (255) NULL,
    [Campus]           NVARCHAR (255) NULL,
    [GroupType]        NVARCHAR (255) NULL,
    [GroupName]        NVARCHAR (255) NULL,
    [Active]           NVARCHAR (255) NULL,
    [Latitude]         NVARCHAR (255) NULL,
    [Longitude]        NVARCHAR (255) NULL,
    [StreetAddress]    NVARCHAR (255) NULL,
    [City]             NVARCHAR (255) NULL,
    [Province]         NVARCHAR (255) NULL,
    [PostalCodeFull]   NVARCHAR (255) NULL,
    [TotalGroups]      NVARCHAR (255) NULL,
    [MissingReports]   NVARCHAR (255) NULL,
    [DidNotMeets]      NVARCHAR (255) NULL,
    [ActualAttendance] NVARCHAR (255) NULL,
    [UniqueAttenders]  NVARCHAR (255) NULL,
    [TotalLeaders]     NVARCHAR (255) NULL,
    [TotalMembers]     NVARCHAR (255) NULL,
    [TotalProspects]   NVARCHAR (255) NULL,
    [ReportPeriod]     NVARCHAR (255) NULL,
    [TenantID]         INT            NOT NULL,
    [ExecutionID]      VARCHAR (50)   NOT NULL,
    [InsertedDateTime] DATETIME       NULL
);


GO
PRINT N'Creating [Extract].[FellowshipOne_SmallGroupStatus].[CIX_ExtractFellowshipOneSmallGroupStatus__ExecutionID_TenantID]...';


GO
CREATE CLUSTERED INDEX [CIX_ExtractFellowshipOneSmallGroupStatus__ExecutionID_TenantID]
    ON [Extract].[FellowshipOne_SmallGroupStatus]([ExecutionID] ASC, [TenantID] ASC);


GO
PRINT N'Creating [Extract].[MIP_RevenueAndExpense]...';


GO
CREATE TABLE [Extract].[MIP_RevenueAndExpense] (
    [dtmPostTo]                  DATE          NULL,
    [sRecordType]                CHAR (1)      NULL,
    [sEntryType]                 CHAR (2)      NULL,
    [sCodeIDf_0]                 VARCHAR (6)   NULL,
    [AccountingCode0]            VARCHAR (100) NULL,
    [AccountingType0]            CHAR (3)      NULL,
    [AccountingDesignationCode0] CHAR (3)      NULL,
    [sCodeIDf_1]                 VARCHAR (6)   NULL,
    [AccountingCode1]            VARCHAR (100) NULL,
    [AccountingType1]            CHAR (3)      NULL,
    [AccountingDesignationCode1] CHAR (3)      NULL,
    [sCodeIDf_2]                 VARCHAR (6)   NULL,
    [AccountingCode2]            VARCHAR (100) NULL,
    [AccountingType2]            CHAR (3)      NULL,
    [AccountingDesignationCode2] CHAR (3)      NULL,
    [sCodeIDf_3]                 VARCHAR (6)   NULL,
    [AccountingCode3]            VARCHAR (100) NULL,
    [AccountingType3]            CHAR (3)      NULL,
    [AccountingDesignationCode3] CHAR (3)      NULL,
    [sCodeIDf_4]                 VARCHAR (6)   NULL,
    [AccountingCode4]            VARCHAR (100) NULL,
    [AccountingType4]            CHAR (3)      NULL,
    [AccountingDesignationCode4] CHAR (3)      NULL,
    [sCodeIDf_5]                 VARCHAR (6)   NULL,
    [AccountingCode5]            VARCHAR (100) NULL,
    [AccountingType5]            CHAR (3)      NULL,
    [AccountingDesignationCode5] CHAR (3)      NULL,
    [sCodeIDf_6]                 VARCHAR (6)   NULL,
    [AccountingCode6]            VARCHAR (100) NULL,
    [AccountingType6]            CHAR (3)      NULL,
    [AccountingDesignationCode6] CHAR (3)      NULL,
    [sCodeIDf_7]                 VARCHAR (6)   NULL,
    [AccountingCode7]            VARCHAR (100) NULL,
    [AccountingType7]            CHAR (3)      NULL,
    [AccountingDesignationCode7] CHAR (3)      NULL,
    [sCodeIDf_8]                 VARCHAR (6)   NULL,
    [AccountingCode8]            VARCHAR (100) NULL,
    [AccountingType8]            CHAR (3)      NULL,
    [AccountingDesignationCode8] CHAR (3)      NULL,
    [sCodeIDf_9]                 VARCHAR (6)   NULL,
    [AccountingCode9]            VARCHAR (100) NULL,
    [AccountingType9]            CHAR (3)      NULL,
    [AccountingDesignationCode9] CHAR (3)      NULL,
    [sCodeIDf_10]                VARCHAR (6)   NULL,
    [sBudgetVersion]             VARCHAR (30)  NULL,
    [sCurrencyIDf]               CHAR (3)      NULL,
    [CurDebit]                   MONEY         NULL,
    [CurCredit]                  MONEY         NULL,
    [curSrcDebit]                MONEY         NULL,
    [curSrcCredit]               MONEY         NULL,
    [curInvSrcDebit]             MONEY         NULL,
    [curInvSrcCredit]            MONEY         NULL,
    [TenantID]                   INT           NOT NULL,
    [ExecutionID]                VARCHAR (50)  NOT NULL,
    [InsertedDateTime]           DATETIME      NULL
);


GO
PRINT N'Creating [Extract].[MIP_RevenueAndExpense].[CIX_ExtractMIP_RevenueAndExpense_ExecutionID]...';


GO
CREATE CLUSTERED INDEX [CIX_ExtractMIP_RevenueAndExpense_ExecutionID]
    ON [Extract].[MIP_RevenueAndExpense]([ExecutionID] ASC);


GO
PRINT N'Creating [Extract].[MIP_Budget]...';


GO
CREATE TABLE [Extract].[MIP_Budget] (
    [dtmLastModified]            DATETIME      NULL,
    [dtmWorksheetStart]          DATETIME      NULL,
    [dtmWorksheetEnd]            DATETIME      NULL,
    [sWorksheetCycle]            VARCHAR (25)  NULL,
    [nNumCycles]                 INT           NULL,
    [sColumnHeading]             VARCHAR (70)  NULL,
    [dtmFrom]                    DATETIME      NULL,
    [dtmTo]                      DATETIME      NULL,
    [sCodeIDf_0]                 VARCHAR (6)   NULL,
    [AccountingCode0]            VARCHAR (100) NULL,
    [AccountingType0]            CHAR (3)      NULL,
    [AccountingDesignationCode0] CHAR (3)      NULL,
    [sCodeIDf_1]                 VARCHAR (6)   NULL,
    [AccountingCode1]            VARCHAR (100) NULL,
    [AccountingType1]            CHAR (3)      NULL,
    [AccountingDesignationCode1] CHAR (3)      NULL,
    [sCodeIDf_2]                 VARCHAR (6)   NULL,
    [AccountingCode2]            VARCHAR (100) NULL,
    [AccountingType2]            CHAR (3)      NULL,
    [AccountingDesignationCode2] CHAR (3)      NULL,
    [sCodeIDf_3]                 VARCHAR (6)   NULL,
    [AccountingCode3]            VARCHAR (100) NULL,
    [AccountingType3]            CHAR (3)      NULL,
    [AccountingDesignationCode3] CHAR (3)      NULL,
    [sCodeIDf_4]                 VARCHAR (6)   NULL,
    [AccountingCode4]            VARCHAR (100) NULL,
    [AccountingType4]            CHAR (3)      NULL,
    [AccountingDesignationCode4] CHAR (3)      NULL,
    [sCodeIDf_5]                 VARCHAR (6)   NULL,
    [AccountingCode5]            VARCHAR (100) NULL,
    [AccountingType5]            CHAR (3)      NULL,
    [AccountingDesignationCode5] CHAR (3)      NULL,
    [sCodeIDf_6]                 VARCHAR (6)   NULL,
    [AccountingCode6]            VARCHAR (100) NULL,
    [AccountingType6]            CHAR (3)      NULL,
    [AccountingDesignationCode6] CHAR (3)      NULL,
    [sCodeIDf_7]                 VARCHAR (6)   NULL,
    [AccountingCode7]            VARCHAR (100) NULL,
    [AccountingType7]            CHAR (3)      NULL,
    [AccountingDesignationCode7] CHAR (3)      NULL,
    [sCodeIDf_8]                 VARCHAR (6)   NULL,
    [AccountingCode8]            VARCHAR (100) NULL,
    [AccountingType8]            CHAR (3)      NULL,
    [AccountingDesignationCode8] CHAR (3)      NULL,
    [sCodeIDf_9]                 VARCHAR (6)   NULL,
    [AccountingCode9]            VARCHAR (100) NULL,
    [AccountingType9]            CHAR (3)      NULL,
    [AccountingDesignationCode9] CHAR (3)      NULL,
    [sCodeIDf_10]                VARCHAR (6)   NULL,
    [curAmount]                  MONEY         NULL,
    [dAmount]                    FLOAT (53)    NULL,
    [sDescription]               VARCHAR (100) NULL,
    [TenantID]                   INT           NOT NULL,
    [ExecutionID]                VARCHAR (50)  NOT NULL,
    [InsertedDateTime]           DATETIME      NULL
);


GO
PRINT N'Creating [Extract].[MIP_Budget].[CIX_ExtractMIP_Budget_ExecutionID]...';


GO
CREATE CLUSTERED INDEX [CIX_ExtractMIP_Budget_ExecutionID]
    ON [Extract].[MIP_Budget]([ExecutionID] ASC);


GO
PRINT N'Creating [Transform].[Tenant]...';


GO
CREATE TABLE [Transform].[Tenant] (
    [TenantID]           INT            NOT NULL,
    [TenantName]         NVARCHAR (255) NOT NULL,
    [IsActive]           INT            NOT NULL,
    [ConnectionStringID] INT            NULL,
    [ExecutionID]        VARCHAR (50)   NOT NULL,
    [ETLActionID]        INT            NOT NULL,
    [InsertedDateTime]   DATETIME       NULL,
    [UpdatedDateTime]    DATETIME       NULL,
    [Hashvalue]          NVARCHAR (64)  NOT NULL,
    CONSTRAINT [PK_TransformTenant__TenantID] PRIMARY KEY CLUSTERED ([TenantID] ASC)
);


GO
PRINT N'Creating [Transform].[DimCampus]...';


GO
CREATE TABLE [Transform].[DimCampus] (
    [CampusID]           INT               NOT NULL,
    [TenantID]           INT               NOT NULL,
    [Code]               NVARCHAR (255)    NOT NULL,
    [Name]               NVARCHAR (255)    NOT NULL,
    [Zipcode]            INT               NULL,
    [Latitude]           FLOAT (53)        NULL,
    [Longitude]          FLOAT (53)        NULL,
    [LocationGeographgy] [sys].[geography] NULL,
    [StartDateTime]      DATETIME          NOT NULL,
    [EndDateTime]        DATETIME          NULL,
    [Active]             BIT               NOT NULL,
    [ExecutionID]        VARCHAR (50)      NOT NULL,
    [ETLActionID]        INT               NOT NULL,
    [InsertedDateTime]   DATETIME          NULL,
    [UpdatedDateTime]    DATETIME          NULL,
    [Hashvalue]          NVARCHAR (64)     NOT NULL,
    CONSTRAINT [pk_TransformDimCampus__CampusID] PRIMARY KEY CLUSTERED ([CampusID] ASC, [TenantID] ASC)
);


GO
PRINT N'Creating [Transform].[DimLifeEventType]...';


GO
CREATE TABLE [Transform].[DimLifeEventType] (
    [LifeEventTypeID]  INT            NOT NULL,
    [TenantID]         INT            NOT NULL,
    [Name]             NVARCHAR (255) NOT NULL,
    [ExecutionID]      VARCHAR (50)   NOT NULL,
    [ETLActionID]      INT            NOT NULL,
    [InsertedDateTime] DATETIME       NULL,
    [UpdatedDateTime]  DATETIME       NULL,
    [Hashvalue]        NVARCHAR (64)  NOT NULL,
    CONSTRAINT [pk_TransformDimLifeEventType__CampusID] PRIMARY KEY CLUSTERED ([LifeEventTypeID] ASC, [TenantID] ASC)
);


GO
PRINT N'Creating [Transform].[FactLifeEvent]...';


GO
CREATE TABLE [Transform].[FactLifeEvent] (
    [LifeEventID]        INT           NOT NULL,
    [TenantID]           INT           NOT NULL,
    [LifeEventTypeID]    INT           NOT NULL,
    [CampusID]           INT           NOT NULL,
    [MinistryID]         INT           NOT NULL,
    [ActivityID]         INT           NOT NULL,
    [RosterID]           INT           NOT NULL,
    [Age]                INT           NULL,
    [Gender]             NCHAR (1)     NULL,
    [MaritalStatusID]    INT           NULL,
    [IndividualStatusID] INT           NULL,
    [AttendeeZipCode]    INT           NULL,
    [InstanceDateID]     INT           NOT NULL,
    [InstanceTimeID]     INT           NOT NULL,
    [LifeEventCount]     INT           NOT NULL,
    [ExecutionID]        VARCHAR (50)  NOT NULL,
    [ETLActionID]        INT           NOT NULL,
    [InsertedDateTime]   DATETIME      NULL,
    [UpdatedDateTime]    DATETIME      NULL,
    [Hashvalue]          NVARCHAR (64) NOT NULL,
    CONSTRAINT [PK_TransformLifeEvent__LifeEventID_TenantID] PRIMARY KEY CLUSTERED ([LifeEventID] ASC, [TenantID] ASC)
);


GO
PRINT N'Creating [Transform].[DimAttendanceType]...';


GO
CREATE TABLE [Transform].[DimAttendanceType] (
    [AttendanceTypeID] INT            NOT NULL,
    [TenantID]         INT            NOT NULL,
    [Category]         NVARCHAR (255) NOT NULL,
    [Job]              NVARCHAR (255) NULL,
    [VolStaffSchedule] NVARCHAR (255) NULL,
    [ExecutionID]      VARCHAR (50)   NOT NULL,
    [ETLActionID]      INT            NOT NULL,
    [InsertedDateTime] DATETIME       NULL,
    [UpdatedDateTime]  DATETIME       NULL,
    [Hashvalue]        NVARCHAR (64)  NOT NULL,
    CONSTRAINT [PK_TransformDimAttendanceType__AttendanceTypeID] PRIMARY KEY CLUSTERED ([AttendanceTypeID] ASC)
);


GO
PRINT N'Creating [Transform].[DimIndividualStatus]...';


GO
CREATE TABLE [Transform].[DimIndividualStatus] (
    [IndividualStatusID] INT            NOT NULL,
    [TenantID]           INT            NOT NULL,
    [Status]             NVARCHAR (255) NULL,
    [SubStatus]          NVARCHAR (255) NULL,
    [CampusID]           INT            NULL,
    [ExecutionID]        VARCHAR (50)   NOT NULL,
    [ETLActionID]        INT            NOT NULL,
    [InsertedDateTime]   DATETIME       NULL,
    [UpdatedDateTime]    DATETIME       NULL,
    [Hashvalue]          NVARCHAR (64)  NOT NULL,
    CONSTRAINT [pk_TransformDimIndividualStatus__IndividualStatusID_TenantID] PRIMARY KEY CLUSTERED ([IndividualStatusID] ASC, [TenantID] ASC)
);


GO
PRINT N'Creating [Transform].[FactAttendance]...';


GO
CREATE TABLE [Transform].[FactAttendance] (
    [AttendanceID]       INT           NOT NULL,
    [TenantID]           INT           NOT NULL,
    [CampusID]           INT           NOT NULL,
    [MinistryID]         INT           NOT NULL,
    [ActivityID]         INT           NOT NULL,
    [RosterID]           INT           NOT NULL,
    [AttendanceTypeID]   INT           NOT NULL,
    [Age]                INT           NULL,
    [MaritalStatusID]    INT           NULL,
    [IndividualStatusID] INT           NULL,
    [AttendeeZipCode]    INT           NULL,
    [InstanceDateID]     INT           NOT NULL,
    [InstanceTimeID]     INT           NOT NULL,
    [AttendanceCount]    INT           NOT NULL,
    [ExecutionID]        VARCHAR (50)  NOT NULL,
    [ETLActionID]        INT           NOT NULL,
    [InsertedDateTime]   DATETIME      NULL,
    [UpdatedDateTime]    DATETIME      NULL,
    [Hashvalue]          NVARCHAR (64) NOT NULL,
    CONSTRAINT [PK_TransformFactAttendance__AttendanceID_TenantID] PRIMARY KEY CLUSTERED ([AttendanceID] ASC, [TenantID] ASC)
);


GO
PRINT N'Creating [Transform].[DimRoster]...';


GO
CREATE TABLE [Transform].[DimRoster] (
    [RosterID]         INT            NOT NULL,
    [TenantID]         INT            NOT NULL,
    [RosterFolder]     NVARCHAR (255) NULL,
    [Roster]           NVARCHAR (255) NULL,
    [BreakoutGroup]    NVARCHAR (255) NULL,
    [StartDateTime]    DATETIME       NOT NULL,
    [EndDateTime]      DATETIME       NULL,
    [Active]           BIT            NOT NULL,
    [ExecutionID]      VARCHAR (50)   NOT NULL,
    [ETLActionID]      INT            NOT NULL,
    [InsertedDateTime] DATETIME       NULL,
    [UpdatedDateTime]  DATETIME       NULL,
    [Hashvalue]        NVARCHAR (64)  NOT NULL,
    CONSTRAINT [PK_TransformDimRoster__RosterID_TenantID] PRIMARY KEY CLUSTERED ([RosterID] ASC, [TenantID] ASC)
);


GO
PRINT N'Creating [Transform].[DimActivity]...';


GO
CREATE TABLE [Transform].[DimActivity] (
    [ActivityID]       INT            NOT NULL,
    [TenantID]         INT            NOT NULL,
    [Name]             NVARCHAR (255) NOT NULL,
    [MinistryID]       INT            NOT NULL,
    [CampusID]         INT            NOT NULL,
    [StartDateTime]    DATETIME       NOT NULL,
    [EndDateTime]      DATETIME       NULL,
    [Active]           BIT            NOT NULL,
    [ExecutionID]      VARCHAR (50)   NOT NULL,
    [ETLActionID]      INT            NOT NULL,
    [InsertedDateTime] DATETIME       NULL,
    [UpdatedDateTime]  DATETIME       NULL,
    [Hashvalue]        NVARCHAR (64)  NOT NULL,
    CONSTRAINT [PK_TransformDimActivity__ActivityID_TenantID] PRIMARY KEY CLUSTERED ([ActivityID] ASC, [TenantID] ASC)
);


GO
PRINT N'Creating [Transform].[ConnectionString]...';


GO
CREATE TABLE [Transform].[ConnectionString] (
    [ConnectionStringID] INT             IDENTITY (1, 1) NOT NULL,
    [Source]             NVARCHAR (1000) NOT NULL,
    [Note]               NVARCHAR (1000) NULL,
    [ExecutionID]        VARCHAR (50)    NOT NULL,
    [ETLActionID]        INT             NOT NULL,
    [InsertedDateTime]   DATETIME        NULL,
    [UpdatedDateTime]    DATETIME        NULL,
    [Hashvalue]          NVARCHAR (64)   NOT NULL,
    CONSTRAINT [PK_TransformConnectionString__ConnectionStringID] PRIMARY KEY CLUSTERED ([ConnectionStringID] ASC)
);


GO
PRINT N'Creating [Transform].[DimMinistry]...';


GO
CREATE TABLE [Transform].[DimMinistry] (
    [MinistryID]       INT            NOT NULL,
    [TenantID]         INT            NOT NULL,
    [Name]             NVARCHAR (255) NOT NULL,
    [CampusID]         INT            NOT NULL,
    [StartDateTime]    DATETIME       NOT NULL,
    [EndDateTime]      DATETIME       NULL,
    [Active]           BIT            NOT NULL,
    [ExecutionID]      VARCHAR (50)   NOT NULL,
    [ETLActionID]      INT            NOT NULL,
    [InsertedDateTime] DATETIME       NULL,
    [UpdatedDateTime]  DATETIME       NULL,
    [Hashvalue]        NVARCHAR (64)  NOT NULL,
    CONSTRAINT [pk_TransformDimMinistry__MinistryID_TenantID] PRIMARY KEY CLUSTERED ([MinistryID] ASC, [TenantID] ASC)
);


GO
PRINT N'Creating [Transform].[FactSmallGroup]...';


GO
CREATE TABLE [Transform].[FactSmallGroup] (
    [SmallGroupID]       INT           NOT NULL,
    [TenantID]           INT           NOT NULL,
    [SmallGroupDetailID] INT           NOT NULL,
    [CalendarMonth]      INT           NOT NULL,
    [CalendarYear]       INT           NOT NULL,
    [MissingReports]     INT           NOT NULL,
    [DidNotMeets]        INT           NOT NULL,
    [ActualAttendance]   INT           NOT NULL,
    [UniqueAttenders]    INT           NOT NULL,
    [TotalLeaders]       INT           NOT NULL,
    [TotalMembers]       INT           NOT NULL,
    [TotalProspects]     INT           NOT NULL,
    [ExecutionID]        VARCHAR (50)  NOT NULL,
    [ETLActionID]        INT           NOT NULL,
    [InsertedDateTime]   DATETIME      NULL,
    [UpdatedDateTime]    DATETIME      NULL,
    [Hashvalue]          NVARCHAR (64) NOT NULL,
    CONSTRAINT [PK_TransformSmallGroup__SmallGroupID_TenantID] PRIMARY KEY CLUSTERED ([SmallGroupID] ASC, [TenantID] ASC)
);


GO
PRINT N'Creating [Transform].[DimSmallGroupDetail]...';


GO
CREATE TABLE [Transform].[DimSmallGroupDetail] (
    [SmallGroupDetailID] INT               NOT NULL,
    [TenantID]           INT               NOT NULL,
    [CampusID]           INT               NULL,
    [GroupType]          NVARCHAR (255)    NULL,
    [GroupName]          NVARCHAR (255)    NOT NULL,
    [ZipCode]            INT               NULL,
    [Latitude]           FLOAT (53)        NULL,
    [Longitude]          FLOAT (53)        NULL,
    [LocationGeography]  [sys].[geography] NULL,
    [StartDateTime]      DATETIME          NOT NULL,
    [EndDateTime]        DATETIME          NULL,
    [Active]             BIT               NOT NULL,
    [ExecutionID]        VARCHAR (50)      NOT NULL,
    [ETLActionID]        INT               NOT NULL,
    [InsertedDateTime]   DATETIME          NULL,
    [UpdatedDateTime]    DATETIME          NULL,
    [Hashvalue]          NVARCHAR (64)     NOT NULL,
    CONSTRAINT [PK_TransformDimSmallDetailGroup__SmallGroupDetailID_TenantID] PRIMARY KEY CLUSTERED ([SmallGroupDetailID] ASC, [TenantID] ASC)
);


GO
PRINT N'Creating [Transform].[DimFinancialCategory]...';


GO
CREATE TABLE [Transform].[DimFinancialCategory] (
    [FinancialCategoryID]        INT            NOT NULL,
    [TenantID]                   INT            NOT NULL,
    [GLCode]                     NVARCHAR (6)   NOT NULL,
    [GLName]                     NVARCHAR (100) NULL,
    [GLType]                     NVARCHAR (3)   NULL,
    [GLDesignationCode]          NVARCHAR (3)   NULL,
    [FundCode]                   NVARCHAR (6)   NOT NULL,
    [FundName]                   NVARCHAR (100) NULL,
    [FundType]                   NVARCHAR (3)   NULL,
    [FundDesignationCode]        NVARCHAR (3)   NULL,
    [CampusCode]                 NVARCHAR (6)   NOT NULL,
    [CampusName]                 NVARCHAR (100) NULL,
    [CampusType]                 NVARCHAR (3)   NULL,
    [CampusDesignationCode]      NVARCHAR (3)   NULL,
    [DepartmentCode]             NVARCHAR (6)   NOT NULL,
    [DepartmentName]             NVARCHAR (100) NULL,
    [DepartmentType]             NVARCHAR (3)   NULL,
    [DepartmentDesignationCode]  NVARCHAR (3)   NULL,
    [AccountingCode5]            NVARCHAR (6)   NOT NULL,
    [AccountingName5]            NVARCHAR (100) NULL,
    [AccountingType5]            NVARCHAR (3)   NULL,
    [AccountingDesignationCode5] NVARCHAR (3)   NULL,
    [ProjectCode]                NVARCHAR (6)   NOT NULL,
    [ProjectName]                NVARCHAR (100) NULL,
    [ProjectType]                NVARCHAR (3)   NULL,
    [ProjectDesignationCode]     NVARCHAR (3)   NULL,
    [AccountingCode7]            NVARCHAR (6)   NOT NULL,
    [AccountingName7]            NVARCHAR (100) NULL,
    [AccountingType7]            NVARCHAR (3)   NULL,
    [AccountingDesignationCode7] NVARCHAR (3)   NULL,
    [AccountingCode8]            NVARCHAR (6)   NOT NULL,
    [AccountingName8]            NVARCHAR (100) NULL,
    [AccountingType8]            NVARCHAR (3)   NULL,
    [AccountingDesignationCode8] NVARCHAR (3)   NULL,
    [AccountingCode9]            NVARCHAR (6)   NOT NULL,
    [AccountingName9]            NVARCHAR (100) NULL,
    [AccountingType9]            NVARCHAR (3)   NULL,
    [AccountingDesignationCode9] NVARCHAR (3)   NULL,
    [AccountingCode10]           NVARCHAR (6)   NOT NULL,
    [ExecutionID]                VARCHAR (50)   NOT NULL,
    [ETLActionID]                INT            NOT NULL,
    [InsertedDateTime]           DATETIME       NULL,
    [UpdatedDateTime]            DATETIME       NULL,
    [Hashvalue]                  NVARCHAR (64)  NOT NULL,
    CONSTRAINT [pk_TransformDimFinancialCategory__FinancialCategoryID_TenantID] PRIMARY KEY CLUSTERED ([FinancialCategoryID] ASC, [TenantID] ASC)
);


GO
PRINT N'Creating [Transform].[FactRevenue]...';


GO
CREATE TABLE [Transform].[FactRevenue] (
    [RevenueID]           INT           NOT NULL,
    [TenantID]            INT           NOT NULL,
    [DateID]              INT           NOT NULL,
    [EntityID]            INT           NOT NULL,
    [FinancialCategoryID] INT           NOT NULL,
    [Amount]              MONEY         NOT NULL,
    [ExecutionID]         VARCHAR (50)  NOT NULL,
    [ETLActionID]         INT           NOT NULL,
    [InsertedDateTime]    DATETIME      NULL,
    [UpdatedDateTime]     DATETIME      NULL,
    [Hashvalue]           NVARCHAR (64) NOT NULL,
    CONSTRAINT [PK_TransformFactRevenue__RevenueID_TenantID] PRIMARY KEY CLUSTERED ([RevenueID] ASC, [TenantID] ASC)
);


GO
PRINT N'Creating [Transform].[FactExpense]...';


GO
CREATE TABLE [Transform].[FactExpense] (
    [ExpenseID]           INT           NOT NULL,
    [TenantID]            INT           NOT NULL,
    [DateID]              INT           NOT NULL,
    [EntityID]            INT           NOT NULL,
    [FinancialCategoryID] INT           NOT NULL,
    [Amount]              MONEY         NOT NULL,
    [ExecutionID]         VARCHAR (50)  NOT NULL,
    [ETLActionID]         INT           NOT NULL,
    [InsertedDateTime]    DATETIME      NULL,
    [UpdatedDateTime]     DATETIME      NULL,
    [Hashvalue]           NVARCHAR (64) NOT NULL,
    CONSTRAINT [PK_TransformFactExpense__ExpenseID_TenantID] PRIMARY KEY CLUSTERED ([ExpenseID] ASC, [TenantID] ASC)
);


GO
PRINT N'Creating [Transform].[FactBudgetRevenue]...';


GO
CREATE TABLE [Transform].[FactBudgetRevenue] (
    [BudgetRevenueID]     INT           NOT NULL,
    [TenantID]            INT           NOT NULL,
    [BudgetYear]          INT           NOT NULL,
    [BudgetMonth]         TINYINT       NOT NULL,
    [EntityID]            INT           NOT NULL,
    [FinancialCategoryID] INT           NOT NULL,
    [Amount]              MONEY         NOT NULL,
    [ExecutionID]         VARCHAR (50)  NOT NULL,
    [ETLActionID]         INT           NOT NULL,
    [InsertedDateTime]    DATETIME      NULL,
    [UpdatedDateTime]     DATETIME      NULL,
    [Hashvalue]           NVARCHAR (64) NOT NULL,
    CONSTRAINT [PK_TransformFactBudgetRevenue__BudgetRevenueID_TenantID] PRIMARY KEY CLUSTERED ([BudgetRevenueID] ASC, [TenantID] ASC)
);


GO
PRINT N'Creating [Transform].[FactBudgetExpense]...';


GO
CREATE TABLE [Transform].[FactBudgetExpense] (
    [BudgetExpenseID]     INT           NOT NULL,
    [TenantID]            INT           NOT NULL,
    [BudgetYear]          INT           NOT NULL,
    [BudgetMonth]         TINYINT       NOT NULL,
    [EntityID]            INT           NOT NULL,
    [FinancialCategoryID] INT           NOT NULL,
    [Amount]              MONEY         NOT NULL,
    [ExecutionID]         VARCHAR (50)  NOT NULL,
    [ETLActionID]         INT           NOT NULL,
    [InsertedDateTime]    DATETIME      NULL,
    [UpdatedDateTime]     DATETIME      NULL,
    [Hashvalue]           NVARCHAR (64) NOT NULL,
    CONSTRAINT [PK_TransformFactBudgetExpense__BudgetExpenseID_TenantID] PRIMARY KEY CLUSTERED ([BudgetExpenseID] ASC, [TenantID] ASC)
);


GO
PRINT N'Creating [dbo].[ConnectionString]...';


GO
CREATE TABLE [dbo].[ConnectionString] (
    [ConnectionStringID] INT             NOT NULL,
    [Source]             NVARCHAR (1000) NOT NULL,
    [Note]               NVARCHAR (1000) NULL,
    [ExecutionID]        VARCHAR (50)    NOT NULL,
    [InsertedDateTime]   DATETIME        NULL,
    [UpdatedDateTime]    DATETIME        NULL,
    [Hashvalue]          NVARCHAR (64)   NOT NULL,
    CONSTRAINT [PK_ConnectionString__ConnectionStringID] PRIMARY KEY CLUSTERED ([ConnectionStringID] ASC)
);


GO
PRINT N'Creating [dbo].[ETLAction]...';


GO
CREATE TABLE [dbo].[ETLAction] (
    [ETLActionID] INT             NOT NULL,
    [Name]        NVARCHAR (255)  NOT NULL,
    [Description] NVARCHAR (1000) NULL,
    CONSTRAINT [PK_ETLAction__ETLActionID] PRIMARY KEY CLUSTERED ([ETLActionID] ASC)
);


GO
PRINT N'Creating [dbo].[ETLProcess]...';


GO
CREATE TABLE [dbo].[ETLProcess] (
    [ETLProcessID] INT             NOT NULL,
    [Name]         NVARCHAR (255)  NOT NULL,
    [Description]  NVARCHAR (1000) NULL,
    CONSTRAINT [PK_ETLProcess__ETLProcessID] PRIMARY KEY CLUSTERED ([ETLProcessID] ASC)
);


GO
PRINT N'Creating [dbo].[Tenant]...';


GO
CREATE TABLE [dbo].[Tenant] (
    [TenantID]           INT            NOT NULL,
    [TenantName]         NVARCHAR (255) NOT NULL,
    [IsActive]           INT            NOT NULL,
    [ConnectionStringID] INT            NULL,
    [ExecutionID]        VARCHAR (50)   NOT NULL,
    [InsertedDateTime]   DATETIME       NULL,
    [UpdatedDateTime]    DATETIME       NULL,
    [Hashvalue]          NVARCHAR (64)  NOT NULL,
    CONSTRAINT [PK_Tenant__TenantID] PRIMARY KEY CLUSTERED ([TenantID] ASC)
);


GO
PRINT N'Creating [dbo].[TenantETLProcess]...';


GO
CREATE TABLE [dbo].[TenantETLProcess] (
    [TenantID]     INT NOT NULL,
    [ETLProcessID] INT NOT NULL,
    CONSTRAINT [PK_TenantETLPRocess__TenantID_ETLProcessID] PRIMARY KEY CLUSTERED ([TenantID] ASC, [ETLProcessID] ASC)
);


GO
PRINT N'Creating unnamed constraint on [DW].[DimCampus]...';


GO
ALTER TABLE [DW].[DimCampus]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimCampus]...';


GO
ALTER TABLE [DW].[DimCampus]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimDate]...';


GO
ALTER TABLE [DW].[DimDate]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimDate]...';


GO
ALTER TABLE [DW].[DimDate]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactLifeEvent]...';


GO
ALTER TABLE [DW].[FactLifeEvent]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactLifeEvent]...';


GO
ALTER TABLE [DW].[FactLifeEvent]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimLifeEventType]...';


GO
ALTER TABLE [DW].[DimLifeEventType]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimLifeEventType]...';


GO
ALTER TABLE [DW].[DimLifeEventType]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimIndividualStatus]...';


GO
ALTER TABLE [DW].[DimIndividualStatus]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimIndividualStatus]...';


GO
ALTER TABLE [DW].[DimIndividualStatus]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactAttendance]...';


GO
ALTER TABLE [DW].[FactAttendance]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactAttendance]...';


GO
ALTER TABLE [DW].[FactAttendance]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimRoster]...';


GO
ALTER TABLE [DW].[DimRoster]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimRoster]...';


GO
ALTER TABLE [DW].[DimRoster]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimActivity]...';


GO
ALTER TABLE [DW].[DimActivity]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimActivity]...';


GO
ALTER TABLE [DW].[DimActivity]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimMaritalStatus]...';


GO
ALTER TABLE [DW].[DimMaritalStatus]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimMaritalStatus]...';


GO
ALTER TABLE [DW].[DimMaritalStatus]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimAttendanceType]...';


GO
ALTER TABLE [DW].[DimAttendanceType]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimAttendanceType]...';


GO
ALTER TABLE [DW].[DimAttendanceType]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimMinistry]...';


GO
ALTER TABLE [DW].[DimMinistry]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimMinistry]...';


GO
ALTER TABLE [DW].[DimMinistry]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactSmallGroup]...';


GO
ALTER TABLE [DW].[FactSmallGroup]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactSmallGroup]...';


GO
ALTER TABLE [DW].[FactSmallGroup]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimSmallGroupDetail]...';


GO
ALTER TABLE [DW].[DimSmallGroupDetail]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimSmallGroupDetail]...';


GO
ALTER TABLE [DW].[DimSmallGroupDetail]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimEntity]...';


GO
ALTER TABLE [DW].[DimEntity]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimEntity]...';


GO
ALTER TABLE [DW].[DimEntity]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimFinancialCategory]...';


GO
ALTER TABLE [DW].[DimFinancialCategory]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimFinancialCategory]...';


GO
ALTER TABLE [DW].[DimFinancialCategory]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactRevenue]...';


GO
ALTER TABLE [DW].[FactRevenue]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactRevenue]...';


GO
ALTER TABLE [DW].[FactRevenue]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactExpense]...';


GO
ALTER TABLE [DW].[FactExpense]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactExpense]...';


GO
ALTER TABLE [DW].[FactExpense]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactBudgetRevenue]...';


GO
ALTER TABLE [DW].[FactBudgetRevenue]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactBudgetRevenue]...';


GO
ALTER TABLE [DW].[FactBudgetRevenue]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactBudgetExpense]...';


GO
ALTER TABLE [DW].[FactBudgetExpense]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactBudgetExpense]...';


GO
ALTER TABLE [DW].[FactBudgetExpense]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[FellowshipOne_Attendance]...';


GO
ALTER TABLE [Extract].[FellowshipOne_Attendance]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[FellowshipOne_PersonSubStatus]...';


GO
ALTER TABLE [Extract].[FellowshipOne_PersonSubStatus]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[TransactionalTenant]...';


GO
ALTER TABLE [Extract].[TransactionalTenant]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[TransactionalConnectionString]...';


GO
ALTER TABLE [Extract].[TransactionalConnectionString]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[FellowshipOne_SubFund]...';


GO
ALTER TABLE [Extract].[FellowshipOne_SubFund]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[FellowshipOne_PledgeDrive]...';


GO
ALTER TABLE [Extract].[FellowshipOne_PledgeDrive]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[FellowshipOne_PersonStatus]...';


GO
ALTER TABLE [Extract].[FellowshipOne_PersonStatus]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[FellowshipOne_Fund]...';


GO
ALTER TABLE [Extract].[FellowshipOne_Fund]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[FellowshipOne_ContributionType]...';


GO
ALTER TABLE [Extract].[FellowshipOne_ContributionType]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[FellowshipOne_ContributionSubType]...';


GO
ALTER TABLE [Extract].[FellowshipOne_ContributionSubType]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[Transactional_HeadCount]...';


GO
ALTER TABLE [Extract].[Transactional_HeadCount]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[FellowshipOne_AssimilationSteps]...';


GO
ALTER TABLE [Extract].[FellowshipOne_AssimilationSteps]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[FellowshipOne_FTV]...';


GO
ALTER TABLE [Extract].[FellowshipOne_FTV]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[FellowshipOne_SmallGroupStatus]...';


GO
ALTER TABLE [Extract].[FellowshipOne_SmallGroupStatus]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[MIP_RevenueAndExpense]...';


GO
ALTER TABLE [Extract].[MIP_RevenueAndExpense]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[MIP_Budget]...';


GO
ALTER TABLE [Extract].[MIP_Budget]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[Tenant]...';


GO
ALTER TABLE [Transform].[Tenant]
    ADD DEFAULT ((0)) FOR [IsActive];


GO
PRINT N'Creating unnamed constraint on [Transform].[Tenant]...';


GO
ALTER TABLE [Transform].[Tenant]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[Tenant]...';


GO
ALTER TABLE [Transform].[Tenant]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[DimCampus]...';


GO
ALTER TABLE [Transform].[DimCampus]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[DimCampus]...';


GO
ALTER TABLE [Transform].[DimCampus]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[DimLifeEventType]...';


GO
ALTER TABLE [Transform].[DimLifeEventType]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[DimLifeEventType]...';


GO
ALTER TABLE [Transform].[DimLifeEventType]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactLifeEvent]...';


GO
ALTER TABLE [Transform].[FactLifeEvent]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactLifeEvent]...';


GO
ALTER TABLE [Transform].[FactLifeEvent]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[DimAttendanceType]...';


GO
ALTER TABLE [Transform].[DimAttendanceType]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[DimAttendanceType]...';


GO
ALTER TABLE [Transform].[DimAttendanceType]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[DimIndividualStatus]...';


GO
ALTER TABLE [Transform].[DimIndividualStatus]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[DimIndividualStatus]...';


GO
ALTER TABLE [Transform].[DimIndividualStatus]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactAttendance]...';


GO
ALTER TABLE [Transform].[FactAttendance]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactAttendance]...';


GO
ALTER TABLE [Transform].[FactAttendance]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[DimRoster]...';


GO
ALTER TABLE [Transform].[DimRoster]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[DimRoster]...';


GO
ALTER TABLE [Transform].[DimRoster]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[DimActivity]...';


GO
ALTER TABLE [Transform].[DimActivity]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[DimActivity]...';


GO
ALTER TABLE [Transform].[DimActivity]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[ConnectionString]...';


GO
ALTER TABLE [Transform].[ConnectionString]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[ConnectionString]...';


GO
ALTER TABLE [Transform].[ConnectionString]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[DimMinistry]...';


GO
ALTER TABLE [Transform].[DimMinistry]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[DimMinistry]...';


GO
ALTER TABLE [Transform].[DimMinistry]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactSmallGroup]...';


GO
ALTER TABLE [Transform].[FactSmallGroup]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactSmallGroup]...';


GO
ALTER TABLE [Transform].[FactSmallGroup]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[DimSmallGroupDetail]...';


GO
ALTER TABLE [Transform].[DimSmallGroupDetail]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[DimSmallGroupDetail]...';


GO
ALTER TABLE [Transform].[DimSmallGroupDetail]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[DimFinancialCategory]...';


GO
ALTER TABLE [Transform].[DimFinancialCategory]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[DimFinancialCategory]...';


GO
ALTER TABLE [Transform].[DimFinancialCategory]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactRevenue]...';


GO
ALTER TABLE [Transform].[FactRevenue]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactRevenue]...';


GO
ALTER TABLE [Transform].[FactRevenue]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactExpense]...';


GO
ALTER TABLE [Transform].[FactExpense]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactExpense]...';


GO
ALTER TABLE [Transform].[FactExpense]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactBudgetRevenue]...';


GO
ALTER TABLE [Transform].[FactBudgetRevenue]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactBudgetRevenue]...';


GO
ALTER TABLE [Transform].[FactBudgetRevenue]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactBudgetExpense]...';


GO
ALTER TABLE [Transform].[FactBudgetExpense]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactBudgetExpense]...';


GO
ALTER TABLE [Transform].[FactBudgetExpense]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [dbo].[ConnectionString]...';


GO
ALTER TABLE [dbo].[ConnectionString]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [dbo].[ConnectionString]...';


GO
ALTER TABLE [dbo].[ConnectionString]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [dbo].[Tenant]...';


GO
ALTER TABLE [dbo].[Tenant]
    ADD DEFAULT ((0)) FOR [IsActive];


GO
PRINT N'Creating unnamed constraint on [dbo].[Tenant]...';


GO
ALTER TABLE [dbo].[Tenant]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [dbo].[Tenant]...';


GO
ALTER TABLE [dbo].[Tenant]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating [DW].[FK_DWDimCampus_Tenant__TenantID]...';


GO
ALTER TABLE [DW].[DimCampus]
    ADD CONSTRAINT [FK_DWDimCampus_Tenant__TenantID] FOREIGN KEY ([TenantID]) REFERENCES [dbo].[Tenant] ([TenantID]);


GO
PRINT N'Creating [DW].[FK_DWFactLifeEvent_Tenant__TenantID]...';


GO
ALTER TABLE [DW].[FactLifeEvent]
    ADD CONSTRAINT [FK_DWFactLifeEvent_Tenant__TenantID] FOREIGN KEY ([TenantID]) REFERENCES [dbo].[Tenant] ([TenantID]);


GO
PRINT N'Creating [DW].[FK_DWDimLifeEventType_Tenant__TenantID]...';


GO
ALTER TABLE [DW].[DimLifeEventType]
    ADD CONSTRAINT [FK_DWDimLifeEventType_Tenant__TenantID] FOREIGN KEY ([TenantID]) REFERENCES [dbo].[Tenant] ([TenantID]);


GO
PRINT N'Creating [DW].[FK_DWDimIndividualStatus_Tenant__TenantID]...';


GO
ALTER TABLE [DW].[DimIndividualStatus]
    ADD CONSTRAINT [FK_DWDimIndividualStatus_Tenant__TenantID] FOREIGN KEY ([TenantID]) REFERENCES [dbo].[Tenant] ([TenantID]);


GO
PRINT N'Creating [DW].[FK_DWFactAttendance_Tenant__TenantID]...';


GO
ALTER TABLE [DW].[FactAttendance]
    ADD CONSTRAINT [FK_DWFactAttendance_Tenant__TenantID] FOREIGN KEY ([TenantID]) REFERENCES [dbo].[Tenant] ([TenantID]);


GO
PRINT N'Creating [DW].[FK_DWDimRoster_Tenant__TenantID]...';


GO
ALTER TABLE [DW].[DimRoster]
    ADD CONSTRAINT [FK_DWDimRoster_Tenant__TenantID] FOREIGN KEY ([TenantID]) REFERENCES [dbo].[Tenant] ([TenantID]);


GO
PRINT N'Creating [DW].[FK_DWDimActivity_Tenant__TenantID]...';


GO
ALTER TABLE [DW].[DimActivity]
    ADD CONSTRAINT [FK_DWDimActivity_Tenant__TenantID] FOREIGN KEY ([TenantID]) REFERENCES [dbo].[Tenant] ([TenantID]);


GO
PRINT N'Creating [DW].[FK_DWDimMaritalStatus_Tenant__TenantID]...';


GO
ALTER TABLE [DW].[DimMaritalStatus]
    ADD CONSTRAINT [FK_DWDimMaritalStatus_Tenant__TenantID] FOREIGN KEY ([TenantID]) REFERENCES [dbo].[Tenant] ([TenantID]);


GO
PRINT N'Creating [DW].[FK_DWDimAttendanceType_Tenant__TenantID]...';


GO
ALTER TABLE [DW].[DimAttendanceType]
    ADD CONSTRAINT [FK_DWDimAttendanceType_Tenant__TenantID] FOREIGN KEY ([TenantID]) REFERENCES [dbo].[Tenant] ([TenantID]);


GO
PRINT N'Creating [DW].[FK_DWDimMinistry_Tenant__TenantID]...';


GO
ALTER TABLE [DW].[DimMinistry]
    ADD CONSTRAINT [FK_DWDimMinistry_Tenant__TenantID] FOREIGN KEY ([TenantID]) REFERENCES [dbo].[Tenant] ([TenantID]);


GO
PRINT N'Creating [DW].[FK_DWFactSmallGroup_Tenant__TenantID]...';


GO
ALTER TABLE [DW].[FactSmallGroup]
    ADD CONSTRAINT [FK_DWFactSmallGroup_Tenant__TenantID] FOREIGN KEY ([TenantID]) REFERENCES [dbo].[Tenant] ([TenantID]);


GO
PRINT N'Creating [DW].[FK_DWDimSmallGroup_Tenant__TenantID]...';


GO
ALTER TABLE [DW].[DimSmallGroupDetail]
    ADD CONSTRAINT [FK_DWDimSmallGroup_Tenant__TenantID] FOREIGN KEY ([TenantID]) REFERENCES [dbo].[Tenant] ([TenantID]);


GO
PRINT N'Creating [DW].[FK_DWDimEntity_Tenant__TenantID]...';


GO
ALTER TABLE [DW].[DimEntity]
    ADD CONSTRAINT [FK_DWDimEntity_Tenant__TenantID] FOREIGN KEY ([TenantID]) REFERENCES [dbo].[Tenant] ([TenantID]);


GO
PRINT N'Creating [DW].[FK_DWDimFinancialCategory_Tenant__TenantID]...';


GO
ALTER TABLE [DW].[DimFinancialCategory]
    ADD CONSTRAINT [FK_DWDimFinancialCategory_Tenant__TenantID] FOREIGN KEY ([TenantID]) REFERENCES [dbo].[Tenant] ([TenantID]);


GO
PRINT N'Creating [DW].[FK_DWFactRevenue_Tenant__TenantID]...';


GO
ALTER TABLE [DW].[FactRevenue]
    ADD CONSTRAINT [FK_DWFactRevenue_Tenant__TenantID] FOREIGN KEY ([TenantID]) REFERENCES [dbo].[Tenant] ([TenantID]);


GO
PRINT N'Creating [DW].[FK_DWFactExpense_Tenant__TenantID]...';


GO
ALTER TABLE [DW].[FactExpense]
    ADD CONSTRAINT [FK_DWFactExpense_Tenant__TenantID] FOREIGN KEY ([TenantID]) REFERENCES [dbo].[Tenant] ([TenantID]);


GO
PRINT N'Creating [DW].[FK_DWFactBudgetRevenue_Tenant__TenantID]...';


GO
ALTER TABLE [DW].[FactBudgetRevenue]
    ADD CONSTRAINT [FK_DWFactBudgetRevenue_Tenant__TenantID] FOREIGN KEY ([TenantID]) REFERENCES [dbo].[Tenant] ([TenantID]);


GO
PRINT N'Creating [DW].[FK_DWFactBudgetExpense_Tenant__TenantID]...';


GO
ALTER TABLE [DW].[FactBudgetExpense]
    ADD CONSTRAINT [FK_DWFactBudgetExpense_Tenant__TenantID] FOREIGN KEY ([TenantID]) REFERENCES [dbo].[Tenant] ([TenantID]);


GO
PRINT N'Creating [Transform].[FK_TransformTenant_ConnectionString__ConnectionStringID]...';


GO
ALTER TABLE [Transform].[Tenant]
    ADD CONSTRAINT [FK_TransformTenant_ConnectionString__ConnectionStringID] FOREIGN KEY ([ConnectionStringID]) REFERENCES [dbo].[ConnectionString] ([ConnectionStringID]);


GO
PRINT N'Creating [Transform].[FK_TransformTenant_ETLAction__ETLActionID]...';


GO
ALTER TABLE [Transform].[Tenant]
    ADD CONSTRAINT [FK_TransformTenant_ETLAction__ETLActionID] FOREIGN KEY ([ETLActionID]) REFERENCES [dbo].[ETLAction] ([ETLActionID]);


GO
PRINT N'Creating [Transform].[FK_TransformDimCampus_Tenant__TenantID]...';


GO
ALTER TABLE [Transform].[DimCampus]
    ADD CONSTRAINT [FK_TransformDimCampus_Tenant__TenantID] FOREIGN KEY ([TenantID]) REFERENCES [dbo].[Tenant] ([TenantID]);


GO
PRINT N'Creating [Transform].[FK_TransformDimLifeEventType_Tenant__TenantID]...';


GO
ALTER TABLE [Transform].[DimLifeEventType]
    ADD CONSTRAINT [FK_TransformDimLifeEventType_Tenant__TenantID] FOREIGN KEY ([TenantID]) REFERENCES [dbo].[Tenant] ([TenantID]);


GO
PRINT N'Creating [Transform].[FK_TransformFactLifeEvent_Tenant__TenantID]...';


GO
ALTER TABLE [Transform].[FactLifeEvent]
    ADD CONSTRAINT [FK_TransformFactLifeEvent_Tenant__TenantID] FOREIGN KEY ([TenantID]) REFERENCES [dbo].[Tenant] ([TenantID]);


GO
PRINT N'Creating [Transform].[FK_TransformDimAttendanceType_Tenant__TenantID]...';


GO
ALTER TABLE [Transform].[DimAttendanceType]
    ADD CONSTRAINT [FK_TransformDimAttendanceType_Tenant__TenantID] FOREIGN KEY ([TenantID]) REFERENCES [dbo].[Tenant] ([TenantID]);


GO
PRINT N'Creating [Transform].[FK_TransformDimIndividualStatus_Tenant__TenantID]...';


GO
ALTER TABLE [Transform].[DimIndividualStatus]
    ADD CONSTRAINT [FK_TransformDimIndividualStatus_Tenant__TenantID] FOREIGN KEY ([TenantID]) REFERENCES [dbo].[Tenant] ([TenantID]);


GO
PRINT N'Creating [Transform].[FK_TransformFactAttendance_Tenant__TenantID]...';


GO
ALTER TABLE [Transform].[FactAttendance]
    ADD CONSTRAINT [FK_TransformFactAttendance_Tenant__TenantID] FOREIGN KEY ([TenantID]) REFERENCES [dbo].[Tenant] ([TenantID]);


GO
PRINT N'Creating [Transform].[FK_TransformDimRoster_Tenant__TenantID]...';


GO
ALTER TABLE [Transform].[DimRoster]
    ADD CONSTRAINT [FK_TransformDimRoster_Tenant__TenantID] FOREIGN KEY ([TenantID]) REFERENCES [dbo].[Tenant] ([TenantID]);


GO
PRINT N'Creating [Transform].[FK_TransformDimActivity_Tenant__TenantID]...';


GO
ALTER TABLE [Transform].[DimActivity]
    ADD CONSTRAINT [FK_TransformDimActivity_Tenant__TenantID] FOREIGN KEY ([TenantID]) REFERENCES [dbo].[Tenant] ([TenantID]);


GO
PRINT N'Creating [Transform].[FK_TransformConnectionString_ETLAction__ETLActionID]...';


GO
ALTER TABLE [Transform].[ConnectionString]
    ADD CONSTRAINT [FK_TransformConnectionString_ETLAction__ETLActionID] FOREIGN KEY ([ETLActionID]) REFERENCES [dbo].[ETLAction] ([ETLActionID]);


GO
PRINT N'Creating [Transform].[FK_TransformDimMinistry_Tenant__TenantID]...';


GO
ALTER TABLE [Transform].[DimMinistry]
    ADD CONSTRAINT [FK_TransformDimMinistry_Tenant__TenantID] FOREIGN KEY ([TenantID]) REFERENCES [dbo].[Tenant] ([TenantID]);


GO
PRINT N'Creating [Transform].[FK_TransformFactSmallGroup_Tenant__TenantID]...';


GO
ALTER TABLE [Transform].[FactSmallGroup]
    ADD CONSTRAINT [FK_TransformFactSmallGroup_Tenant__TenantID] FOREIGN KEY ([TenantID]) REFERENCES [dbo].[Tenant] ([TenantID]);


GO
PRINT N'Creating [Transform].[FK_TransformDimSmallGroup_Tenant__TenantID]...';


GO
ALTER TABLE [Transform].[DimSmallGroupDetail]
    ADD CONSTRAINT [FK_TransformDimSmallGroup_Tenant__TenantID] FOREIGN KEY ([TenantID]) REFERENCES [dbo].[Tenant] ([TenantID]);


GO
PRINT N'Creating [Transform].[FK_TransformDimFinancialCategory_Tenant__TenantID]...';


GO
ALTER TABLE [Transform].[DimFinancialCategory]
    ADD CONSTRAINT [FK_TransformDimFinancialCategory_Tenant__TenantID] FOREIGN KEY ([TenantID]) REFERENCES [dbo].[Tenant] ([TenantID]);


GO
PRINT N'Creating [Transform].[FK_TransformFactRevenue_Tenant__TenantID]...';


GO
ALTER TABLE [Transform].[FactRevenue]
    ADD CONSTRAINT [FK_TransformFactRevenue_Tenant__TenantID] FOREIGN KEY ([TenantID]) REFERENCES [dbo].[Tenant] ([TenantID]);


GO
PRINT N'Creating [Transform].[FK_TransformFactExpense_Tenant__TenantID]...';


GO
ALTER TABLE [Transform].[FactExpense]
    ADD CONSTRAINT [FK_TransformFactExpense_Tenant__TenantID] FOREIGN KEY ([TenantID]) REFERENCES [dbo].[Tenant] ([TenantID]);


GO
PRINT N'Creating [Transform].[FK_TransformFactBudgetRevenue_Tenant__TenantID]...';


GO
ALTER TABLE [Transform].[FactBudgetRevenue]
    ADD CONSTRAINT [FK_TransformFactBudgetRevenue_Tenant__TenantID] FOREIGN KEY ([TenantID]) REFERENCES [dbo].[Tenant] ([TenantID]);


GO
PRINT N'Creating [Transform].[FK_TransformFactBudgetExpense_Tenant__TenantID]...';


GO
ALTER TABLE [Transform].[FactBudgetExpense]
    ADD CONSTRAINT [FK_TransformFactBudgetExpense_Tenant__TenantID] FOREIGN KEY ([TenantID]) REFERENCES [dbo].[Tenant] ([TenantID]);


GO
PRINT N'Creating [dbo].[FK_Tenant_ConnectionString__ConnectionStringID]...';


GO
ALTER TABLE [dbo].[Tenant]
    ADD CONSTRAINT [FK_Tenant_ConnectionString__ConnectionStringID] FOREIGN KEY ([ConnectionStringID]) REFERENCES [dbo].[ConnectionString] ([ConnectionStringID]);


GO
PRINT N'Creating [dbo].[FK_TenantETLProcess_Tenant__TenantID]...';


GO
ALTER TABLE [dbo].[TenantETLProcess]
    ADD CONSTRAINT [FK_TenantETLProcess_Tenant__TenantID] FOREIGN KEY ([TenantID]) REFERENCES [dbo].[Tenant] ([TenantID]);


GO
PRINT N'Creating [dbo].[FK_TenantETLProcess_ETLProcess__ETLProcessID]...';


GO
ALTER TABLE [dbo].[TenantETLProcess]
    ADD CONSTRAINT [FK_TenantETLProcess_ETLProcess__ETLProcessID] FOREIGN KEY ([ETLProcessID]) REFERENCES [dbo].[ETLProcess] ([ETLProcessID]);


GO
PRINT N'Creating [DW].[usp_UpsertDimDate]...';


GO
CREATE PROCEDURE [DW].[usp_UpsertDimDate] @StartDate DATE,
                                          @EndDate   DATE
AS
    --based on http://www.codeproject.com/Articles/647950/Create-and-Populate-Date-Dimension-for-Data-Wareho
     --REMOVE existing rows	
	DELETE FROM DW.DimDate 
	WHERE
	   ActualDate BETWEEN @StartDate AND @EndDate;

     --Temporary Variables To Hold the Values During Processing of Each Date of Year
     DECLARE @DayOfWeekInMonth INT, @DayOfWeekInYear INT, @DayOfQuarter INT, @WeekOfMonth INT, @CurrentYear INT, @CurrentMonth INT, @CurrentQuarter INT;

     /*Table Data type to store the day of week count for the month and year*/

     DECLARE @DayOfWeek TABLE(
	     DayOWeek          INT
	   , MonthCount   INT
	   , QuarterCount INT
	   , YearCount    INT
     );

     INSERT INTO @DayOfWeek
     VALUES(1, 0, 0, 0);
     INSERT INTO @DayOfWeek
     VALUES(2, 0, 0, 0);
     INSERT INTO @DayOfWeek
     VALUES(3, 0, 0, 0);
     INSERT INTO @DayOfWeek
     VALUES(4, 0, 0, 0);
     INSERT INTO @DayOfWeek
     VALUES(5, 0, 0, 0);
     INSERT INTO @DayOfWeek
     VALUES(6, 0, 0, 0);
     INSERT INTO @DayOfWeek
     VALUES(7, 0, 0, 0);

    --Extract and assign various parts of Values from Current Date to Variable

    DECLARE @CurrentDate AS DATE= @StartDate;
    SET @CurrentMonth = DATEPART(MM, @CurrentDate);
    SET @CurrentYear = DATEPART(YY, @CurrentDate);
    SET @CurrentQuarter = DATEPART(QQ, @CurrentDate);

    --Proceed only if Start Date(Current date ) is less than End date you specified above
    WHILE @CurrentDate < @EndDate
         BEGIN
 
             --Begin day of week logic

		  /*Check for Change in Month of the Current date if Month changed then 
		    Change variable value*/

             IF @CurrentMonth != DATEPART(MM, @CurrentDate)
                 BEGIN
                     UPDATE @DayOfWeek
                       SET
                           MonthCount = 0;
                     SET @CurrentMonth = DATEPART(MM, @CurrentDate);
                 END;

		  /* Check for Change in Quarter of the Current date if Quarter changed then change 
		   Variable value*/

             IF @CurrentQuarter != DATEPART(QQ, @CurrentDate)
                 BEGIN
                     UPDATE @DayOfWeek
                       SET
                           QuarterCount = 0;
                     SET @CurrentQuarter = DATEPART(QQ, @CurrentDate);
                 END;
       
		  /* Check for Change in Year of the Current date if Year changed then change 
		   Variable value*/


             IF @CurrentYear != DATEPART(YY, @CurrentDate)
                 BEGIN
                     UPDATE @DayOfWeek
                       SET
                           YearCount = 0;
                     SET @CurrentYear = DATEPART(YY, @CurrentDate);
                 END;
	
             -- Set values in table data type created above from variables 

             UPDATE @DayOfWeek
               SET
                   MonthCount = MonthCount + 1,
                   QuarterCount = QuarterCount + 1,
                   YearCount = YearCount + 1
             WHERE DayOWeek = DATEPART(DW, @CurrentDate);
             SELECT @DayOfWeekInMonth = MonthCount
                  , @DayOfQuarter = QuarterCount
                  , @DayOfWeekInYear = YearCount
             FROM @DayOfWeek
             WHERE DayOWeek = DATEPART(DW, @CurrentDate);
	
             /*End day of week logic*/

             /* Populate Your Dimension Table with values*/

             INSERT INTO DW.DimDate
             --(DateID, ActualDateLabel, ActualDate, CalendarDayOfMonth  )
            SELECT 
			   CONVERT(  CHAR(8), @CurrentDate, 112) AS DateID
                , CONVERT(  CHAR(10), @CurrentDate, 101) AS ActualDateLabel
                , @CurrentDate AS ActualDate
                , DATEPART(DAY, @CurrentDate) AS CalendarDayofmonth
                , DATEPART(DAYOFYEAR, @CurrentDate) AS CalendarDayOfYear
			 , CASE WHEN @currentDate = CONVERT(  DATETIME, CONVERT(DATE, DATEADD(DD, -(DATEPART(DD, (DATEADD(MM, 1, @CurrentDate)))), DATEADD(MM, 1, @CurrentDate))))
				THEN 1
				ELSE 0 END AS CalendarLastDayOfMonthFlag
			 , DATEPART(MONTH, @CurrentDate) AS CalendarMonth
			 , CONVERT(VARCHAR(20), CONVERT(DATE, @CurrentDate) , 107) AS CalendarMonthAbbreviation
			 , DATENAME(MONTH, @currentDate) AS CalendarMonthLabel
			 , DATEPART(QQ, @CurrentDate)  AS CalendarQuarter
			 , 'Q' + CONVERT(CHAR(1), DATEPART(QQ, @CurrentDate)) + '-'
				+ CONVERT(VARCHAR(4), DATEPART(YEAR, @CurrentDate)) AS CalendarQuarterLabel
			 , DATEPART(WEEK, @currentDate) AS CalendarWeek
			 --come back later to add CalendarWeekStartLabel
			 , NULL AS CalendarWeekStartLabel
			 --come back later to add CalendarWeekEndLabel
			 , NULL AS CalendarWeekEndLabel
			 , DATEPART(YEAR, @CurrentDate) AS CalendarYear
			 , CONVERT(VARCHAR(4), DATEPART(YEAR, @CurrentDate)) CalendarYearLabel	
			 -- not sure what to store in DateDescription
			 , NULL AS DateDescription
			 , DATEPART(WEEKDAY, @CurrentDate) AS [DayOfWeek]
			 , CASE DATEPART(WEEKDAY, @CurrentDate)
				WHEN 1 THEN 'Sun'
				WHEN 2 THEN 'Mon'
				WHEN 3 THEN 'Tue'
				WHEN 4 THEN 'Wed'
				WHEN 5 THEN 'Thu'
			 	WHEN 6 THEN 'Fri'
				WHEN 7 THEN 'Sat'
			   END AS DayOfWeekAbbreviation
			 , DATENAME(WEEKDAY, @CurrentDate) AS DayOfWeekLabel
			 --come back to Fiscal stuff later
			 , NULL AS FiscalDayOfWeek            
			 , NULL AS FiscalDayOfMonth           
			 , NULL AS FiscalDayOfYear            
			 , NULL AS FiscalMonth                
			 , NULL AS FiscalMonthAbbreviation    
			 , NULL AS FiscalMonthLabel           
			 , NULL AS FiscalQuarter              
			 , NULL AS FiscalQuarterLabel         
			 , NULL AS FiscalWeek                 
			 , NULL AS FiscalWeekStartLabel       
			 , NULL AS FiscalWeekEndLabel         
			 , NULL AS FiscalYear                 
			 , NULL AS FiscalYearLabel            
			 , NULL AS HolidayFlag                
			 , CASE WHEN DATEPART(WEEKDAY, @CurrentDate) IN (1,7) THEN 1 ELSE 0 END AS WeekendFlag                
			 , -1 AS ExecutionID
			 , GETUTCDATE() AS InsertedDateTime
			 , GETUTCDATE() AS UpdatedDateTime
			 , '' AS HashValue
         
             SET @CurrentDate = DATEADD(DD, 1, @CurrentDate);
         END;

    
	
     /*THANKSGIVING - Fourth THURSDAY in November*/

     UPDATE DW.DimDate
       SET
           HolidayFlag = 1 --'Thanksgiving Day'
     WHERE CalendarMonth = 11
           AND DayOfWeekLabel = 'Thursday'
           --need to calculate this AND DayOfWeekInMonth = 4;
		 AND (DATEPART(WEEK, ActualDate) - DATEPART(WEEK, CONVERT(DATE, '11/1/' + CONVERT(VARCHAR(4), CalendarYear) )) ) + 1 = 4
		 AND ActualDate BETWEEN @StartDate AND @EndDate;

     /*CHRISTMAS*/

     UPDATE DW.DimDate
       SET
           HolidayFlag = 1 --'Christmas Day'
     WHERE CalendarMonth = 12
           AND CalendarDayOfMonth = 25
		 AND ActualDate BETWEEN @StartDate AND @EndDate;

     /*4th of July*/

     UPDATE DW.DimDate
       SET
           HolidayFlag = 1 --'Independance Day'
     WHERE CalendarMonth = 7
           AND CalendarDayOfMonth = 4
		 AND ActualDate BETWEEN @StartDate AND @EndDate;

     /*New Years Day*/

     UPDATE DW.DimDate
       SET
           HolidayFlag = 1 --'New Year''s Day'
     WHERE CalendarMonth = 1
           AND CalendarDayOfMonth = 1
		 AND ActualDate BETWEEN @StartDate AND @EndDate;

     /*Memorial Day - Last Monday in May*/

     UPDATE DW.DimDate
       SET
           HolidayFlag = 1 --'Memorial Day'
     FROM DW.DimDate
     WHERE DateID IN
     (
         SELECT MAX(DateID)
         FROM DW.DimDate
         WHERE CalendarMonthLabel = 'May'
               AND DayOfWeekLabel = 'Monday'
			AND ActualDate BETWEEN @StartDate AND @EndDate
         GROUP BY CalendarYear
                , CalendarMonth
     )AND ActualDate BETWEEN @StartDate AND @EndDate;

     /*Labor Day - First Monday in September*/

     UPDATE DW.DimDate
       SET
           HolidayFlag = 1 --'Labor Day'
     FROM DW.DimDate
     WHERE DateID IN
     (
         SELECT MIN(DateID)
         FROM DW.DimDate
         WHERE CalendarMonthLabel = 'September'
               AND DayOfWeekLabel = 'Monday'
			AND ActualDate BETWEEN @StartDate AND @EndDate
         GROUP BY CalendarYear
                , CalendarMonth
     )AND ActualDate BETWEEN @StartDate AND @EndDate;

     /*Valentine's Day*/

     UPDATE DW.DimDate
       SET
           HolidayFlag = 1 --'Valentine''s Day'
     WHERE CalendarMonth = 2
           AND CalendarDayOfMonth = 14
		 AND ActualDate BETWEEN @StartDate AND @EndDate;

     /*Saint Patrick's Day*/

     UPDATE DW.DimDate
       SET
           HolidayFlag = 1 --'Saint Patrick''s Day'
     WHERE CalendarMonth = 3
           AND CalendarDayOfMonth = 17
		 AND ActualDate BETWEEN @StartDate AND @EndDate;

     /*Martin Luthor King Day - Third Monday in January starting in 1983*/

     UPDATE DW.DimDate
       SET
           HolidayFlag = 1 --'Martin Luthor King Jr Day'
     WHERE CalendarMonth = 1
           AND DayOfWeekLabel = 'Monday'
           AND CalendarYear >= 1983
            AND (DATEPART(WEEK, ActualDate) - DATEPART(WEEK, CONVERT(DATE, '11/1/' + CONVERT(VARCHAR(4), CalendarYear) )) ) + 1 = 3
		 AND ActualDate BETWEEN @StartDate AND @EndDate;

     /*President's Day - Third Monday in February*/

     UPDATE DW.DimDate
       SET
           HolidayFlag = 1 --'President''s Day'
     WHERE CalendarMonth = 2
           AND DayOfWeekLabel = 'Monday'
            AND (DATEPART(WEEK, ActualDate) - DATEPART(WEEK, CONVERT(DATE, '11/1/' + CONVERT(VARCHAR(4), CalendarYear) )) ) + 1 = 3
		 AND ActualDate BETWEEN @StartDate AND @EndDate;

     /*Mother's Day - Second Sunday of May*/

     UPDATE DW.DimDate
       SET
           HolidayFlag = 1 --'Mother''s Day'
     WHERE CalendarMonth = 5
           AND DayOfWeekLabel = 'Sunday'
            AND (DATEPART(WEEK, ActualDate) - DATEPART(WEEK, CONVERT(DATE, '11/1/' + CONVERT(VARCHAR(4), CalendarYear) )) ) + 1 = 2
		 AND ActualDate BETWEEN @StartDate AND @EndDate;

     /*Father's Day - Third Sunday of June*/

     UPDATE DW.DimDate
       SET
           HolidayFlag = 1 --'Father''s Day'
     WHERE CalendarMonth = 6
           AND DayOfWeekLabel = 'Sunday'
            AND (DATEPART(WEEK, ActualDate) - DATEPART(WEEK, CONVERT(DATE, '11/1/' + CONVERT(VARCHAR(4), CalendarYear) )) ) + 1 = 3
		 AND ActualDate BETWEEN @StartDate AND @EndDate;

     /*Halloween 10/31*/

     UPDATE DW.DimDate
       SET
           HolidayFlag = 1 --'Halloween'
     WHERE CalendarMonth = 10
           AND CalendarDayOfMonth = 31
		 AND ActualDate BETWEEN @StartDate AND @EndDate;
     
     RETURN 0;
GO
SET NOCOUNT ON;
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

MERGE INTO ETLProcess AS Target
USING (VALUES
      (1, 'TransactionalTenant', NULL)
    , (2, 'FellowshipOne_Attendance', NULL)
    , (3, 'FellowshipOne_FTV', NULL)
    , (4, 'FellowshipOne_AssimilationSteps', NULL)
    , (5, 'FellowshipOne_SmallGroupStatus', NULL)
	, (6, 'MIP_RevenueAndExpense', NULL)
)
AS Source (ETLProcessID, Name, [Description])
    ON Target.ETLProcessID = Source.ETLProcessID 
WHEN NOT MATCHED BY Target THEN
    INSERT (ETLProcessID, Name, [Description])
    VALUES (ETLProcessID, Name, [Description])
WHEN MATCHED AND Target.Name != Source.Name THEN
UPDATE SET
      Target.Name = Source.Name
    , Target.[Description] = Source.[Description]
;

MERGE INTO ETLAction AS Target
USING (VALUES
      (0, 'Do Nothing', 'An optional flag. Generally you wont load 0s to your transform table.')
    , (1, 'Insert', NULL)
    , (2, 'Update', NULL)
    , (3, 'Delete', NULL)
)
AS Source (ETLActionID, Name, [Description])
    ON Target.ETLActionID = Source.ETLActionID 
WHEN NOT MATCHED BY Target THEN
    INSERT (ETLActionID, Name, [Description])
    VALUES (ETLActionID, Name, [Description])
WHEN MATCHED AND Target.Name != Source.Name THEN
UPDATE SET
      Target.Name = Source.Name
    , Target.[Description] = Source.[Description] 
;
--base connectionstrings
MERGE INTO dbo.ConnectionString AS Target
USING (VALUES
	(1, N'Data Source=devharvestbible.database.windows.net;Persist Security Info=True;Initial Catalog=HarvestBible;packet size=4096', 'Harvest bible connection string.', -1, GETUTCDATE(), GETUTCDATE(), '')
)
AS Source (ConnectionStringID, [Source], Note, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
ON Target.ConnectionStringID = Source.ConnectionStringID
WHEN MATCHED THEN 
UPDATE SET 
      Target.[Source]          = Source.[Source]
    , Target.Note              = Source.Note
    , Target.ExecutionID	      = Source.ExecutionID
    , Target.InsertedDateTime  = Source.InsertedDateTime
    , Target.UpdatedDateTime   = Source.UpdatedDateTime
    , Target.HashValue		 = Source.HashValue
WHEN NOT MATCHED BY TARGET THEN
INSERT (ConnectionStringID, [Source], Note, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
VALUES (ConnectionStringID, [Source], Note, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
;

--define HBC Tenant
INSERT INTO Tenant
( TenantID, TenantName, IsActive, ConnectionStringID, ExecutionID, InsertedDateTime, UpdatedDateTime, Hashvalue)
VALUES(3, 'HBC',1, 1, -1, GETUTCDATE(), GETUTCDATE(), '');

--enable all defined ETLPackages as active for HBC
INSERT INTO TenantEtlProcess
SELECT 3, src.ETLProcessID
FROM ETLProcess src
LEFT JOIN TenantEtlProcess dest
    ON dest.TenantID = 3
    AND src.ETLProcessID = dest.ETLProcessID
WHERE
    dest.ETLProcessID IS NULL;



--base tenants (including HBC
MERGE INTO Tenant AS Target
USING (VALUES
	  (0, 'Global'				, 1, 1, -1, GETUTCDATE(), GETUTCDATE(), '')
	, (1, '52projects Church'	, 1, 1, -1, GETUTCDATE(), GETUTCDATE(), '')
	, (2, 'Integration Church'	, 1, 1, -1, GETUTCDATE(), GETUTCDATE(), '')
	, (3, 'Harvest Bible Chapel'  , 1, 1, -1, GETUTCDATE(), GETUTCDATE(), '')
)
AS Source (TenantID, TenantName, IsActive, ConnectionStringID, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
	ON Target.TenantID = Source.TenantID
WHEN MATCHED THEN
UPDATE SET 
	  target.TenantName = Source.TenantName
	, target.IsActive = Source.IsActive
	, target.ConnectionStringID = Source.ConnectionStringID
	, Target.ExecutionID	   = Source.ExecutionID
	 , Target.InsertedDateTime  = Source.InsertedDateTime
	 , Target.UpdatedDateTime   = Source.UpdatedDateTime
	 , Target.HashValue		   = Source.HashValue
WHEN NOT MATCHED BY TARGET THEN
INSERT (TenantID, TenantName, IsActive, ConnectionStringID, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
VALUES (TenantID, TenantName, IsActive, ConnectionStringID, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
;

--DimActivity depends on DimCampus And DimMinistry, so it's after DimMinistry

--DimAttendanceType
MERGE INTO DW.DimAttendanceType AS Target
USING ( VALUES
      ( -1, 3, 'Unknown'    , ''                   , ''                                  , -1, GETUTCDATE(), GETUTCDATE(), '')
   
) AS Source
(AttendanceTypeID, TenantID, Category, Job, VolStaffSchedule, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
    ON Target.AttendanceTypeID = Source.AttendanceTypeID
    AND Target.TenantID = Source.TenantID
WHEN NOT MATCHED BY Target THEN
    INSERT (AttendanceTypeID, TenantID, Category, Job, VolStaffSchedule, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
    VALUES (AttendanceTypeID, TenantID, Category, Job, VolStaffSchedule, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
WHEN MATCHED THEN
UPDATE SET
        Target.Category         = Source.Category
	 , Target.Job              = Source.Job 
	 , Target.VolStaffSchedule = Source.VolStaffSchedule
	 , Target.ExecutionID	   = Source.ExecutionID
	 , Target.InsertedDateTime  = Source.InsertedDateTime
	 , Target.UpdatedDateTime   = Source.UpdatedDateTime
	 , Target.HashValue		   = Source.HashValue
;

--DimCampus -- hardcoded until we find an authoritative source
MERGE INTO DW.DimCampus AS Target
USING ( VALUES
      (-1, 3, '--', 'Unknown'             , '1/1/1900', 1, -1, GETUTCDATE(), GETUTCDATE(), '')
    , (1 , 3, 'AU', 'Aurora'		       , '1/1/1900', 1, -1, GETUTCDATE(), GETUTCDATE(), '')
    , (2 , 3, 'CC', 'Chicago Cathedral'   , '1/1/1900', 1, -1, GETUTCDATE(), GETUTCDATE(), '')
    , (3 , 3, 'CL', 'Crystal Lake'        , '1/1/1900', 1, -1, GETUTCDATE(), GETUTCDATE(), '')
    , (4 , 3, 'EL', 'Elgin'               , '1/1/1900', 1, -1, GETUTCDATE(), GETUTCDATE(), '')
    , (5 , 3, 'NI', 'Niles'               , '1/1/1900', 1, -1, GETUTCDATE(), GETUTCDATE(), '')
    , (6 , 3, 'NS', 'Deerfield Rd'        , '1/1/1900', 1, -1, GETUTCDATE(), GETUTCDATE(), '')
    , (7 , 3, 'RM', 'Rolling Meadows'     , '1/1/1900', 1, -1, GETUTCDATE(), GETUTCDATE(), '')
    , (8 , 3, 'SP', 'Elgin Campus Spanish', '1/1/1900', 1, -1, GETUTCDATE(), GETUTCDATE(), '')
    , (9 , 3, 'WW', 'Online Church'       , '1/1/1900', 1, -1, GETUTCDATE(), GETUTCDATE(), '')

) AS Source
(CampusID, TenantID, Code, Name, StartDateTime, Active, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
    ON  Target.CampusID = Source.CampusID
    AND Target.TenantID = Source.TenantID
WHEN NOT MATCHED BY Target THEN
    INSERT (CampusID, TenantID, Code, Name, StartDateTime, Active, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
    VALUES (CampusID, TenantID, Code, Name, StartDateTime, Active, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
WHEN MATCHED AND Target.Name != Source.Name OR Target.Code != Source.Code THEN
UPDATE SET
        Target.Code              = Source.Code
	 , Target.Name			   = Source.Name
	 , Target.StartDateTime	   = Source.StartDateTime
	 , Target.Active		   = Source.Active
	 , Target.ExecutionID	   = Source.ExecutionID
	 , Target.InsertedDateTime  = Source.InsertedDateTime
	 , Target.UpdatedDateTime   = Source.UpdatedDateTime
	 , Target.HashValue		   = Source.HashValue
;

--DimDate Load at least the next five years and the previous five years
DECLARE @FiveYearsAgo DATE, @FiveYearsFromNow DATE
SET @FiveYearsAgo = '1/1/' + CONVERT(VARCHAR(4), YEAR(GETUTCDATE()) - 5)
SET @FiveYearsFromNow = '12/31/' + CONVERT(VARCHAR(4), YEAR(GETUTCDATE()) + 5)

EXEC DW.usp_UpsertDimDate @FiveYearsAgo, @FiveYearsFromNow

--DimIndividualStatus

MERGE INTO DW.DimIndividualStatus AS Target
USING ( VALUES
    (-1, 3, 'Unknown','Unknown', -1, -1, GETUTCDATE(), GETUTCDATE(), '')
)AS Source
(IndividualStatusID, TenantID, [Status], SubStatus, CampusID, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
   ON Target.IndividualStatusID = Source.IndividualStatusID
    AND Target.TenantID = Source.TenantID
WHEN NOT MATCHED BY Target THEN
    INSERT (IndividualStatusID, TenantID, [Status], SubStatus, CampusID, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
    VALUES (IndividualStatusID, TenantID, [Status], SubStatus, CampusID, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
WHEN MATCHED THEN
UPDATE SET
        Target.[Status]            = Source.[Status]
      , Target.SubStatus            = Source.SubStatus
	 , Target.CampusID            = Source.CampusID	   
   	 , Target.ExecutionID	   = Source.ExecutionID
	 , Target.InsertedDateTime  = Source.InsertedDateTime
	 , Target.UpdatedDateTime   = Source.UpdatedDateTime
	 , Target.HashValue		   = Source.HashValue
;
--DimLifeEventType
MERGE INTO DW.DimLifeEventType AS Target
USING ( VALUES
        (-1, 3, 'Unknown'                      , -1, GETUTCDATE(), GETUTCDATE(), '')
	 , (1 , 3, 'FTV'                          , -1, GETUTCDATE(), GETUTCDATE(), '')
	 , (2 , 3, 'Step 1: Meet'                 , -1, GETUTCDATE(), GETUTCDATE(), '')
      , (3 , 3, 'Step 2: Connect'              , -1, GETUTCDATE(), GETUTCDATE(), '')
      , (4 , 3, 'Baptized'                     , -1, GETUTCDATE(), GETUTCDATE(), '')  	
	 , (5 , 3, 'Membership Confirmation Sent' , -1, GETUTCDATE(), GETUTCDATE(), '')  	
) AS Source
(LifeEventTypeID, TenantID, Name, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
    ON Target.LifeEventTypeID = Source.LifeEventTypeID
    AND Target.TenantID = Source.TenantID
WHEN NOT MATCHED BY Target THEN
    INSERT (LifeEventTypeID, TenantID, Name, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
    VALUES (LifeEventTypeID, TenantID, Name, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
WHEN MATCHED THEN
UPDATE SET
        Target.Name            = Source.Name
   	 , Target.ExecutionID	   = Source.ExecutionID
	 , Target.InsertedDateTime  = Source.InsertedDateTime
	 , Target.UpdatedDateTime   = Source.UpdatedDateTime
	 , Target.HashValue		   = Source.HashValue
;



--DimMaritalStatus
MERGE INTO DW.DimMaritalStatus AS Target
USING ( VALUES
      (-1, 3, 'Unknown'  , -1, GETUTCDATE(), GETUTCDATE(), '')
    , ( 1, 3, 'Child/Yth', -1, GETUTCDATE(), GETUTCDATE(), '')
    , ( 2, 3, 'Divorced'	, -1, GETUTCDATE(), GETUTCDATE(), '')
    , ( 3, 3, 'Married'	, -1, GETUTCDATE(), GETUTCDATE(), '')
    , ( 4, 3, 'Separated', -1, GETUTCDATE(), GETUTCDATE(), '')
    , ( 5, 3, 'Single'	, -1, GETUTCDATE(), GETUTCDATE(), '')
    , ( 6, 3, 'Widow'	, -1, GETUTCDATE(), GETUTCDATE(), '')
    , ( 7, 3, 'Widower'	, -1, GETUTCDATE(), GETUTCDATE(), '')
) AS Source
(MaritalStatusID, TenantID, Name, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
    ON Target.MaritalStatusID = Source.MaritalStatusID
    AND Target.TenantID = Source.TenantID
WHEN NOT MATCHED BY Target THEN
    INSERT (MaritalStatusID, TenantID, Name, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
    VALUES (MaritalStatusID, TenantID, Name, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
WHEN MATCHED THEN
UPDATE SET
        Target.Name            = Source.Name
   	 , Target.ExecutionID	   = Source.ExecutionID
	 , Target.InsertedDateTime  = Source.InsertedDateTime
	 , Target.UpdatedDateTime   = Source.UpdatedDateTime
	 , Target.HashValue		   = Source.HashValue
;

--DimMinistry
MERGE INTO DW.DimMinistry AS Target
USING ( VALUES
    (-1, 3, 'Undefined', -1, '1/1/1900', NULL, 1, -1, GETUTCDATE(), GETUTCDATE(), '')
) AS Source
    (MinistryID, TenantID, Name, CampusID, StartDateTime, EndDateTime, Active, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
 ON Target.MinistryID = Source.MinistryID
    AND Target.TenantID = Source.TenantID
WHEN NOT MATCHED BY Target THEN
    INSERT (MinistryID, TenantID, Name, CampusID, StartDateTime, EndDateTime, Active, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
    VALUES (MinistryID, TenantID, Name, CampusID, StartDateTime, EndDateTime, Active, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
WHEN MATCHED THEN
UPDATE SET
      Target.Name       = Source.Name
    , Target.CampusID   = Source.CampusID
    , Target.ExecutionID	   = Source.ExecutionID
    , Target.InsertedDateTime  = Source.InsertedDateTime
    , Target.UpdatedDateTime   = Source.UpdatedDateTime
    , Target.HashValue		   = Source.HashValue
;
--handle the 'CS - Worship  & Production' for each campus insert
INSERT INTO DW.DimMinistry
SELECT 
      ROW_NUMBER() OVER (ORDER BY CampusID) + 1 AS MinistryID
    , 3 AS TenantID
    , 'CS - Worship  & Production' AS Name
    , CampusID
    , '1/1/1900' AS StartDateTime
    , NULL AS EndDateTime
    , 1  AS Active
    , -1 AS ExecutionID
    , GETUTCDATE() AS InsertedDateTime
    , GETUTCDATE() AS UpdatedDateTime
    , '' AS HashValue
FROM DW.DimCampus 
;


--DimActivity
MERGE INTO DW.DimActivity AS Target
USING ( VALUES
    (-1, 3, 'Undefined', -1, -1, '1/1/1900', NULL, 1, -1, GETUTCDATE(), GETUTCDATE(), '')
) AS Source
(ActivityID, TenantID, Name, MinistryID, CampusID, StartDateTime, EndDateTime, Active, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
 ON Target.ActivityID = Source.ActivityID
    AND Target.TenantID = Source.TenantID
WHEN NOT MATCHED BY Target THEN
    INSERT (ActivityID, TenantID, Name, MinistryID, CampusID, StartDateTime, EndDateTime, Active, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
    VALUES (ActivityID, TenantID, Name, MinistryID, CampusID, StartDateTime, EndDateTime, Active, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
WHEN MATCHED THEN
UPDATE SET
      Target.Name       = Source.Name
    , Target.MinistryID = Source.MinistryID
    , Target.CampusID   = Source.CampusID
    , Target.ExecutionID	   = Source.ExecutionID
    , Target.InsertedDateTime  = Source.InsertedDateTime
    , Target.UpdatedDateTime   = Source.UpdatedDateTime
    , Target.HashValue		   = Source.HashValue
;

--DimRoster
MERGE INTO DW.DimRoster AS Target
USING ( VALUES
    (-1, 3, 'Undefined', 'Undefined', 'Undefined', '1/1/1900', NULL, 1, -1, GETUTCDATE(), GETUTCDATE(), '')
) AS Source
(RosterID, TenantID, RosterFolder, Roster, BreakoutGroup, StartDateTime, EndDateTime, Active, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
 ON Target.RosterID = Source.RosterID
    AND Target.TenantID = Source.TenantID
WHEN NOT MATCHED BY Target THEN
    INSERT (RosterID, TenantID, RosterFolder, Roster, BreakoutGroup, StartDateTime, EndDateTime, Active, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
    VALUES (RosterID, TenantID, RosterFolder, Roster, BreakoutGroup, StartDateTime, EndDateTime, Active, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
WHEN MATCHED THEN
UPDATE SET
      Target.RosterFolder       = Source.RosterFolder
    , Target.Roster = Source.Roster
    , Target.BreakoutGroup   = Source.BreakoutGroup
    , Target.ExecutionID	   = Source.ExecutionID
    , Target.InsertedDateTime  = Source.InsertedDateTime
    , Target.UpdatedDateTime   = Source.UpdatedDateTime
    , Target.HashValue		   = Source.HashValue
;

--DimEntity
MERGE INTO DW.DimEntity AS Target
USING ( VALUES
    (-1, 3, ''    , 'Undefined'                ,  -1, GETUTCDATE(), GETUTCDATE(), '')
  , (1 , 3, 'HBF' , 'Harvest Bible Fellowship' ,  -1, GETUTCDATE(), GETUTCDATE(), '')
  , (2 , 3, 'HCA' , 'Harvest Christian Academy',  -1, GETUTCDATE(), GETUTCDATE(), '')
  , (3 , 3, 'HBC' , 'Harvest Bible Chapel'     ,  -1, GETUTCDATE(), GETUTCDATE(), '')
  , (4 , 3, 'WITW', 'Walk in the Word'         ,  -1, GETUTCDATE(), GETUTCDATE(), '')
) AS Source
(EntityID, TenantID, Code, Name, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
 ON Target.EntityID = Source.EntityID
    AND Target.TenantID = Source.TenantID
WHEN NOT MATCHED BY Target THEN
    INSERT (EntityID, TenantID, Code, Name, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
    VALUES (EntityID, TenantID, Code, Name, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
WHEN MATCHED THEN
UPDATE SET
      Target.Name = Source.Name
    , Target.Code = Source.Code
    , Target.ExecutionID	   = Source.ExecutionID
    , Target.InsertedDateTime  = Source.InsertedDateTime
    , Target.UpdatedDateTime   = Source.UpdatedDateTime
    , Target.HashValue		   = Source.HashValue
;
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
