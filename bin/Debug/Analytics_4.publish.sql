/*
Deployment script for Analytics

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Analytics"
:setvar DefaultFilePrefix "Analytics"
:setvar DefaultDataPath "e:\SQL\MSSQL12.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "e:\SQL\MSSQL12.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [DW]...';


GO
CREATE SCHEMA [DW]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Extract]...';


GO
CREATE SCHEMA [Extract]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Transform]...';


GO
CREATE SCHEMA [Transform]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [DW].[DimMinistry]...';


GO
CREATE TABLE [DW].[DimMinistry] (
    [MinistryID]       INT            NOT NULL,
    [TenantID]         INT            NOT NULL,
    [Name]             NVARCHAR (255) NOT NULL,
    [CampusID]         INT            NOT NULL,
    [ExecutionID]      VARCHAR (50)   NOT NULL,
    [InsertedDateTime] DATETIME       NULL,
    [UpdatedDateTime]  DATETIME       NULL,
    [Hashvalue]        NVARCHAR (64)  NOT NULL,
    CONSTRAINT [pk_DWDimMinistry__MinistryID_TenantID] PRIMARY KEY CLUSTERED ([MinistryID] ASC, [TenantID] ASC)
);


GO
PRINT N'Creating [DW].[DimDate]...';


GO
CREATE TABLE [DW].[DimDate] (
    [DateID]                          INT           NOT NULL,
    [Actual_Date_Label]               VARCHAR (50)  NULL,
    [Actual_Date]                     DATETIME      NULL,
    [Calendar_Day_Of_Month]           TINYINT       NULL,
    [Calendar_Day_Of_Year]            SMALLINT      NULL,
    [Calendar_Last_Day_Of_Month_Flag] TINYINT       NULL,
    [Calendar_Month]                  TINYINT       NULL,
    [Calendar_Month_Abbreviation]     VARCHAR (12)  NULL,
    [Calendar_Month_Label]            VARCHAR (50)  NULL,
    [Calendar_Quarter]                TINYINT       NULL,
    [Calendar_Quarter_Label]          VARCHAR (50)  NULL,
    [Calendar_Week]                   TINYINT       NULL,
    [Calendar_Week_End_Label]         VARCHAR (50)  NULL,
    [Calendar_Week_Label]             VARCHAR (50)  NULL,
    [Calendar_Week_Start_Label]       VARCHAR (50)  NULL,
    [Calendar_Year]                   SMALLINT      NULL,
    [Calendar_Year_Label]             VARCHAR (50)  NULL,
    [Date_Description]                VARCHAR (50)  NULL,
    [Day_Of_Week]                     TINYINT       NULL,
    [Day_Of_Week_Abbreviation]        VARCHAR (12)  NULL,
    [Day_Of_Week_Label]               VARCHAR (50)  NULL,
    [Days_In_Calendar_Month]          TINYINT       NULL,
    [Days_In_Calendar_Year]           SMALLINT      NULL,
    [Days_In_Fiscal_Month]            SMALLINT      NULL,
    [Days_In_Fiscal_Year]             SMALLINT      NULL,
    [Fiscal_Day_Of_Week]              TINYINT       NULL,
    [Fiscal_Day_Of_Month]             TINYINT       NULL,
    [Fiscal_Day_Of_Year]              SMALLINT      NULL,
    [Fiscal_Half_Year]                TINYINT       NULL,
    [Fiscal_Half_Year_Label]          VARCHAR (50)  NULL,
    [Fiscal_Month]                    TINYINT       NULL,
    [Fiscal_Month_Abbreviation]       VARCHAR (12)  NULL,
    [Fiscal_Month_Label]              VARCHAR (50)  NULL,
    [Fiscal_Quarter]                  TINYINT       NULL,
    [Fiscal_Quarter_Label]            VARCHAR (50)  NULL,
    [Fiscal_Week]                     TINYINT       NULL,
    [Fiscal_Week_End_Label]           VARCHAR (50)  NULL,
    [Fiscal_Week_Label]               VARCHAR (50)  NULL,
    [Fiscal_Week_Start_Label]         VARCHAR (50)  NULL,
    [Fiscal_Year]                     SMALLINT      NULL,
    [Fiscal_Year_Label]               VARCHAR (50)  NULL,
    [Holiday_Flag]                    TINYINT       NULL,
    [Weekday_Or_Weekend_Label]        VARCHAR (12)  NULL,
    [Weekend_Flag]                    TINYINT       NULL,
    [ExecutionID]                     VARCHAR (50)  NULL,
    [InsertedDateTime]                DATETIME      NULL,
    [UpdatedDateTime]                 DATETIME      NULL,
    [Hashvalue]                       NVARCHAR (64) NULL,
    CONSTRAINT [PK_DWDimDate__DateID] PRIMARY KEY CLUSTERED ([DateID] ASC)
);


GO
PRINT N'Creating [DW].[DimCampus]...';


GO
CREATE TABLE [DW].[DimCampus] (
    [CampusID]           INT               NOT NULL,
    [TenantID]           INT               NOT NULL,
    [Code]               NVARCHAR (255)    NOT NULL,
    [Name]               NVARCHAR (255)    NOT NULL,
    [Zipcode]            INT               NULL,
    [Latitude]           FLOAT (53)        NULL,
    [Longitude]          FLOAT (53)        NULL,
    [LocationGeographgy] [sys].[geography] NULL,
    [StartDateTime]      DATETIME          NOT NULL,
    [EndDateTime]        DATETIME          NULL,
    [Active]             BIT               NOT NULL,
    [ExecutionID]        VARCHAR (50)      NOT NULL,
    [InsertedDateTime]   DATETIME          NULL,
    [UpdatedDateTime]    DATETIME          NULL,
    [Hashvalue]          NVARCHAR (64)     NOT NULL,
    CONSTRAINT [pk_DWDimCampus__CampusID_TenantID] PRIMARY KEY CLUSTERED ([CampusID] ASC, [TenantID] ASC)
);


GO
PRINT N'Creating [DW].[DimAttendanceType]...';


GO
CREATE TABLE [DW].[DimAttendanceType] (
    [AttendanceTypeID] INT            NOT NULL,
    [TenantID]         INT            NOT NULL,
    [Category]         NVARCHAR (255) NOT NULL,
    [Job]              NVARCHAR (255) NULL,
    [VolStaffSchedule] NVARCHAR (255) NULL,
    [ExecutionID]      VARCHAR (50)   NOT NULL,
    [InsertedDateTime] DATETIME       NULL,
    [UpdatedDateTime]  DATETIME       NULL,
    [Hashvalue]        NVARCHAR (64)  NOT NULL,
    CONSTRAINT [pk_DWDimAttendanceType__AttendanceTypeID_TenantID] PRIMARY KEY CLUSTERED ([AttendanceTypeID] ASC, [TenantID] ASC)
);


GO
PRINT N'Creating [DW].[DimMaritalStatus]...';


GO
CREATE TABLE [DW].[DimMaritalStatus] (
    [MaritalStatusID]  INT            NOT NULL,
    [TenantID]         INT            NOT NULL,
    [Name]             NVARCHAR (255) NOT NULL,
    [ExecutionID]      VARCHAR (50)   NOT NULL,
    [InsertedDateTime] DATETIME       NULL,
    [UpdatedDateTime]  DATETIME       NULL,
    [Hashvalue]        NVARCHAR (64)  NOT NULL,
    CONSTRAINT [pk_DWDimMaritalStatus__MaritalStatusID_TenantID] PRIMARY KEY CLUSTERED ([MaritalStatusID] ASC, [TenantID] ASC)
);


GO
PRINT N'Creating [Extract].[FellowshipOne_Attendance]...';


GO
CREATE TABLE [Extract].[FellowshipOne_Attendance] (
    [RowNumber]         NVARCHAR (255) NULL,
    [Assigned]          NVARCHAR (255) NULL,
    [ActivityType]      NVARCHAR (255) NULL,
    [Ministry]          NVARCHAR (255) NULL,
    [Activity]          NVARCHAR (255) NULL,
    [RosterFolder]      NVARCHAR (255) NULL,
    [Roster]            NVARCHAR (255) NULL,
    [BreakoutGroup]     NVARCHAR (255) NULL,
    [VolStaffType]      NVARCHAR (255) NULL,
    [VolStaffJob]       NVARCHAR (255) NULL,
    [VolStaffSchedule]  NVARCHAR (255) NULL,
    [IndividualID]      NVARCHAR (255) NULL,
    [Name]              NVARCHAR (255) NULL,
    [FirstName]         NVARCHAR (255) NULL,
    [LastName]          NVARCHAR (255) NULL,
    [DOB]               NVARCHAR (255) NULL,
    [MaritalStatus]     NVARCHAR (255) NULL,
    [Gender]            NVARCHAR (255) NULL,
    [HouseholdPosition] NVARCHAR (255) NULL,
    [Status]            NVARCHAR (255) NULL,
    [SubStatus]         NVARCHAR (255) NULL,
    [School]            NVARCHAR (255) NULL,
    [HouseholdID]       NVARCHAR (255) NULL,
    [HouseholdFullName] NVARCHAR (255) NULL,
    [Address]           NVARCHAR (255) NULL,
    [City]              NVARCHAR (255) NULL,
    [StateProvince]     NVARCHAR (255) NULL,
    [PostalCode]        NVARCHAR (255) NULL,
    [CheckInTagCode]    NVARCHAR (255) NULL,
    [CheckInvPager]     NVARCHAR (255) NULL,
    [CheckInTime]       NVARCHAR (255) NULL,
    [CheckInStation]    NVARCHAR (255) NULL,
    [Instance]          NVARCHAR (255) NULL,
    [TenantID]          INT            NOT NULL,
    [ExecutionID]       VARCHAR (50)   NOT NULL,
    [InsertedDateTime]  DATETIME       NULL
);


GO
PRINT N'Creating [Extract].[FellowshipOne_Attendance].[CIX_ExtractFellowshipOneAttendance__ExecutionID]...';


GO
CREATE CLUSTERED INDEX [CIX_ExtractFellowshipOneAttendance__ExecutionID]
    ON [Extract].[FellowshipOne_Attendance]([ExecutionID] ASC);


GO
PRINT N'Creating [Extract].[FellowshipOne_PersonSubStatus]...';


GO
CREATE TABLE [Extract].[FellowshipOne_PersonSubStatus] (
    [PersonSubStatusID] INT          NOT NULL,
    [TenantID]          INT          NULL,
    [Name]              NVARCHAR (1) NULL,
    [StatusID]          INT          NULL,
    [ExecutionID]       VARCHAR (50) NOT NULL,
    [InsertedDateTime]  DATETIME     NULL
);


GO
PRINT N'Creating [Extract].[FellowshipOne_PersonSubStatus].[CIX_ExtractFellowshipOnePersonSubStatus__PersonSubStatusID_TenantID]...';


GO
CREATE CLUSTERED INDEX [CIX_ExtractFellowshipOnePersonSubStatus__PersonSubStatusID_TenantID]
    ON [Extract].[FellowshipOne_PersonSubStatus]([PersonSubStatusID] ASC, [TenantID] ASC);


GO
PRINT N'Creating [Extract].[TransactionalTenant]...';


GO
CREATE TABLE [Extract].[TransactionalTenant] (
    [TenantID]           INT            NULL,
    [TenantName]         NVARCHAR (255) NULL,
    [ConnectionStringID] INT            NULL,
    [isActive]           INT            NULL,
    [ExecutionID]        VARCHAR (50)   NOT NULL,
    [InsertedDateTime]   DATETIME       NULL
);


GO
PRINT N'Creating [Extract].[TransactionalTenant].[CIX_ExtractTransactionalTenant__TenantID]...';


GO
CREATE NONCLUSTERED INDEX [CIX_ExtractTransactionalTenant__TenantID]
    ON [Extract].[TransactionalTenant]([TenantID] ASC);


GO
PRINT N'Creating [Extract].[TransactionalConnectionString]...';


GO
CREATE TABLE [Extract].[TransactionalConnectionString] (
    [ConnectionStringID] INT             NULL,
    [Source]             NVARCHAR (1000) NULL,
    [Note]               NVARCHAR (1000) NULL,
    [ExecutionID]        VARCHAR (50)    NOT NULL,
    [InsertedDateTime]   DATETIME        NULL
);


GO
PRINT N'Creating [Extract].[TransactionalConnectionString].[CIX_ExtractTransactionalConnectionString__ConnectionStringID]...';


GO
CREATE CLUSTERED INDEX [CIX_ExtractTransactionalConnectionString__ConnectionStringID]
    ON [Extract].[TransactionalConnectionString]([ConnectionStringID] ASC);


GO
PRINT N'Creating [Extract].[FellowshipOne_SubFund]...';


GO
CREATE TABLE [Extract].[FellowshipOne_SubFund] (
    [SubFundID]          INT            NOT NULL,
    [TenantID]           INT            NULL,
    [ParentFundID]       INT            NULL,
    [ParentFundName]     NVARCHAR (255) NULL,
    [SubFundName]        NVARCHAR (255) NULL,
    [GeneralLedger]      NVARCHAR (255) NULL,
    [SubFundCode]        NVARCHAR (255) NULL,
    [IsWebEnabled]       NVARCHAR (255) NULL,
    [IsActive]           BIT            NULL,
    [CreatedDateTime]    DATETIME       NULL,
    [LastUpdateDateTime] DATETIME       NULL,
    [ExecutionID]        VARCHAR (50)   NOT NULL,
    [InsertedDateTime]   DATETIME       NULL
);


GO
PRINT N'Creating [Extract].[FellowshipOne_SubFund].[CIX_ExtractFellowshipOneSubFund__SubFundID_TenantID]...';


GO
CREATE CLUSTERED INDEX [CIX_ExtractFellowshipOneSubFund__SubFundID_TenantID]
    ON [Extract].[FellowshipOne_SubFund]([SubFundID] ASC, [TenantID] ASC);


GO
PRINT N'Creating [Extract].[FellowshipOne_PledgeDrive]...';


GO
CREATE TABLE [Extract].[FellowshipOne_PledgeDrive] (
    [PledgeDriveID]       INT            NULL,
    [TenantID]            INT            NULL,
    [Name]                NVARCHAR (255) NULL,
    [StartDateTime]       DATETIME       NULL,
    [EndDateTime]         DATETIME       NULL,
    [Goal]                FLOAT (53)     NULL,
    [FundID]              INT            NULL,
    [FundName]            NVARCHAR (255) NULL,
    [SubFundID]           INT            NULL,
    [SubFundName]         NVARCHAR (255) NULL,
    [Iswebactive]         BIT            NULL,
    [CreateDateTime]      DATETIME       NULL,
    [LastUpdatedDateTime] DATETIME       NULL,
    [ExecutionID]         VARCHAR (50)   NOT NULL,
    [InsertedDateTime]    DATETIME       NULL
);


GO
PRINT N'Creating [Extract].[FellowshipOne_PledgeDrive].[CIX_ExtractFellowshipOnePledgeDrive__PledgeDriveID_TenantID]...';


GO
CREATE CLUSTERED INDEX [CIX_ExtractFellowshipOnePledgeDrive__PledgeDriveID_TenantID]
    ON [Extract].[FellowshipOne_PledgeDrive]([PledgeDriveID] ASC, [TenantID] ASC);


GO
PRINT N'Creating [Extract].[FellowshipOne_PersonStatus]...';


GO
CREATE TABLE [Extract].[FellowshipOne_PersonStatus] (
    [PersonStatusID]   INT          NOT NULL,
    [TenantID]         INT          NULL,
    [Name]             NVARCHAR (1) NULL,
    [ExecutionID]      VARCHAR (50) NOT NULL,
    [InsertedDateTime] DATETIME     NULL
);


GO
PRINT N'Creating [Extract].[FellowshipOne_PersonStatus].[CIX_ExtractFellowshipOnePersonStatus__PersonStatusID_TenantID]...';


GO
CREATE CLUSTERED INDEX [CIX_ExtractFellowshipOnePersonStatus__PersonStatusID_TenantID]
    ON [Extract].[FellowshipOne_PersonStatus]([PersonStatusID] ASC, [TenantID] ASC);


GO
PRINT N'Creating [Extract].[FellowshipOne_Fund]...';


GO
CREATE TABLE [Extract].[FellowshipOne_Fund] (
    [FundID]             INT            NOT NULL,
    [TenantID]           INT            NULL,
    [Name]               NVARCHAR (255) NULL,
    [FundTypeID]         INT            NULL,
    [FundTypeName]       NVARCHAR (255) NULL,
    [FundCode]           NVARCHAR (255) NULL,
    [IsWebEnabled]       BIT            NULL,
    [AccountReferenceID] NVARCHAR (255) NULL,
    [IsActive]           BIT            NULL,
    [CreatedDateTime]    DATETIME       NULL,
    [LastUpdateDateTime] DATETIME       NULL,
    [ExecutionID]        VARCHAR (50)   NOT NULL,
    [InsertedDateTime]   DATETIME       NULL
);


GO
PRINT N'Creating [Extract].[FellowshipOne_Fund].[CIX_ExtractFellowshipOneFund__FundID_TenantID]...';


GO
CREATE CLUSTERED INDEX [CIX_ExtractFellowshipOneFund__FundID_TenantID]
    ON [Extract].[FellowshipOne_Fund]([FundID] ASC, [TenantID] ASC);


GO
PRINT N'Creating [Extract].[FellowshipOne_ContributionType]...';


GO
CREATE TABLE [Extract].[FellowshipOne_ContributionType] (
    [ContributionTypeID] INT            NOT NULL,
    [TenantID]           INT            NOT NULL,
    [Name]               NVARCHAR (255) NOT NULL,
    [ExecutionID]        VARCHAR (50)   NOT NULL,
    [InsertedDateTime]   DATETIME       NULL
);


GO
PRINT N'Creating [Extract].[FellowshipOne_ContributionType].[CIX_Extractf1ContributionType__ContributionTypeID_TenantID]...';


GO
CREATE CLUSTERED INDEX [CIX_Extractf1ContributionType__ContributionTypeID_TenantID]
    ON [Extract].[FellowshipOne_ContributionType]([ContributionTypeID] ASC, [TenantID] ASC);


GO
PRINT N'Creating [Extract].[FellowshipOne_ContributionSubType]...';


GO
CREATE TABLE [Extract].[FellowshipOne_ContributionSubType] (
    [ContributionSubTypeID] INT            NOT NULL,
    [TenantID]              INT            NOT NULL,
    [Name]                  NVARCHAR (255) NOT NULL,
    [ContributionTypeID]    INT            NULL,
    [ExecutionID]           VARCHAR (50)   NOT NULL,
    [InsertedDateTime]      DATETIME       NULL
);


GO
PRINT N'Creating [Extract].[FellowshipOne_ContributionSubType].[CIX_ExtractFellowshipOneContributionSubType__ContributionSubTypeID_TenantID]...';


GO
CREATE CLUSTERED INDEX [CIX_ExtractFellowshipOneContributionSubType__ContributionSubTypeID_TenantID]
    ON [Extract].[FellowshipOne_ContributionSubType]([ContributionSubTypeID] ASC, [TenantID] ASC);


GO
PRINT N'Creating [Transform].[DimCampus]...';


GO
CREATE TABLE [Transform].[DimCampus] (
    [CampusID]           INT               NOT NULL,
    [TenantID]           INT               NOT NULL,
    [Code]               NVARCHAR (255)    NOT NULL,
    [Name]               NVARCHAR (255)    NOT NULL,
    [Zipcode]            INT               NULL,
    [Latitude]           FLOAT (53)        NULL,
    [Longitude]          FLOAT (53)        NULL,
    [LocationGeographgy] [sys].[geography] NULL,
    [StartDateTime]      DATETIME          NOT NULL,
    [EndDateTime]        DATETIME          NULL,
    [Active]             BIT               NOT NULL,
    [ExecutionID]        VARCHAR (50)      NOT NULL,
    [ETLActionID]        INT               NOT NULL,
    [InsertedDateTime]   DATETIME          NULL,
    [UpdatedDateTime]    DATETIME          NULL,
    [Hashvalue]          NVARCHAR (64)     NOT NULL,
    CONSTRAINT [pk_TransformDimCampus__CampusID] PRIMARY KEY CLUSTERED ([CampusID] ASC, [TenantID] ASC)
);


GO
PRINT N'Creating [Transform].[Tenant]...';


GO
CREATE TABLE [Transform].[Tenant] (
    [TenantID]           INT            NOT NULL,
    [TenantName]         NVARCHAR (255) NOT NULL,
    [IsActive]           INT            NOT NULL,
    [ConnectionStringID] INT            NULL,
    [ExecutionID]        VARCHAR (50)   NOT NULL,
    [ETLActionID]        INT            NOT NULL,
    [InsertedDateTime]   DATETIME       NULL,
    [UpdatedDateTime]    DATETIME       NULL,
    [Hashvalue]          NVARCHAR (64)  NOT NULL,
    CONSTRAINT [PK_TransformTenant__TenantID] PRIMARY KEY CLUSTERED ([TenantID] ASC)
);


GO
PRINT N'Creating [Transform].[DimMinistry]...';


GO
CREATE TABLE [Transform].[DimMinistry] (
    [MinistryID]       INT            NOT NULL,
    [TenantID]         INT            NOT NULL,
    [Name]             NVARCHAR (255) NOT NULL,
    [CampusID]         INT            NOT NULL,
    [ExecutionID]      VARCHAR (50)   NOT NULL,
    [ETLActionID]      INT            NOT NULL,
    [InsertedDateTime] DATETIME       NULL,
    [UpdatedDateTime]  DATETIME       NULL,
    [Hashvalue]        NVARCHAR (64)  NOT NULL,
    CONSTRAINT [pk_TransformDimMinistry__MinistryID_TenantID] PRIMARY KEY CLUSTERED ([MinistryID] ASC, [TenantID] ASC)
);


GO
PRINT N'Creating [Transform].[ConnectionString]...';


GO
CREATE TABLE [Transform].[ConnectionString] (
    [ConnectionStringID] INT             IDENTITY (1, 1) NOT NULL,
    [Source]             NVARCHAR (1000) NOT NULL,
    [Note]               NVARCHAR (1000) NULL,
    [ExecutionID]        VARCHAR (50)    NOT NULL,
    [ETLActionID]        INT             NOT NULL,
    [InsertedDateTime]   DATETIME        NULL,
    [UpdatedDateTime]    DATETIME        NULL,
    [Hashvalue]          NVARCHAR (64)   NOT NULL,
    CONSTRAINT [PK_TransformConnectionString__ConnectionStringID] PRIMARY KEY CLUSTERED ([ConnectionStringID] ASC)
);


GO
PRINT N'Creating [dbo].[ConnectionString]...';


GO
CREATE TABLE [dbo].[ConnectionString] (
    [ConnectionStringID] INT             NOT NULL,
    [Source]             NVARCHAR (1000) NOT NULL,
    [Note]               NVARCHAR (1000) NULL,
    [ExecutionID]        VARCHAR (50)    NOT NULL,
    [InsertedDateTime]   DATETIME        NULL,
    [UpdatedDateTime]    DATETIME        NULL,
    [Hashvalue]          NVARCHAR (64)   NOT NULL,
    CONSTRAINT [PK_ConnectionString__ConnectionStringID] PRIMARY KEY CLUSTERED ([ConnectionStringID] ASC)
);


GO
PRINT N'Creating [dbo].[ETLAction]...';


GO
CREATE TABLE [dbo].[ETLAction] (
    [ETLActionID] INT             NOT NULL,
    [Name]        NVARCHAR (255)  NOT NULL,
    [Description] NVARCHAR (1000) NULL,
    CONSTRAINT [PK_ETLAction__ETLActionID] PRIMARY KEY CLUSTERED ([ETLActionID] ASC)
);


GO
PRINT N'Creating [dbo].[ETLProcess]...';


GO
CREATE TABLE [dbo].[ETLProcess] (
    [ETLProcessID] INT             NOT NULL,
    [Name]         NVARCHAR (255)  NOT NULL,
    [Description]  NVARCHAR (1000) NULL,
    CONSTRAINT [PK_ETLProcess__ETLProcessID] PRIMARY KEY CLUSTERED ([ETLProcessID] ASC)
);


GO
PRINT N'Creating [dbo].[Tenant]...';


GO
CREATE TABLE [dbo].[Tenant] (
    [TenantID]           INT            NOT NULL,
    [TenantName]         NVARCHAR (255) NOT NULL,
    [IsActive]           INT            NOT NULL,
    [ConnectionStringID] INT            NULL,
    [ExecutionID]        VARCHAR (50)   NOT NULL,
    [InsertedDateTime]   DATETIME       NULL,
    [UpdatedDateTime]    DATETIME       NULL,
    [Hashvalue]          NVARCHAR (64)  NOT NULL,
    CONSTRAINT [PK_Tenant__TenantID] PRIMARY KEY CLUSTERED ([TenantID] ASC)
);


GO
PRINT N'Creating [dbo].[TenantETLProcess]...';


GO
CREATE TABLE [dbo].[TenantETLProcess] (
    [TenantID]     INT NOT NULL,
    [ETLProcessID] INT NOT NULL,
    CONSTRAINT [PK_TenantETLPRocess__TenantID_ETLProcessID] PRIMARY KEY CLUSTERED ([TenantID] ASC, [ETLProcessID] ASC)
);


GO
PRINT N'Creating unnamed constraint on [DW].[DimMinistry]...';


GO
ALTER TABLE [DW].[DimMinistry]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimMinistry]...';


GO
ALTER TABLE [DW].[DimMinistry]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimDate]...';


GO
ALTER TABLE [DW].[DimDate]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimDate]...';


GO
ALTER TABLE [DW].[DimDate]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimCampus]...';


GO
ALTER TABLE [DW].[DimCampus]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimCampus]...';


GO
ALTER TABLE [DW].[DimCampus]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimAttendanceType]...';


GO
ALTER TABLE [DW].[DimAttendanceType]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimAttendanceType]...';


GO
ALTER TABLE [DW].[DimAttendanceType]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimMaritalStatus]...';


GO
ALTER TABLE [DW].[DimMaritalStatus]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimMaritalStatus]...';


GO
ALTER TABLE [DW].[DimMaritalStatus]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[FellowshipOne_Attendance]...';


GO
ALTER TABLE [Extract].[FellowshipOne_Attendance]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[FellowshipOne_PersonSubStatus]...';


GO
ALTER TABLE [Extract].[FellowshipOne_PersonSubStatus]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[TransactionalTenant]...';


GO
ALTER TABLE [Extract].[TransactionalTenant]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[TransactionalConnectionString]...';


GO
ALTER TABLE [Extract].[TransactionalConnectionString]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[FellowshipOne_SubFund]...';


GO
ALTER TABLE [Extract].[FellowshipOne_SubFund]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[FellowshipOne_PledgeDrive]...';


GO
ALTER TABLE [Extract].[FellowshipOne_PledgeDrive]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[FellowshipOne_PersonStatus]...';


GO
ALTER TABLE [Extract].[FellowshipOne_PersonStatus]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[FellowshipOne_Fund]...';


GO
ALTER TABLE [Extract].[FellowshipOne_Fund]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[FellowshipOne_ContributionType]...';


GO
ALTER TABLE [Extract].[FellowshipOne_ContributionType]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[FellowshipOne_ContributionSubType]...';


GO
ALTER TABLE [Extract].[FellowshipOne_ContributionSubType]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[DimCampus]...';


GO
ALTER TABLE [Transform].[DimCampus]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[DimCampus]...';


GO
ALTER TABLE [Transform].[DimCampus]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[Tenant]...';


GO
ALTER TABLE [Transform].[Tenant]
    ADD DEFAULT ((0)) FOR [IsActive];


GO
PRINT N'Creating unnamed constraint on [Transform].[Tenant]...';


GO
ALTER TABLE [Transform].[Tenant]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[Tenant]...';


GO
ALTER TABLE [Transform].[Tenant]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[DimMinistry]...';


GO
ALTER TABLE [Transform].[DimMinistry]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[DimMinistry]...';


GO
ALTER TABLE [Transform].[DimMinistry]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[ConnectionString]...';


GO
ALTER TABLE [Transform].[ConnectionString]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[ConnectionString]...';


GO
ALTER TABLE [Transform].[ConnectionString]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [dbo].[ConnectionString]...';


GO
ALTER TABLE [dbo].[ConnectionString]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [dbo].[ConnectionString]...';


GO
ALTER TABLE [dbo].[ConnectionString]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [dbo].[Tenant]...';


GO
ALTER TABLE [dbo].[Tenant]
    ADD DEFAULT ((0)) FOR [IsActive];


GO
PRINT N'Creating unnamed constraint on [dbo].[Tenant]...';


GO
ALTER TABLE [dbo].[Tenant]
    ADD DEFAULT (GETUTCDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [dbo].[Tenant]...';


GO
ALTER TABLE [dbo].[Tenant]
    ADD DEFAULT (GETUTCDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating [DW].[FK_DWDimMinistry_Tenant__TenantID]...';


GO
ALTER TABLE [DW].[DimMinistry]
    ADD CONSTRAINT [FK_DWDimMinistry_Tenant__TenantID] FOREIGN KEY ([TenantID]) REFERENCES [dbo].[Tenant] ([TenantID]);


GO
PRINT N'Creating [DW].[FK_DWDimCampus_Tenant__TenantID]...';


GO
ALTER TABLE [DW].[DimCampus]
    ADD CONSTRAINT [FK_DWDimCampus_Tenant__TenantID] FOREIGN KEY ([TenantID]) REFERENCES [dbo].[Tenant] ([TenantID]);


GO
PRINT N'Creating [DW].[FK_DWDimAttendanceType_Tenant__TenantID]...';


GO
ALTER TABLE [DW].[DimAttendanceType]
    ADD CONSTRAINT [FK_DWDimAttendanceType_Tenant__TenantID] FOREIGN KEY ([TenantID]) REFERENCES [dbo].[Tenant] ([TenantID]);


GO
PRINT N'Creating [DW].[FK_DWDimMaritalStatus_Tenant__TenantID]...';


GO
ALTER TABLE [DW].[DimMaritalStatus]
    ADD CONSTRAINT [FK_DWDimMaritalStatus_Tenant__TenantID] FOREIGN KEY ([TenantID]) REFERENCES [dbo].[Tenant] ([TenantID]);


GO
PRINT N'Creating [Transform].[FK_TransformDimCampus_Tenant__TenantID]...';


GO
ALTER TABLE [Transform].[DimCampus]
    ADD CONSTRAINT [FK_TransformDimCampus_Tenant__TenantID] FOREIGN KEY ([TenantID]) REFERENCES [dbo].[Tenant] ([TenantID]);


GO
PRINT N'Creating [Transform].[FK_TransformTenant_ConnectionString__ConnectionStringID]...';


GO
ALTER TABLE [Transform].[Tenant]
    ADD CONSTRAINT [FK_TransformTenant_ConnectionString__ConnectionStringID] FOREIGN KEY ([ConnectionStringID]) REFERENCES [dbo].[ConnectionString] ([ConnectionStringID]);


GO
PRINT N'Creating [Transform].[FK_TransformTenant_ETLAction__ETLActionID]...';


GO
ALTER TABLE [Transform].[Tenant]
    ADD CONSTRAINT [FK_TransformTenant_ETLAction__ETLActionID] FOREIGN KEY ([ETLActionID]) REFERENCES [dbo].[ETLAction] ([ETLActionID]);


GO
PRINT N'Creating [Transform].[FK_TransformDimMinistry_Tenant__TenantID]...';


GO
ALTER TABLE [Transform].[DimMinistry]
    ADD CONSTRAINT [FK_TransformDimMinistry_Tenant__TenantID] FOREIGN KEY ([TenantID]) REFERENCES [dbo].[Tenant] ([TenantID]);


GO
PRINT N'Creating [Transform].[FK_TransformConnectionString_ETLAction__ETLActionID]...';


GO
ALTER TABLE [Transform].[ConnectionString]
    ADD CONSTRAINT [FK_TransformConnectionString_ETLAction__ETLActionID] FOREIGN KEY ([ETLActionID]) REFERENCES [dbo].[ETLAction] ([ETLActionID]);


GO
PRINT N'Creating [dbo].[FK_Tenant_ConnectionString__ConnectionStringID]...';


GO
ALTER TABLE [dbo].[Tenant]
    ADD CONSTRAINT [FK_Tenant_ConnectionString__ConnectionStringID] FOREIGN KEY ([ConnectionStringID]) REFERENCES [dbo].[ConnectionString] ([ConnectionStringID]);


GO
PRINT N'Creating [dbo].[FK_TenantETLProcess_Tenant__TenantID]...';


GO
ALTER TABLE [dbo].[TenantETLProcess]
    ADD CONSTRAINT [FK_TenantETLProcess_Tenant__TenantID] FOREIGN KEY ([TenantID]) REFERENCES [dbo].[Tenant] ([TenantID]);


GO
PRINT N'Creating [dbo].[FK_TenantETLProcess_ETLProcess__ETLProcessID]...';


GO
ALTER TABLE [dbo].[TenantETLProcess]
    ADD CONSTRAINT [FK_TenantETLProcess_ETLProcess__ETLProcessID] FOREIGN KEY ([ETLProcessID]) REFERENCES [dbo].[ETLProcess] ([ETLProcessID]);


GO
PRINT N'Creating [dbo].[SplitCSV]...';


GO
CREATE FUNCTION [dbo].[SplitCSV]
(
	@param1 int,
	@param2 int
)
RETURNS INT
AS
BEGIN
	RETURN @param1 + @param2
END
GO

/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

MERGE INTO ETLProcess AS Target
USING (VALUES
      (1, 'TransactionalTenant', NULL)
    , (2, 'FellowshipOne_Attendance', NULL)
)
AS Source (ETLProcessID, Name, [Description])
    ON Target.ETLProcessID = Source.ETLProcessID 
WHEN NOT MATCHED BY Target THEN
    INSERT (ETLProcessID, Name, [Description])
    VALUES (ETLProcessID, Name, [Description])
WHEN MATCHED AND Target.Name != Source.Name THEN
UPDATE SET
      Target.Name = Source.Name
    , Target.[Description] = Source.[Description]
;
MERGE INTO ETLAction AS Target
USING (VALUES
      (0, 'Do Nothing', 'An optional flag. Generally you wont load 0s to your transform table.')
    , (1, 'Insert', NULL)
    , (2, 'Update', NULL)
    , (3, 'Delete', NULL)
)
AS Source (ETLActionID, Name, [Description])
    ON Target.ETLActionID = Source.ETLActionID 
WHEN NOT MATCHED BY Target THEN
    INSERT (ETLActionID, Name, [Description])
    VALUES (ETLActionID, Name, [Description])
WHEN MATCHED AND Target.Name != Source.Name THEN
UPDATE SET
      Target.Name = Source.Name
    , Target.[Description] = Source.[Description] 
;

--DimCampus -- hardcoded until we find an authoritative source
MERGE INTO DW.DimCampus
USING ( VALUES
      (-1, 3, ''  , 'Unknown'          , '1/1/1900', 1, -1, GETUTCDATE(), GETUTCDATE(), '')
    , (1 , 3, 'AU', 'Aurora'		    , '1/1/1900', 1, -1, GETUTCDATE(), GETUTCDATE(), '')
    , (2 , 3, 'CC', 'Chicago Cathedral', '1/1/1900', 1, -1, GETUTCDATE(), GETUTCDATE(), '')
    , (3 , 3, 'CL', 'Crystal Lake'     , '1/1/1900', 1, -1, GETUTCDATE(), GETUTCDATE(), '')
    , (4 , 3, 'EL', 'Elgin'            , '1/1/1900', 1, -1, GETUTCDATE(), GETUTCDATE(), '')
    , (5 , 3, 'NI', 'Niles'            , '1/1/1900', 1, -1, GETUTCDATE(), GETUTCDATE(), '')
    , (6 , 3, 'NS', 'Deerfield Rd'     , '1/1/1900', 1, -1, GETUTCDATE(), GETUTCDATE(), '')
    , (7 , 3, 'RM', 'Rolling Meadows'  , '1/1/1900', 1, -1, GETUTCDATE(), GETUTCDATE(), '')
) AS Source
(CampusID, TenantID, Code, Name, StartDateTime, Active, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
    ON  Target.CampusID = Source.CampusID
    AND Target.TenantID = Source.TenantID
WHEN NOT MATCHED BY Target THEN
    INSERT (CampusID, TenantID, Code, Name, StartDateTime, Active, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
    VALUES (CampusID, TenantID, Code, Name, StartDateTime, Active, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
WHEN MATCHED AND Target.Name != Source.Name OR Target.Code != Source.Code THEN
UPDATE SET
        Target.Code              = Source.Code
	 , Target.Name			   = Source.Name
	 , Target.StartDateTime	   = Source.StartDateTime
	 , Target.Active		   = Source.Active
	 , Target.ExecutionID	   = Source.ExecutionID
	 , Target.InsertedDateTime  = Source.InsertedDateTime
	 , Target.UpdatedDateTime   = Source.UpdatedDateTime
	 , Target.HashValue		   = Source.HashValue
;

--DimAttendanceType
MERGE INTO DW.DimAttendanceType
USING ( VALUES
      ( -1, 3, 'Unknown'    , ''                   , ''                                  , -1, GETUTCDATE(), GETUTCDATE(), '')
    , (  1, 3, 'Attendee'   , ''                   , ''                                  , -1, GETUTCDATE(), GETUTCDATE(), '')
    , (  2, 3, 'Paid Worker', ''                   , 'Base Schedule'                     , -1, GETUTCDATE(), GETUTCDATE(), '')
    , (  3, 3, 'Staff'      , ''                   , 'Base Schedule'                     , -1, GETUTCDATE(), GETUTCDATE(), '')
    , (  4, 3, 'Staff'      , 'Small Group Leader' , 'Base Schedule'                     , -1, GETUTCDATE(), GETUTCDATE(), '')
    , (  5, 3, 'Staff'      , 'Volunteer'          , 'Base Schedule'                     , -1, GETUTCDATE(), GETUTCDATE(), '')
    , (  6, 3, 'Staff'      , 'Welcome'            , 'Weekly Schedule'                   , -1, GETUTCDATE(), GETUTCDATE(), '')
    , (  7, 3, 'Volunteer'  , ''                   ,''                                   , -1, GETUTCDATE(), GETUTCDATE(), '')
    , (  8, 3, 'Volunteer'  , ''                   ,'11:00 Am Sunday'				    , -1, GETUTCDATE(), GETUTCDATE(), '')
    , (  9, 3, 'Volunteer'  , ''                   ,'5:00 PM Saturday' 			    , -1, GETUTCDATE(), GETUTCDATE(), '')
    , ( 10, 3, 'Volunteer'  , ''                   ,'9:00 am Sunday' 				    , -1, GETUTCDATE(), GETUTCDATE(), '')
    , ( 11, 3, 'Volunteer'  , ''                   ,'Base Schedule'				    , -1, GETUTCDATE(), GETUTCDATE(), '')
    , ( 12, 3, 'Volunteer'  , ''                   ,'EL - Awana base schedule 2015-2016' , -1, GETUTCDATE(), GETUTCDATE(), '')
    , ( 13, 3, 'Volunteer'  , ''                   ,'Even Months'				    , -1, GETUTCDATE(), GETUTCDATE(), '')
    , ( 14, 3, 'Volunteer'  , ''                   ,'General'					    , -1, GETUTCDATE(), GETUTCDATE(), '')
    , ( 15, 3, 'Volunteer'  , ''                   ,'General Schedule'			    , -1, GETUTCDATE(), GETUTCDATE(), '')
    , ( 16, 3, 'Volunteer'  , ''                   ,'Odd Months'					    , -1, GETUTCDATE(), GETUTCDATE(), '')
    , ( 17, 3, 'Volunteer'  , ''                   ,'Weekly Schedule'				    , -1, GETUTCDATE(), GETUTCDATE(), '')
    , ( 18, 3, 'Volunteer'  , 'Anchor'	          ,'Base Schedule'				    , -1, GETUTCDATE(), GETUTCDATE(), '')
    , ( 19, 3, 'Volunteer'  , 'Leader'	          ,'Base Schedule'				    , -1, GETUTCDATE(), GETUTCDATE(), '')
    , ( 20, 3, 'Volunteer'  , 'Office Help'	     ,'Base Schedule'				    , -1, GETUTCDATE(), GETUTCDATE(), '')
    , ( 21, 3, 'Volunteer'  , 'Small Group Leader'	,'Base Schedule'			    , -1, GETUTCDATE(), GETUTCDATE(), '')
    , ( 22, 3, 'Volunteer'  , 'Spring Break Leader','Base Schedule'				    , -1, GETUTCDATE(), GETUTCDATE(), '')
    , ( 23, 3, 'Volunteer'  , 'Team Lead'	     ,'Base Schedule'				    , -1, GETUTCDATE(), GETUTCDATE(), '')
    , ( 24, 3, 'Volunteer'  , 'Team Lead'	     ,'Even Months'					    , -1, GETUTCDATE(), GETUTCDATE(), '')
    , ( 25, 3, 'Volunteer'  , 'Tech'	          ,'Base Schedule'				    , -1, GETUTCDATE(), GETUTCDATE(), '')
    , ( 26, 3, 'Volunteer'  , 'Tech'	          ,'Weekly Schedule'				    , -1, GETUTCDATE(), GETUTCDATE(), '')
    , ( 27, 3, 'Volunteer'  , 'Volunteer'	     ,'Base Schedule'				    , -1, GETUTCDATE(), GETUTCDATE(), '')
    , ( 28, 3, 'Volunteer'  , 'Volunteer'	     ,'Even Months'					    , -1, GETUTCDATE(), GETUTCDATE(), '')
    , ( 29, 3, 'Volunteer'  , 'Volunteer'	     ,'General'					    , -1, GETUTCDATE(), GETUTCDATE(), '')
    , ( 30, 3, 'Volunteer'  , 'Volunteer'	     ,'Odd Months'					    , -1, GETUTCDATE(), GETUTCDATE(), '')
    , ( 31, 3, 'Volunteer'  , 'Welcome'	          ,'Weekly Schedule'				    , -1, GETUTCDATE(), GETUTCDATE(), '')
    , ( 32, 3, 'Volunteer'  , 'Worship Leader'	,'Base Schedule'				    , -1, GETUTCDATE(), GETUTCDATE(), '')
    , ( 33, 3, 'Volunteer'  , 'Worship Leader'	,'Weekly Schedule'				    , -1, GETUTCDATE(), GETUTCDATE(), '')
) AS Source
(AttendanceTypeID, TenantID, Category, Job, VolStaffSchedule, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
    ON Target.AttendanceTypeID = Source.AttendanceTypeID
    AND Target.TenantID = Source.TenantID
WHEN NOT MATCHED BY Target THEN
    INSERT (AttendanceTypeID, TenantID, Category, Job, VolStaffSchedule, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
    VALUES (AttendanceTypeID, TenantID, Category, Job, VolStaffSchedule, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
WHEN MATCHED THEN
UPDATE SET
        Target.Category         = Source.Category
	 , Target.Job              = Source.Job 
	 , Target.VolStaffSchedule = Source.VolStaffSchedule
	 , Target.ExecutionID	   = Source.ExecutionID
	 , Target.InsertedDateTime  = Source.InsertedDateTime
	 , Target.UpdatedDateTime   = Source.UpdatedDateTime
	 , Target.HashValue		   = Source.HashValue
;

MERGE INTO DW.DimMaritalStatus
USING ( VALUES
      (-1, 3, 'Unknown'  , -1, GETUTCDATE(), GETUTCDATE(), '')
    , ( 1, 3, 'Child/Yth', -1, GETUTCDATE(), GETUTCDATE(), '')
    , ( 2, 3, 'Divorced'	, -1, GETUTCDATE(), GETUTCDATE(), '')
    , ( 3, 3, 'Married'	, -1, GETUTCDATE(), GETUTCDATE(), '')
    , ( 4, 3, 'Separated', -1, GETUTCDATE(), GETUTCDATE(), '')
    , ( 5, 3, 'Single'	, -1, GETUTCDATE(), GETUTCDATE(), '')
    , ( 6, 3, 'Widow'	, -1, GETUTCDATE(), GETUTCDATE(), '')
    , ( 7, 3, 'Widower'	, -1, GETUTCDATE(), GETUTCDATE(), '')
) AS Source
(MaritalStatusID, TenantID, Name, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
    ON Target.MaritalStatusID = Source.MaritalStatusID
    AND Target.TenantID = Source.TenantID
WHEN NOT MATCHED BY Target THEN
    INSERT (MaritalStatusID, TenantID, Name, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
    VALUES (MaritalStatusID, TenantID, Name, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
WHEN MATCHED THEN
UPDATE SET
        Target.Name            = Source.Name
   	 , Target.ExecutionID	   = Source.ExecutionID
	 , Target.InsertedDateTime  = Source.InsertedDateTime
	 , Target.UpdatedDateTime   = Source.UpdatedDateTime
	 , Target.HashValue		   = Source.HashValue
;
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
