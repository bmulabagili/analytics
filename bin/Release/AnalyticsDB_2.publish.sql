/*
Deployment script for Analytics

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Analytics"
:setvar DefaultFilePrefix "Analytics"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL12.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL12.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Dropping [DW].[FactAttendance].[IX_FactAttendance_Age_INC]...';


GO
DROP INDEX [IX_FactAttendance_Age_INC]
    ON [DW].[FactAttendance];


GO
PRINT N'Dropping [DW].[FactAttendance].[IX_FactAttendance_AttendanceTypeID_Age_INC]...';


GO
DROP INDEX [IX_FactAttendance_AttendanceTypeID_Age_INC]
    ON [DW].[FactAttendance];


GO
PRINT N'Dropping [DW].[FactAttendance].[IX_FactAttendance_InstanceDateID_INC]...';


GO
DROP INDEX [IX_FactAttendance_InstanceDateID_INC]
    ON [DW].[FactAttendance];


GO
PRINT N'Dropping [DW].[FactAttendance].[IX_FactAttendance_TenantID_CampusID_MinistryID_ActivityID_AttendanceTypeID_InstanceDateID_INC]...';


GO
DROP INDEX [IX_FactAttendance_TenantID_CampusID_MinistryID_ActivityID_AttendanceTypeID_InstanceDateID_INC]
    ON [DW].[FactAttendance];


GO
PRINT N'Dropping unnamed constraint on [Extract].[Asterix_CallMetrics]...';


GO
ALTER TABLE [Extract].[Asterix_CallMetrics] DROP CONSTRAINT [DF__Asterix_C__Inser__7FB5F314];


GO
PRINT N'Dropping unnamed constraint on [Extract].[FellowshipOne_AssimilationSteps]...';


GO
ALTER TABLE [Extract].[FellowshipOne_AssimilationSteps] DROP CONSTRAINT [DF__Fellowshi__Inser__57DD0BE4];


GO
PRINT N'Dropping unnamed constraint on [Extract].[FellowshipOne_Attendance]...';


GO
ALTER TABLE [Extract].[FellowshipOne_Attendance] DROP CONSTRAINT [DF__Fellowshi__Inser__4D5F7D71];


GO
PRINT N'Dropping unnamed constraint on [Extract].[FellowshipOne_ContributionSubType]...';


GO
ALTER TABLE [Extract].[FellowshipOne_ContributionSubType] DROP CONSTRAINT [DF__Fellowshi__Inser__55F4C372];


GO
PRINT N'Dropping unnamed constraint on [Extract].[FellowshipOne_ContributionType]...';


GO
ALTER TABLE [Extract].[FellowshipOne_ContributionType] DROP CONSTRAINT [DF__Fellowshi__Inser__55009F39];


GO
PRINT N'Dropping unnamed constraint on [Extract].[FellowshipOne_FTV]...';


GO
ALTER TABLE [Extract].[FellowshipOne_FTV] DROP CONSTRAINT [DF__Fellowshi__Inser__58D1301D];


GO
PRINT N'Dropping unnamed constraint on [Extract].[FellowshipOne_Fund]...';


GO
ALTER TABLE [Extract].[FellowshipOne_Fund] DROP CONSTRAINT [DF__Fellowshi__Inser__540C7B00];


GO
PRINT N'Dropping unnamed constraint on [Extract].[FellowshipOne_PersonStatus]...';


GO
ALTER TABLE [Extract].[FellowshipOne_PersonStatus] DROP CONSTRAINT [DF__Fellowshi__Inser__531856C7];


GO
PRINT N'Dropping unnamed constraint on [Extract].[FellowshipOne_PersonSubStatus]...';


GO
ALTER TABLE [Extract].[FellowshipOne_PersonSubStatus] DROP CONSTRAINT [DF__Fellowshi__Inser__4E53A1AA];


GO
PRINT N'Dropping unnamed constraint on [Extract].[FellowshipOne_PledgeDrive]...';


GO
ALTER TABLE [Extract].[FellowshipOne_PledgeDrive] DROP CONSTRAINT [DF__Fellowshi__Inser__5224328E];


GO
PRINT N'Dropping unnamed constraint on [Extract].[FellowshipOne_SmallGroupStatus]...';


GO
ALTER TABLE [Extract].[FellowshipOne_SmallGroupStatus] DROP CONSTRAINT [DF__Fellowshi__Inser__5CA1C101];


GO
PRINT N'Dropping unnamed constraint on [Extract].[FellowshipOne_SubFund]...';


GO
ALTER TABLE [Extract].[FellowshipOne_SubFund] DROP CONSTRAINT [DF__Fellowshi__Inser__51300E55];


GO
PRINT N'Dropping unnamed constraint on [Extract].[GoogleAnalytics]...';


GO
ALTER TABLE [Extract].[GoogleAnalytics] DROP CONSTRAINT [DF__GoogleAna__Inser__5D95E53A];


GO
PRINT N'Dropping unnamed constraint on [Extract].[InfiniteCampus_Enrollment]...';


GO
ALTER TABLE [Extract].[InfiniteCampus_Enrollment] DROP CONSTRAINT [DF__InfiniteC__Inser__5E8A0973];


GO
PRINT N'Dropping unnamed constraint on [Extract].[MailChimp_Stats]...';


GO
ALTER TABLE [Extract].[MailChimp_Stats] DROP CONSTRAINT [DF__MailChimp__Inser__607251E5];


GO
PRINT N'Dropping unnamed constraint on [Extract].[MIP_Budget]...';


GO
ALTER TABLE [Extract].[MIP_Budget] DROP CONSTRAINT [DF__MIP_Budge__Inser__5AB9788F];


GO
PRINT N'Dropping unnamed constraint on [Extract].[MIP_RevenueAndExpense]...';


GO
ALTER TABLE [Extract].[MIP_RevenueAndExpense] DROP CONSTRAINT [DF__MIP_Reven__Inser__5BAD9CC8];


GO
PRINT N'Dropping unnamed constraint on [Extract].[MPX_Activity]...';


GO
ALTER TABLE [Extract].[MPX_Activity] DROP CONSTRAINT [DF__MPX_Activ__Inser__7167D3BD];


GO
PRINT N'Dropping unnamed constraint on [Extract].[Paycor]...';


GO
ALTER TABLE [Extract].[Paycor] DROP CONSTRAINT [DF__Paycor__Inserted__5F7E2DAC];


GO
PRINT N'Dropping unnamed constraint on [Extract].[Transactional_HeadCount]...';


GO
ALTER TABLE [Extract].[Transactional_HeadCount] DROP CONSTRAINT [DF__Transacti__Inser__56E8E7AB];


GO
PRINT N'Dropping unnamed constraint on [Extract].[TransactionalConnectionString]...';


GO
ALTER TABLE [Extract].[TransactionalConnectionString] DROP CONSTRAINT [DF__Transacti__Inser__503BEA1C];


GO
PRINT N'Dropping unnamed constraint on [Extract].[TransactionalManualDataEntry]...';


GO
ALTER TABLE [Extract].[TransactionalManualDataEntry] DROP CONSTRAINT [DF__Transacti__Inser__59C55456];


GO
PRINT N'Dropping unnamed constraint on [Extract].[TransactionalTenant]...';


GO
ALTER TABLE [Extract].[TransactionalTenant] DROP CONSTRAINT [DF__Transacti__Inser__4F47C5E3];


GO
PRINT N'Dropping unnamed constraint on [dbo].[ConnectionString]...';


GO
ALTER TABLE [dbo].[ConnectionString] DROP CONSTRAINT [DF__Connectio__Inser__15DA3E5D];


GO
PRINT N'Dropping unnamed constraint on [dbo].[ConnectionString]...';


GO
ALTER TABLE [dbo].[ConnectionString] DROP CONSTRAINT [DF__Connectio__Updat__16CE6296];


GO
PRINT N'Dropping unnamed constraint on [dbo].[Tenant]...';


GO
ALTER TABLE [dbo].[Tenant] DROP CONSTRAINT [DF__Tenant__UpdatedD__19AACF41];


GO
PRINT N'Dropping unnamed constraint on [dbo].[Tenant]...';


GO
ALTER TABLE [dbo].[Tenant] DROP CONSTRAINT [DF__Tenant__Inserted__18B6AB08];


GO
PRINT N'Dropping unnamed constraint on [DW].[DimActivity]...';


GO
ALTER TABLE [DW].[DimActivity] DROP CONSTRAINT [DF__DimActivi__Inser__25518C17];


GO
PRINT N'Dropping unnamed constraint on [DW].[DimActivity]...';


GO
ALTER TABLE [DW].[DimActivity] DROP CONSTRAINT [DF__DimActivi__Updat__2645B050];


GO
PRINT N'Dropping unnamed constraint on [DW].[DimAttendanceType]...';


GO
ALTER TABLE [DW].[DimAttendanceType] DROP CONSTRAINT [DF__DimAttend__Updat__2A164134];


GO
PRINT N'Dropping unnamed constraint on [DW].[DimAttendanceType]...';


GO
ALTER TABLE [DW].[DimAttendanceType] DROP CONSTRAINT [DF__DimAttend__Inser__29221CFB];


GO
PRINT N'Dropping unnamed constraint on [DW].[DimCampus]...';


GO
ALTER TABLE [DW].[DimCampus] DROP CONSTRAINT [DF__DimCampus__Inser__17F790F9];


GO
PRINT N'Dropping unnamed constraint on [DW].[DimCampus]...';


GO
ALTER TABLE [DW].[DimCampus] DROP CONSTRAINT [DF__DimCampus__Updat__18EBB532];


GO
PRINT N'Dropping unnamed constraint on [DW].[DimDate]...';


GO
ALTER TABLE [DW].[DimDate] DROP CONSTRAINT [DF__DimDate__Updated__23F3538A];


GO
PRINT N'Dropping unnamed constraint on [DW].[DimDate]...';


GO
ALTER TABLE [DW].[DimDate] DROP CONSTRAINT [DF__DimDate__Inserte__22FF2F51];


GO
PRINT N'Dropping unnamed constraint on [DW].[DimEntity]...';


GO
ALTER TABLE [DW].[DimEntity] DROP CONSTRAINT [DF__DimEntity__Inser__3864608B];


GO
PRINT N'Dropping unnamed constraint on [DW].[DimEntity]...';


GO
ALTER TABLE [DW].[DimEntity] DROP CONSTRAINT [DF__DimEntity__Updat__395884C4];


GO
PRINT N'Dropping unnamed constraint on [DW].[DimFinancialCategory]...';


GO
ALTER TABLE [DW].[DimFinancialCategory] DROP CONSTRAINT [DF__DimFinanc__Inser__367C1819];


GO
PRINT N'Dropping unnamed constraint on [DW].[DimFinancialCategory]...';


GO
ALTER TABLE [DW].[DimFinancialCategory] DROP CONSTRAINT [DF__DimFinanc__Updat__37703C52];


GO
PRINT N'Dropping unnamed constraint on [DW].[DimIndividualStatus]...';


GO
ALTER TABLE [DW].[DimIndividualStatus] DROP CONSTRAINT [DF__DimIndivi__Inser__1F98B2C1];


GO
PRINT N'Dropping unnamed constraint on [DW].[DimIndividualStatus]...';


GO
ALTER TABLE [DW].[DimIndividualStatus] DROP CONSTRAINT [DF__DimIndivi__Updat__208CD6FA];


GO
PRINT N'Dropping unnamed constraint on [DW].[DimLifeEventType]...';


GO
ALTER TABLE [DW].[DimLifeEventType] DROP CONSTRAINT [DF__DimLifeEv__Inser__1DB06A4F];


GO
PRINT N'Dropping unnamed constraint on [DW].[DimLifeEventType]...';


GO
ALTER TABLE [DW].[DimLifeEventType] DROP CONSTRAINT [DF__DimLifeEv__Updat__1EA48E88];


GO
PRINT N'Dropping unnamed constraint on [DW].[DimMaritalStatus]...';


GO
ALTER TABLE [DW].[DimMaritalStatus] DROP CONSTRAINT [DF__DimMarita__Inser__2739D489];


GO
PRINT N'Dropping unnamed constraint on [DW].[DimMaritalStatus]...';


GO
ALTER TABLE [DW].[DimMaritalStatus] DROP CONSTRAINT [DF__DimMarita__Updat__282DF8C2];


GO
PRINT N'Dropping unnamed constraint on [DW].[DimMinistry]...';


GO
ALTER TABLE [DW].[DimMinistry] DROP CONSTRAINT [DF__DimMinist__Inser__2B0A656D];


GO
PRINT N'Dropping unnamed constraint on [DW].[DimMinistry]...';


GO
ALTER TABLE [DW].[DimMinistry] DROP CONSTRAINT [DF__DimMinist__Updat__2BFE89A6];


GO
PRINT N'Dropping unnamed constraint on [DW].[DimRoster]...';


GO
ALTER TABLE [DW].[DimRoster] DROP CONSTRAINT [DF__DimRoster__Inser__236943A5];


GO
PRINT N'Dropping unnamed constraint on [DW].[DimRoster]...';


GO
ALTER TABLE [DW].[DimRoster] DROP CONSTRAINT [DF__DimRoster__Updat__245D67DE];


GO
PRINT N'Dropping unnamed constraint on [DW].[DimSmallGroupDetail]...';


GO
ALTER TABLE [DW].[DimSmallGroupDetail] DROP CONSTRAINT [DF__DimSmallG__Inser__3C34F16F];


GO
PRINT N'Dropping unnamed constraint on [DW].[DimSmallGroupDetail]...';


GO
ALTER TABLE [DW].[DimSmallGroupDetail] DROP CONSTRAINT [DF__DimSmallG__Updat__3D2915A8];


GO
PRINT N'Dropping unnamed constraint on [DW].[FactAttendance]...';


GO
ALTER TABLE [DW].[FactAttendance] DROP CONSTRAINT [DF__FactAtten__Inser__2180FB33];


GO
PRINT N'Dropping unnamed constraint on [DW].[FactAttendance]...';


GO
ALTER TABLE [DW].[FactAttendance] DROP CONSTRAINT [DF__FactAtten__Updat__22751F6C];


GO
PRINT N'Dropping unnamed constraint on [DW].[FactBudgetExpense]...';


GO
ALTER TABLE [DW].[FactBudgetExpense] DROP CONSTRAINT [DF__FactBudge__Inser__2EDAF651];


GO
PRINT N'Dropping unnamed constraint on [DW].[FactBudgetExpense]...';


GO
ALTER TABLE [DW].[FactBudgetExpense] DROP CONSTRAINT [DF__FactBudge__Updat__2FCF1A8A];


GO
PRINT N'Dropping unnamed constraint on [DW].[FactBudgetRevenue]...';


GO
ALTER TABLE [DW].[FactBudgetRevenue] DROP CONSTRAINT [DF__FactBudge__Inser__30C33EC3];


GO
PRINT N'Dropping unnamed constraint on [DW].[FactBudgetRevenue]...';


GO
ALTER TABLE [DW].[FactBudgetRevenue] DROP CONSTRAINT [DF__FactBudge__Updat__31B762FC];


GO
PRINT N'Dropping unnamed constraint on [DW].[FactCallMetric]...';


GO
ALTER TABLE [DW].[FactCallMetric] DROP CONSTRAINT [DF__FactCallM__Updat__7EC1CEDB];


GO
PRINT N'Dropping unnamed constraint on [DW].[FactCallMetric]...';


GO
ALTER TABLE [DW].[FactCallMetric] DROP CONSTRAINT [DF__FactCallM__Inser__7DCDAAA2];


GO
PRINT N'Dropping unnamed constraint on [DW].[FactEnrollment]...';


GO
ALTER TABLE [DW].[FactEnrollment] DROP CONSTRAINT [DF__FactEnrol__Inser__40058253];


GO
PRINT N'Dropping unnamed constraint on [DW].[FactEnrollment]...';


GO
ALTER TABLE [DW].[FactEnrollment] DROP CONSTRAINT [DF__FactEnrol__Updat__40F9A68C];


GO
PRINT N'Dropping unnamed constraint on [DW].[FactExpense]...';


GO
ALTER TABLE [DW].[FactExpense] DROP CONSTRAINT [DF__FactExpen__Inser__32AB8735];


GO
PRINT N'Dropping unnamed constraint on [DW].[FactExpense]...';


GO
ALTER TABLE [DW].[FactExpense] DROP CONSTRAINT [DF__FactExpen__Updat__339FAB6E];


GO
PRINT N'Dropping unnamed constraint on [DW].[FactFinancialOther]...';


GO
ALTER TABLE [DW].[FactFinancialOther] DROP CONSTRAINT [DF__FactFinan__Updat__4CF5691D];


GO
PRINT N'Dropping unnamed constraint on [DW].[FactFinancialOther]...';


GO
ALTER TABLE [DW].[FactFinancialOther] DROP CONSTRAINT [DF__FactFinan__Inser__4C0144E4];


GO
PRINT N'Dropping unnamed constraint on [DW].[FactFirstTimeGiver]...';


GO
ALTER TABLE [DW].[FactFirstTimeGiver] DROP CONSTRAINT [DF__FactFirst__Inser__2CF2ADDF];


GO
PRINT N'Dropping unnamed constraint on [DW].[FactFirstTimeGiver]...';


GO
ALTER TABLE [DW].[FactFirstTimeGiver] DROP CONSTRAINT [DF__FactFirst__Updat__2DE6D218];


GO
PRINT N'Dropping unnamed constraint on [DW].[FactHBFMetric]...';


GO
ALTER TABLE [DW].[FactHBFMetric] DROP CONSTRAINT [DF__FactHBFMe__Inser__43D61337];


GO
PRINT N'Dropping unnamed constraint on [DW].[FactHBFMetric]...';


GO
ALTER TABLE [DW].[FactHBFMetric] DROP CONSTRAINT [DF__FactHBFMe__Updat__44CA3770];


GO
PRINT N'Dropping unnamed constraint on [DW].[FactHCAMetric]...';


GO
ALTER TABLE [DW].[FactHCAMetric] DROP CONSTRAINT [DF__FactHCAMe__Inser__2D7CBDC4];


GO
PRINT N'Dropping unnamed constraint on [DW].[FactHCAMetric]...';


GO
ALTER TABLE [DW].[FactHCAMetric] DROP CONSTRAINT [DF__FactHCAMe__Updat__2E70E1FD];


GO
PRINT N'Dropping unnamed constraint on [DW].[FactLifeEvent]...';


GO
ALTER TABLE [DW].[FactLifeEvent] DROP CONSTRAINT [DF__FactLifeE__Inser__1BC821DD];


GO
PRINT N'Dropping unnamed constraint on [DW].[FactLifeEvent]...';


GO
ALTER TABLE [DW].[FactLifeEvent] DROP CONSTRAINT [DF__FactLifeE__Updat__1CBC4616];


GO
PRINT N'Dropping unnamed constraint on [DW].[FactMailchimpActivity]...';


GO
ALTER TABLE [DW].[FactMailchimpActivity] DROP CONSTRAINT [DF__FactMailc__Inser__498EEC8D];


GO
PRINT N'Dropping unnamed constraint on [DW].[FactMailchimpActivity]...';


GO
ALTER TABLE [DW].[FactMailchimpActivity] DROP CONSTRAINT [DF__FactMailc__Updat__4A8310C6];


GO
PRINT N'Dropping unnamed constraint on [DW].[FactMPXActivity]...';


GO
ALTER TABLE [DW].[FactMPXActivity] DROP CONSTRAINT [DF__FactMPXAc__Updat__7073AF84];


GO
PRINT N'Dropping unnamed constraint on [DW].[FactMPXActivity]...';


GO
ALTER TABLE [DW].[FactMPXActivity] DROP CONSTRAINT [DF__FactMPXAc__Inser__6F7F8B4B];


GO
PRINT N'Dropping unnamed constraint on [DW].[FactPaycor]...';


GO
ALTER TABLE [DW].[FactPaycor] DROP CONSTRAINT [DF__FactPayco__Inser__41EDCAC5];


GO
PRINT N'Dropping unnamed constraint on [DW].[FactPaycor]...';


GO
ALTER TABLE [DW].[FactPaycor] DROP CONSTRAINT [DF__FactPayco__Updat__42E1EEFE];


GO
PRINT N'Dropping unnamed constraint on [DW].[FactRevenue]...';


GO
ALTER TABLE [DW].[FactRevenue] DROP CONSTRAINT [DF__FactReven__Inser__3493CFA7];


GO
PRINT N'Dropping unnamed constraint on [DW].[FactRevenue]...';


GO
ALTER TABLE [DW].[FactRevenue] DROP CONSTRAINT [DF__FactReven__Updat__3587F3E0];


GO
PRINT N'Dropping unnamed constraint on [DW].[FactSmallGroup]...';


GO
ALTER TABLE [DW].[FactSmallGroup] DROP CONSTRAINT [DF__FactSmall__Inser__3A4CA8FD];


GO
PRINT N'Dropping unnamed constraint on [DW].[FactSmallGroup]...';


GO
ALTER TABLE [DW].[FactSmallGroup] DROP CONSTRAINT [DF__FactSmall__Updat__3B40CD36];


GO
PRINT N'Dropping unnamed constraint on [DW].[FactSocialContact]...';


GO
ALTER TABLE [DW].[FactSocialContact] DROP CONSTRAINT [DF__FactSocia__Inser__3E1D39E1];


GO
PRINT N'Dropping unnamed constraint on [DW].[FactSocialContact]...';


GO
ALTER TABLE [DW].[FactSocialContact] DROP CONSTRAINT [DF__FactSocia__Updat__3F115E1A];


GO
PRINT N'Dropping unnamed constraint on [DW].[FactStewardshipBudget]...';


GO
ALTER TABLE [DW].[FactStewardshipBudget] DROP CONSTRAINT [DF__FactStewa__Inser__45BE5BA9];


GO
PRINT N'Dropping unnamed constraint on [DW].[FactStewardshipBudget]...';


GO
ALTER TABLE [DW].[FactStewardshipBudget] DROP CONSTRAINT [DF__FactStewa__Updat__46B27FE2];


GO
PRINT N'Dropping unnamed constraint on [DW].[FactStewardshipGiving]...';


GO
ALTER TABLE [DW].[FactStewardshipGiving] DROP CONSTRAINT [DF__FactStewa__Updat__489AC854];


GO
PRINT N'Dropping unnamed constraint on [DW].[FactStewardshipGiving]...';


GO
ALTER TABLE [DW].[FactStewardshipGiving] DROP CONSTRAINT [DF__FactStewa__Inser__47A6A41B];


GO
PRINT N'Dropping unnamed constraint on [DW].[FactWebActivity]...';


GO
ALTER TABLE [DW].[FactWebActivity] DROP CONSTRAINT [DF__FactWebAc__Inser__4B7734FF];


GO
PRINT N'Dropping unnamed constraint on [DW].[FactWebActivity]...';


GO
ALTER TABLE [DW].[FactWebActivity] DROP CONSTRAINT [DF__FactWebAc__Updat__4C6B5938];


GO
PRINT N'Dropping unnamed constraint on [Transform].[ConnectionString]...';


GO
ALTER TABLE [Transform].[ConnectionString] DROP CONSTRAINT [DF__Connectio__Inser__73852659];


GO
PRINT N'Dropping unnamed constraint on [Transform].[ConnectionString]...';


GO
ALTER TABLE [Transform].[ConnectionString] DROP CONSTRAINT [DF__Connectio__Updat__74794A92];


GO
PRINT N'Dropping unnamed constraint on [Transform].[DimActivity]...';


GO
ALTER TABLE [Transform].[DimActivity] DROP CONSTRAINT [DF__DimActivi__Inser__719CDDE7];


GO
PRINT N'Dropping unnamed constraint on [Transform].[DimActivity]...';


GO
ALTER TABLE [Transform].[DimActivity] DROP CONSTRAINT [DF__DimActivi__Updat__72910220];


GO
PRINT N'Dropping unnamed constraint on [Transform].[DimAttendanceType]...';


GO
ALTER TABLE [Transform].[DimAttendanceType] DROP CONSTRAINT [DF__DimAttend__Inser__69FBBC1F];


GO
PRINT N'Dropping unnamed constraint on [Transform].[DimAttendanceType]...';


GO
ALTER TABLE [Transform].[DimAttendanceType] DROP CONSTRAINT [DF__DimAttend__Updat__6AEFE058];


GO
PRINT N'Dropping unnamed constraint on [Transform].[DimCampus]...';


GO
ALTER TABLE [Transform].[DimCampus] DROP CONSTRAINT [DF__DimCampus__Inser__6442E2C9];


GO
PRINT N'Dropping unnamed constraint on [Transform].[DimCampus]...';


GO
ALTER TABLE [Transform].[DimCampus] DROP CONSTRAINT [DF__DimCampus__Updat__65370702];


GO
PRINT N'Dropping unnamed constraint on [Transform].[DimFinancialCategory]...';


GO
ALTER TABLE [Transform].[DimFinancialCategory] DROP CONSTRAINT [DF__DimFinanc__Inser__7EF6D905];


GO
PRINT N'Dropping unnamed constraint on [Transform].[DimFinancialCategory]...';


GO
ALTER TABLE [Transform].[DimFinancialCategory] DROP CONSTRAINT [DF__DimFinanc__Updat__7FEAFD3E];


GO
PRINT N'Dropping unnamed constraint on [Transform].[DimIndividualStatus]...';


GO
ALTER TABLE [Transform].[DimIndividualStatus] DROP CONSTRAINT [DF__DimIndivi__Inser__6BE40491];


GO
PRINT N'Dropping unnamed constraint on [Transform].[DimIndividualStatus]...';


GO
ALTER TABLE [Transform].[DimIndividualStatus] DROP CONSTRAINT [DF__DimIndivi__Updat__6CD828CA];


GO
PRINT N'Dropping unnamed constraint on [Transform].[DimLifeEventType]...';


GO
ALTER TABLE [Transform].[DimLifeEventType] DROP CONSTRAINT [DF__DimLifeEv__Inser__662B2B3B];


GO
PRINT N'Dropping unnamed constraint on [Transform].[DimLifeEventType]...';


GO
ALTER TABLE [Transform].[DimLifeEventType] DROP CONSTRAINT [DF__DimLifeEv__Updat__671F4F74];


GO
PRINT N'Dropping unnamed constraint on [Transform].[DimMinistry]...';


GO
ALTER TABLE [Transform].[DimMinistry] DROP CONSTRAINT [DF__DimMinist__Inser__756D6ECB];


GO
PRINT N'Dropping unnamed constraint on [Transform].[DimMinistry]...';


GO
ALTER TABLE [Transform].[DimMinistry] DROP CONSTRAINT [DF__DimMinist__Updat__76619304];


GO
PRINT N'Dropping unnamed constraint on [Transform].[DimRoster]...';


GO
ALTER TABLE [Transform].[DimRoster] DROP CONSTRAINT [DF__DimRoster__Inser__6FB49575];


GO
PRINT N'Dropping unnamed constraint on [Transform].[DimRoster]...';


GO
ALTER TABLE [Transform].[DimRoster] DROP CONSTRAINT [DF__DimRoster__Updat__70A8B9AE];


GO
PRINT N'Dropping unnamed constraint on [Transform].[DimSmallGroupDetail]...';


GO
ALTER TABLE [Transform].[DimSmallGroupDetail] DROP CONSTRAINT [DF__DimSmallG__Inser__04AFB25B];


GO
PRINT N'Dropping unnamed constraint on [Transform].[DimSmallGroupDetail]...';


GO
ALTER TABLE [Transform].[DimSmallGroupDetail] DROP CONSTRAINT [DF__DimSmallG__Updat__05A3D694];


GO
PRINT N'Dropping unnamed constraint on [Transform].[FactAttendance]...';


GO
ALTER TABLE [Transform].[FactAttendance] DROP CONSTRAINT [DF__FactAtten__Inser__6DCC4D03];


GO
PRINT N'Dropping unnamed constraint on [Transform].[FactAttendance]...';


GO
ALTER TABLE [Transform].[FactAttendance] DROP CONSTRAINT [DF__FactAtten__Updat__6EC0713C];


GO
PRINT N'Dropping unnamed constraint on [Transform].[FactBudgetExpense]...';


GO
ALTER TABLE [Transform].[FactBudgetExpense] DROP CONSTRAINT [DF__FactBudge__Inser__793DFFAF];


GO
PRINT N'Dropping unnamed constraint on [Transform].[FactBudgetExpense]...';


GO
ALTER TABLE [Transform].[FactBudgetExpense] DROP CONSTRAINT [DF__FactBudge__Updat__7A3223E8];


GO
PRINT N'Dropping unnamed constraint on [Transform].[FactBudgetRevenue]...';


GO
ALTER TABLE [Transform].[FactBudgetRevenue] DROP CONSTRAINT [DF__FactBudge__Inser__7B264821];


GO
PRINT N'Dropping unnamed constraint on [Transform].[FactBudgetRevenue]...';


GO
ALTER TABLE [Transform].[FactBudgetRevenue] DROP CONSTRAINT [DF__FactBudge__Updat__7C1A6C5A];


GO
PRINT N'Dropping unnamed constraint on [Transform].[FactCallMetric]...';


GO
ALTER TABLE [Transform].[FactCallMetric] DROP CONSTRAINT [DF__FactCallM__Inser__00AA174D];


GO
PRINT N'Dropping unnamed constraint on [Transform].[FactCallMetric]...';


GO
ALTER TABLE [Transform].[FactCallMetric] DROP CONSTRAINT [DF__FactCallM__Updat__019E3B86];


GO
PRINT N'Dropping unnamed constraint on [Transform].[FactEnrollment]...';


GO
ALTER TABLE [Transform].[FactEnrollment] DROP CONSTRAINT [DF__FactEnrol__Inser__0880433F];


GO
PRINT N'Dropping unnamed constraint on [Transform].[FactEnrollment]...';


GO
ALTER TABLE [Transform].[FactEnrollment] DROP CONSTRAINT [DF__FactEnrol__Updat__09746778];


GO
PRINT N'Dropping unnamed constraint on [Transform].[FactExpense]...';


GO
ALTER TABLE [Transform].[FactExpense] DROP CONSTRAINT [DF__FactExpen__Inser__7D0E9093];


GO
PRINT N'Dropping unnamed constraint on [Transform].[FactExpense]...';


GO
ALTER TABLE [Transform].[FactExpense] DROP CONSTRAINT [DF__FactExpen__Updat__7E02B4CC];


GO
PRINT N'Dropping unnamed constraint on [Transform].[FactFinancialOther]...';


GO
ALTER TABLE [Transform].[FactFinancialOther] DROP CONSTRAINT [DF__FactFinan__Updat__4830B400];


GO
PRINT N'Dropping unnamed constraint on [Transform].[FactFinancialOther]...';


GO
ALTER TABLE [Transform].[FactFinancialOther] DROP CONSTRAINT [DF__FactFinan__Inser__473C8FC7];


GO
PRINT N'Dropping unnamed constraint on [Transform].[FactFirstTimeGiver]...';


GO
ALTER TABLE [Transform].[FactFirstTimeGiver] DROP CONSTRAINT [DF__FactFirst__Inser__7755B73D];


GO
PRINT N'Dropping unnamed constraint on [Transform].[FactFirstTimeGiver]...';


GO
ALTER TABLE [Transform].[FactFirstTimeGiver] DROP CONSTRAINT [DF__FactFirst__Updat__7849DB76];


GO
PRINT N'Dropping unnamed constraint on [Transform].[FactHBFMetric]...';


GO
ALTER TABLE [Transform].[FactHBFMetric] DROP CONSTRAINT [DF__FactHBFMe__Inser__0C50D423];


GO
PRINT N'Dropping unnamed constraint on [Transform].[FactHBFMetric]...';


GO
ALTER TABLE [Transform].[FactHBFMetric] DROP CONSTRAINT [DF__FactHBFMe__Updat__0D44F85C];


GO
PRINT N'Dropping unnamed constraint on [Transform].[FactHCAMetric]...';


GO
ALTER TABLE [Transform].[FactHCAMetric] DROP CONSTRAINT [DF__FactHCAMe__Updat__29AC2CE0];


GO
PRINT N'Dropping unnamed constraint on [Transform].[FactHCAMetric]...';


GO
ALTER TABLE [Transform].[FactHCAMetric] DROP CONSTRAINT [DF__FactHCAMe__Inser__28B808A7];


GO
PRINT N'Dropping unnamed constraint on [Transform].[FactLifeEvent]...';


GO
ALTER TABLE [Transform].[FactLifeEvent] DROP CONSTRAINT [DF__FactLifeE__Inser__681373AD];


GO
PRINT N'Dropping unnamed constraint on [Transform].[FactLifeEvent]...';


GO
ALTER TABLE [Transform].[FactLifeEvent] DROP CONSTRAINT [DF__FactLifeE__Updat__690797E6];


GO
PRINT N'Dropping unnamed constraint on [Transform].[FactMailchimpActivity]...';


GO
ALTER TABLE [Transform].[FactMailchimpActivity] DROP CONSTRAINT [DF__FactMailc__Inser__1209AD79];


GO
PRINT N'Dropping unnamed constraint on [Transform].[FactMailchimpActivity]...';


GO
ALTER TABLE [Transform].[FactMailchimpActivity] DROP CONSTRAINT [DF__FactMailc__Updat__12FDD1B2];


GO
PRINT N'Dropping unnamed constraint on [Transform].[FactMPXActivity]...';


GO
ALTER TABLE [Transform].[FactMPXActivity] DROP CONSTRAINT [DF__FactMPXAc__Updat__73501C2F];


GO
PRINT N'Dropping unnamed constraint on [Transform].[FactMPXActivity]...';


GO
ALTER TABLE [Transform].[FactMPXActivity] DROP CONSTRAINT [DF__FactMPXAc__Inser__725BF7F6];


GO
PRINT N'Dropping unnamed constraint on [Transform].[FactPaycor]...';


GO
ALTER TABLE [Transform].[FactPaycor] DROP CONSTRAINT [DF__FactPayco__Inser__0A688BB1];


GO
PRINT N'Dropping unnamed constraint on [Transform].[FactPaycor]...';


GO
ALTER TABLE [Transform].[FactPaycor] DROP CONSTRAINT [DF__FactPayco__Updat__0B5CAFEA];


GO
PRINT N'Dropping unnamed constraint on [Transform].[FactRevenue]...';


GO
ALTER TABLE [Transform].[FactRevenue] DROP CONSTRAINT [DF__FactReven__Inser__00DF2177];


GO
PRINT N'Dropping unnamed constraint on [Transform].[FactRevenue]...';


GO
ALTER TABLE [Transform].[FactRevenue] DROP CONSTRAINT [DF__FactReven__Updat__01D345B0];


GO
PRINT N'Dropping unnamed constraint on [Transform].[FactSmallGroup]...';


GO
ALTER TABLE [Transform].[FactSmallGroup] DROP CONSTRAINT [DF__FactSmall__Inser__02C769E9];


GO
PRINT N'Dropping unnamed constraint on [Transform].[FactSmallGroup]...';


GO
ALTER TABLE [Transform].[FactSmallGroup] DROP CONSTRAINT [DF__FactSmall__Updat__03BB8E22];


GO
PRINT N'Dropping unnamed constraint on [Transform].[FactSocialContact]...';


GO
ALTER TABLE [Transform].[FactSocialContact] DROP CONSTRAINT [DF__FactSocia__Inser__0697FACD];


GO
PRINT N'Dropping unnamed constraint on [Transform].[FactSocialContact]...';


GO
ALTER TABLE [Transform].[FactSocialContact] DROP CONSTRAINT [DF__FactSocia__Updat__078C1F06];


GO
PRINT N'Dropping unnamed constraint on [Transform].[FactStewardshipBudget]...';


GO
ALTER TABLE [Transform].[FactStewardshipBudget] DROP CONSTRAINT [DF__FactStewa__Inser__0E391C95];


GO
PRINT N'Dropping unnamed constraint on [Transform].[FactStewardshipBudget]...';


GO
ALTER TABLE [Transform].[FactStewardshipBudget] DROP CONSTRAINT [DF__FactStewa__Updat__0F2D40CE];


GO
PRINT N'Dropping unnamed constraint on [Transform].[FactStewardshipGiving]...';


GO
ALTER TABLE [Transform].[FactStewardshipGiving] DROP CONSTRAINT [DF__FactStewa__Inser__10216507];


GO
PRINT N'Dropping unnamed constraint on [Transform].[FactStewardshipGiving]...';


GO
ALTER TABLE [Transform].[FactStewardshipGiving] DROP CONSTRAINT [DF__FactStewa__Updat__11158940];


GO
PRINT N'Dropping unnamed constraint on [Transform].[FactWebActivity]...';


GO
ALTER TABLE [Transform].[FactWebActivity] DROP CONSTRAINT [DF__FactWebAc__Inser__13F1F5EB];


GO
PRINT N'Dropping unnamed constraint on [Transform].[FactWebActivity]...';


GO
ALTER TABLE [Transform].[FactWebActivity] DROP CONSTRAINT [DF__FactWebAc__Updat__14E61A24];


GO
PRINT N'Dropping unnamed constraint on [Transform].[Tenant]...';


GO
ALTER TABLE [Transform].[Tenant] DROP CONSTRAINT [DF__Tenant__Inserted__625A9A57];


GO
PRINT N'Dropping unnamed constraint on [Transform].[Tenant]...';


GO
ALTER TABLE [Transform].[Tenant] DROP CONSTRAINT [DF__Tenant__UpdatedD__634EBE90];


GO
/*
The column [dbo].[CampusXLTReportGroup_CampusTabMap].[CampusReportGroupID] is being dropped, data loss could occur.
*/
GO
PRINT N'Starting rebuilding table [dbo].[CampusXLTReportGroup_CampusTabMap]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_CampusXLTReportGroup_CampusTabMap] (
    [FinancialCategoryID]    INT NULL,
    [CampusXLTReportGroupID] INT NULL
);

CREATE CLUSTERED INDEX [tmp_ms_xx_index_CampusXLTReportGroupCampusTabMap__FinancialCategoryID_CampusXLTReportGroupID]
    ON [dbo].[tmp_ms_xx_CampusXLTReportGroup_CampusTabMap]([FinancialCategoryID] ASC, [CampusXLTReportGroupID] ASC);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[CampusXLTReportGroup_CampusTabMap])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_CampusXLTReportGroup_CampusTabMap] ([FinancialCategoryID])
        SELECT   [FinancialCategoryID]
        FROM     [dbo].[CampusXLTReportGroup_CampusTabMap]
        ORDER BY [FinancialCategoryID] ASC;
    END

DROP TABLE [dbo].[CampusXLTReportGroup_CampusTabMap];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_CampusXLTReportGroup_CampusTabMap]', N'CampusXLTReportGroup_CampusTabMap';

EXECUTE sp_rename N'[dbo].[CampusXLTReportGroup_CampusTabMap].[tmp_ms_xx_index_CampusXLTReportGroupCampusTabMap__FinancialCategoryID_CampusXLTReportGroupID]', N'CampusXLTReportGroupCampusTabMap__FinancialCategoryID_CampusXLTReportGroupID', N'INDEX';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating unnamed constraint on [Extract].[Asterix_CallMetrics]...';


GO
ALTER TABLE [Extract].[Asterix_CallMetrics]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[FellowshipOne_AssimilationSteps]...';


GO
ALTER TABLE [Extract].[FellowshipOne_AssimilationSteps]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[FellowshipOne_Attendance]...';


GO
ALTER TABLE [Extract].[FellowshipOne_Attendance]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[FellowshipOne_ContributionSubType]...';


GO
ALTER TABLE [Extract].[FellowshipOne_ContributionSubType]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[FellowshipOne_ContributionType]...';


GO
ALTER TABLE [Extract].[FellowshipOne_ContributionType]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[FellowshipOne_FTV]...';


GO
ALTER TABLE [Extract].[FellowshipOne_FTV]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[FellowshipOne_Fund]...';


GO
ALTER TABLE [Extract].[FellowshipOne_Fund]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[FellowshipOne_PersonStatus]...';


GO
ALTER TABLE [Extract].[FellowshipOne_PersonStatus]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[FellowshipOne_PersonSubStatus]...';


GO
ALTER TABLE [Extract].[FellowshipOne_PersonSubStatus]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[FellowshipOne_PledgeDrive]...';


GO
ALTER TABLE [Extract].[FellowshipOne_PledgeDrive]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[FellowshipOne_SmallGroupStatus]...';


GO
ALTER TABLE [Extract].[FellowshipOne_SmallGroupStatus]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[FellowshipOne_SubFund]...';


GO
ALTER TABLE [Extract].[FellowshipOne_SubFund]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[GoogleAnalytics]...';


GO
ALTER TABLE [Extract].[GoogleAnalytics]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[InfiniteCampus_Enrollment]...';


GO
ALTER TABLE [Extract].[InfiniteCampus_Enrollment]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[MailChimp_Stats]...';


GO
ALTER TABLE [Extract].[MailChimp_Stats]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[MIP_Budget]...';


GO
ALTER TABLE [Extract].[MIP_Budget]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[MIP_RevenueAndExpense]...';


GO
ALTER TABLE [Extract].[MIP_RevenueAndExpense]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[MPX_Activity]...';


GO
ALTER TABLE [Extract].[MPX_Activity]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[Paycor]...';


GO
ALTER TABLE [Extract].[Paycor]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[Transactional_HeadCount]...';


GO
ALTER TABLE [Extract].[Transactional_HeadCount]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[TransactionalConnectionString]...';


GO
ALTER TABLE [Extract].[TransactionalConnectionString]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[TransactionalManualDataEntry]...';


GO
ALTER TABLE [Extract].[TransactionalManualDataEntry]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Extract].[TransactionalTenant]...';


GO
ALTER TABLE [Extract].[TransactionalTenant]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [dbo].[ConnectionString]...';


GO
ALTER TABLE [dbo].[ConnectionString]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [dbo].[ConnectionString]...';


GO
ALTER TABLE [dbo].[ConnectionString]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [dbo].[Tenant]...';


GO
ALTER TABLE [dbo].[Tenant]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [dbo].[Tenant]...';


GO
ALTER TABLE [dbo].[Tenant]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimActivity]...';


GO
ALTER TABLE [DW].[DimActivity]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimActivity]...';


GO
ALTER TABLE [DW].[DimActivity]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimAttendanceType]...';


GO
ALTER TABLE [DW].[DimAttendanceType]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimAttendanceType]...';


GO
ALTER TABLE [DW].[DimAttendanceType]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimCampus]...';


GO
ALTER TABLE [DW].[DimCampus]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimCampus]...';


GO
ALTER TABLE [DW].[DimCampus]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimDate]...';


GO
ALTER TABLE [DW].[DimDate]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimDate]...';


GO
ALTER TABLE [DW].[DimDate]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimEntity]...';


GO
ALTER TABLE [DW].[DimEntity]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimEntity]...';


GO
ALTER TABLE [DW].[DimEntity]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimFinancialCategory]...';


GO
ALTER TABLE [DW].[DimFinancialCategory]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimFinancialCategory]...';


GO
ALTER TABLE [DW].[DimFinancialCategory]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimIndividualStatus]...';


GO
ALTER TABLE [DW].[DimIndividualStatus]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimIndividualStatus]...';


GO
ALTER TABLE [DW].[DimIndividualStatus]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimLifeEventType]...';


GO
ALTER TABLE [DW].[DimLifeEventType]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimLifeEventType]...';


GO
ALTER TABLE [DW].[DimLifeEventType]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimMaritalStatus]...';


GO
ALTER TABLE [DW].[DimMaritalStatus]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimMaritalStatus]...';


GO
ALTER TABLE [DW].[DimMaritalStatus]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimMinistry]...';


GO
ALTER TABLE [DW].[DimMinistry]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimMinistry]...';


GO
ALTER TABLE [DW].[DimMinistry]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimRoster]...';


GO
ALTER TABLE [DW].[DimRoster]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimRoster]...';


GO
ALTER TABLE [DW].[DimRoster]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimSmallGroupDetail]...';


GO
ALTER TABLE [DW].[DimSmallGroupDetail]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[DimSmallGroupDetail]...';


GO
ALTER TABLE [DW].[DimSmallGroupDetail]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactAttendance]...';


GO
ALTER TABLE [DW].[FactAttendance]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactAttendance]...';


GO
ALTER TABLE [DW].[FactAttendance]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactBudgetExpense]...';


GO
ALTER TABLE [DW].[FactBudgetExpense]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactBudgetExpense]...';


GO
ALTER TABLE [DW].[FactBudgetExpense]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactBudgetRevenue]...';


GO
ALTER TABLE [DW].[FactBudgetRevenue]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactBudgetRevenue]...';


GO
ALTER TABLE [DW].[FactBudgetRevenue]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactCallMetric]...';


GO
ALTER TABLE [DW].[FactCallMetric]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactCallMetric]...';


GO
ALTER TABLE [DW].[FactCallMetric]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactEnrollment]...';


GO
ALTER TABLE [DW].[FactEnrollment]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactEnrollment]...';


GO
ALTER TABLE [DW].[FactEnrollment]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactExpense]...';


GO
ALTER TABLE [DW].[FactExpense]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactExpense]...';


GO
ALTER TABLE [DW].[FactExpense]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactFinancialOther]...';


GO
ALTER TABLE [DW].[FactFinancialOther]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactFinancialOther]...';


GO
ALTER TABLE [DW].[FactFinancialOther]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactFirstTimeGiver]...';


GO
ALTER TABLE [DW].[FactFirstTimeGiver]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactFirstTimeGiver]...';


GO
ALTER TABLE [DW].[FactFirstTimeGiver]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactHBFMetric]...';


GO
ALTER TABLE [DW].[FactHBFMetric]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactHBFMetric]...';


GO
ALTER TABLE [DW].[FactHBFMetric]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactHCAMetric]...';


GO
ALTER TABLE [DW].[FactHCAMetric]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactHCAMetric]...';


GO
ALTER TABLE [DW].[FactHCAMetric]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactLifeEvent]...';


GO
ALTER TABLE [DW].[FactLifeEvent]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactLifeEvent]...';


GO
ALTER TABLE [DW].[FactLifeEvent]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactMailchimpActivity]...';


GO
ALTER TABLE [DW].[FactMailchimpActivity]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactMailchimpActivity]...';


GO
ALTER TABLE [DW].[FactMailchimpActivity]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactMPXActivity]...';


GO
ALTER TABLE [DW].[FactMPXActivity]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactMPXActivity]...';


GO
ALTER TABLE [DW].[FactMPXActivity]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactPaycor]...';


GO
ALTER TABLE [DW].[FactPaycor]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactPaycor]...';


GO
ALTER TABLE [DW].[FactPaycor]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactRevenue]...';


GO
ALTER TABLE [DW].[FactRevenue]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactRevenue]...';


GO
ALTER TABLE [DW].[FactRevenue]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactSmallGroup]...';


GO
ALTER TABLE [DW].[FactSmallGroup]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactSmallGroup]...';


GO
ALTER TABLE [DW].[FactSmallGroup]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactSocialContact]...';


GO
ALTER TABLE [DW].[FactSocialContact]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactSocialContact]...';


GO
ALTER TABLE [DW].[FactSocialContact]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactStewardshipBudget]...';


GO
ALTER TABLE [DW].[FactStewardshipBudget]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactStewardshipBudget]...';


GO
ALTER TABLE [DW].[FactStewardshipBudget]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactStewardshipGiving]...';


GO
ALTER TABLE [DW].[FactStewardshipGiving]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactStewardshipGiving]...';


GO
ALTER TABLE [DW].[FactStewardshipGiving]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactWebActivity]...';


GO
ALTER TABLE [DW].[FactWebActivity]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [DW].[FactWebActivity]...';


GO
ALTER TABLE [DW].[FactWebActivity]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[ConnectionString]...';


GO
ALTER TABLE [Transform].[ConnectionString]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[ConnectionString]...';


GO
ALTER TABLE [Transform].[ConnectionString]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[DimActivity]...';


GO
ALTER TABLE [Transform].[DimActivity]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[DimActivity]...';


GO
ALTER TABLE [Transform].[DimActivity]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[DimAttendanceType]...';


GO
ALTER TABLE [Transform].[DimAttendanceType]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[DimAttendanceType]...';


GO
ALTER TABLE [Transform].[DimAttendanceType]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[DimCampus]...';


GO
ALTER TABLE [Transform].[DimCampus]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[DimCampus]...';


GO
ALTER TABLE [Transform].[DimCampus]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[DimFinancialCategory]...';


GO
ALTER TABLE [Transform].[DimFinancialCategory]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[DimFinancialCategory]...';


GO
ALTER TABLE [Transform].[DimFinancialCategory]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[DimIndividualStatus]...';


GO
ALTER TABLE [Transform].[DimIndividualStatus]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[DimIndividualStatus]...';


GO
ALTER TABLE [Transform].[DimIndividualStatus]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[DimLifeEventType]...';


GO
ALTER TABLE [Transform].[DimLifeEventType]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[DimLifeEventType]...';


GO
ALTER TABLE [Transform].[DimLifeEventType]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[DimMinistry]...';


GO
ALTER TABLE [Transform].[DimMinistry]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[DimMinistry]...';


GO
ALTER TABLE [Transform].[DimMinistry]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[DimRoster]...';


GO
ALTER TABLE [Transform].[DimRoster]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[DimRoster]...';


GO
ALTER TABLE [Transform].[DimRoster]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[DimSmallGroupDetail]...';


GO
ALTER TABLE [Transform].[DimSmallGroupDetail]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[DimSmallGroupDetail]...';


GO
ALTER TABLE [Transform].[DimSmallGroupDetail]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactAttendance]...';


GO
ALTER TABLE [Transform].[FactAttendance]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactAttendance]...';


GO
ALTER TABLE [Transform].[FactAttendance]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactBudgetExpense]...';


GO
ALTER TABLE [Transform].[FactBudgetExpense]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactBudgetExpense]...';


GO
ALTER TABLE [Transform].[FactBudgetExpense]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactBudgetRevenue]...';


GO
ALTER TABLE [Transform].[FactBudgetRevenue]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactBudgetRevenue]...';


GO
ALTER TABLE [Transform].[FactBudgetRevenue]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactCallMetric]...';


GO
ALTER TABLE [Transform].[FactCallMetric]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactCallMetric]...';


GO
ALTER TABLE [Transform].[FactCallMetric]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactEnrollment]...';


GO
ALTER TABLE [Transform].[FactEnrollment]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactEnrollment]...';


GO
ALTER TABLE [Transform].[FactEnrollment]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactExpense]...';


GO
ALTER TABLE [Transform].[FactExpense]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactExpense]...';


GO
ALTER TABLE [Transform].[FactExpense]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactFinancialOther]...';


GO
ALTER TABLE [Transform].[FactFinancialOther]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactFinancialOther]...';


GO
ALTER TABLE [Transform].[FactFinancialOther]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactFirstTimeGiver]...';


GO
ALTER TABLE [Transform].[FactFirstTimeGiver]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactFirstTimeGiver]...';


GO
ALTER TABLE [Transform].[FactFirstTimeGiver]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactHBFMetric]...';


GO
ALTER TABLE [Transform].[FactHBFMetric]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactHBFMetric]...';


GO
ALTER TABLE [Transform].[FactHBFMetric]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactHCAMetric]...';


GO
ALTER TABLE [Transform].[FactHCAMetric]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactHCAMetric]...';


GO
ALTER TABLE [Transform].[FactHCAMetric]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactLifeEvent]...';


GO
ALTER TABLE [Transform].[FactLifeEvent]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactLifeEvent]...';


GO
ALTER TABLE [Transform].[FactLifeEvent]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactMailchimpActivity]...';


GO
ALTER TABLE [Transform].[FactMailchimpActivity]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactMailchimpActivity]...';


GO
ALTER TABLE [Transform].[FactMailchimpActivity]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactMPXActivity]...';


GO
ALTER TABLE [Transform].[FactMPXActivity]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactMPXActivity]...';


GO
ALTER TABLE [Transform].[FactMPXActivity]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactPaycor]...';


GO
ALTER TABLE [Transform].[FactPaycor]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactPaycor]...';


GO
ALTER TABLE [Transform].[FactPaycor]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactRevenue]...';


GO
ALTER TABLE [Transform].[FactRevenue]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactRevenue]...';


GO
ALTER TABLE [Transform].[FactRevenue]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactSmallGroup]...';


GO
ALTER TABLE [Transform].[FactSmallGroup]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactSmallGroup]...';


GO
ALTER TABLE [Transform].[FactSmallGroup]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactSocialContact]...';


GO
ALTER TABLE [Transform].[FactSocialContact]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactSocialContact]...';


GO
ALTER TABLE [Transform].[FactSocialContact]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactStewardshipBudget]...';


GO
ALTER TABLE [Transform].[FactStewardshipBudget]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactStewardshipBudget]...';


GO
ALTER TABLE [Transform].[FactStewardshipBudget]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactStewardshipGiving]...';


GO
ALTER TABLE [Transform].[FactStewardshipGiving]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactStewardshipGiving]...';


GO
ALTER TABLE [Transform].[FactStewardshipGiving]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactWebActivity]...';


GO
ALTER TABLE [Transform].[FactWebActivity]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[FactWebActivity]...';


GO
ALTER TABLE [Transform].[FactWebActivity]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[Tenant]...';


GO
ALTER TABLE [Transform].[Tenant]
    ADD DEFAULT (GETDATE()) FOR [InsertedDateTime];


GO
PRINT N'Creating unnamed constraint on [Transform].[Tenant]...';


GO
ALTER TABLE [Transform].[Tenant]
    ADD DEFAULT (GETDATE()) FOR [UpdatedDateTime];


GO
PRINT N'Altering [DW].[usp_Dashboard-MonthAverageAttendance]...';


GO
ALTER PROCEDURE [DW].[usp_Dashboard-MonthAverageAttendance]
AS
--Currently this uses Calendar Date instead of "minsistry date" Ministry Date business logic can be added in a future version
IF OBJECT_ID('tempdb..#Attendance') is not null
DROP TABLE #Attendance;

SELECT 
	  CalendarYear
	, CalendarMonth
	, CalendarMonthAbbreviation
	, CalendarMonthLabel
	, CalendarWeek
	, SUM(AttendanceCount) AS AttendanceCount
INTO #Attendance
FROM DW.FactAttendance 
INNER JOIN DW.DimDate 
	ON FactAttendance.InstanceDateID = DimDate.DateID
WHERE
	ActualDate >= DATEADD(YEAR, -3, GETDATE()) --fixed to a three year history
GROUP BY
	  CalendarYear
	, CalendarMonth
	, CalendarMonthAbbreviation
	, CalendarMonthLabel
	, CalendarWeek
ORDER BY 
	1, 2, 5;

SELECT * FROM #Attendance ORDER BY 	1, 2, 5;

SELECT
	  CalendarYear
	, CalendarMonth
	, CalendarMonthAbbreviation
	, CalendarMonthLabel
	, AVG(AttendanceCount) AS AttendanceCount
FROM #Attendance
GROUP BY
	  CalendarYear
	, CalendarMonth
	, CalendarMonthAbbreviation
	, CalendarMonthLabel
ORDER BY
	1, 2;
GO
PRINT N'Altering [DW].[usp_UpsertDimDate]...';


GO
ALTER PROCEDURE [DW].[usp_UpsertDimDate] @StartDate DATE,
                                          @EndDate   DATE
AS
	SET NOCOUNT ON;
    --based on http://www.codeproject.com/Articles/647950/Create-and-Populate-Date-Dimension-for-Data-Wareho
	
	--Set first day of week to sunday, or none of the following works!
	SET DATEFIRST 7; -- Sunday is the first day of the week.

	--Calendar Year: 1/1/yyyy - 12/31/yyyy
	--Fiscal   Year: 7/1/yyyy - 6/30/yyyy
	--Ministry Year: 8/1/yyyy - 7/31/yyyy
		--HBC minsitry weeks (Monday - Sunday) are reported together in Summary for KPI Reports
		--When a week is split over 2 calendar months, the Sunday date determines which month the KPI report data gets calculated into.
		--UNLESS that would cause days to move into the next calendar year (from july - august)
		--weekly data is defined starting Monday 12:00 AM through Sunday 11:59 PM
	--School   Year: 6/1/yyyy - 5/31/yyyy

     --REMOVE existing rows	
	DELETE FROM DW.DimDate 
	WHERE
	   ActualDate BETWEEN @StartDate AND @EndDate;

     --Temporary Variables To Hold the Values During Processing of Each Date of Year
     DECLARE @DayOfWeekInMonth INT, @DayOfWeekInYear INT, @DayOfQuarter INT, @WeekOfMonth INT, @CurrentYear INT, @CurrentMonth INT
		, @CurrentQuarter INT, @MinistryMonth INT, @MinistryMonthAbbreviation NVARCHAR(255), @MinistryMonthLabel NVARCHAR(255);

     /*Table Data type to store the day of week count for the month and year*/
     DECLARE @DayOfWeek TABLE(
	     DayOWeek          INT
	   , MonthCount   INT
	   , QuarterCount INT
	   , YearCount    INT
     );

     INSERT INTO @DayOfWeek
     VALUES(1, 0, 0, 0);
     INSERT INTO @DayOfWeek
     VALUES(2, 0, 0, 0);
     INSERT INTO @DayOfWeek
     VALUES(3, 0, 0, 0);
     INSERT INTO @DayOfWeek
     VALUES(4, 0, 0, 0);
     INSERT INTO @DayOfWeek
     VALUES(5, 0, 0, 0);
     INSERT INTO @DayOfWeek
     VALUES(6, 0, 0, 0);
     INSERT INTO @DayOfWeek
     VALUES(7, 0, 0, 0);

    --Extract and assign various parts of Values from Current Date to Variable

    DECLARE @CurrentDate AS DATE= @StartDate;
    SET @CurrentMonth = DATEPART(MM, @CurrentDate);
    SET @CurrentYear = DATEPART(YY, @CurrentDate);
    SET @CurrentQuarter = DATEPART(QQ, @CurrentDate);

	

    --Proceed only if Start Date(Current date ) is less than End date you specified above
    WHILE @CurrentDate < @EndDate
         BEGIN
			--default Ministry Month Handler:
			SET @MinistryMonth = CASE WHEN DATEPART(MM, @CurrentDate) BETWEEN 1 AND 7 THEN DATEPART(MM, @CurrentDate) + 5 ELSE DATEPART(MM, @CurrentDate) - 7 END
			--default handling for Ministry Month Abbreviation and label
			SET @MinistryMonthAbbreviation = LEFT(CONVERT(VARCHAR(20), CONVERT(DATE, @CurrentDate) , 107), 3)
			SET @MinistryMonthLabel = DATENAME(MONTH, @currentDate) 

			--Special Handling for Ministry Month, Abbreviation and Label
			IF DATENAME(WEEKDAY, @CurrentDate) = 'Monday'    AND (DATEPART(MM, DATEADD(DAY, 6, @CurrentDate)) > DATEPART(MM, @CurrentDate) OR DATEPART(MM, DATEADD(DAY, 6, @CurrentDate)) = 1) AND DATEPART(MM, DATEADD(DAY, 6, @CurrentDate)) <> 8
			BEGIN
				SET @MinistryMonth = CASE WHEN DATEPART(MM, DATEADD(DAY, 6, @CurrentDate)) BETWEEN 1 AND 7 THEN DATEPART(MM, DATEADD(DAY, 6, @CurrentDate)) + 5 ELSE DATEPART(MM, DATEADD(DAY, 6, @CurrentDate)) - 7 END
				SET @MinistryMonthAbbreviation = LEFT(CONVERT(VARCHAR(20), DATEADD(DAY, 6, @CurrentDate) , 107), 3)
				SET @MinistryMonthLabel = DATENAME(MONTH, DATEADD(DAY, 6, @CurrentDate)) 
			END

			IF DATENAME(WEEKDAY, @CurrentDate) = 'Tuesday'   AND (DATEPART(MM, DATEADD(DAY, 5, @CurrentDate)) > DATEPART(MM, @CurrentDate) OR DATEPART(MM, DATEADD(DAY, 5, @CurrentDate)) = 1) AND DATEPART(MM, DATEADD(DAY, 6, @CurrentDate)) <> 8
			BEGIN
				SET @MinistryMonth = CASE WHEN DATEPART(MM, DATEADD(DAY, 5, @CurrentDate)) BETWEEN 1 AND 7 THEN DATEPART(MM, DATEADD(DAY, 5, @CurrentDate)) + 5 ELSE DATEPART(MM, DATEADD(DAY, 5, @CurrentDate)) - 7 END
				SET @MinistryMonthAbbreviation = LEFT(CONVERT(VARCHAR(20), DATEADD(DAY, 5, @CurrentDate) , 107), 3)
				SET @MinistryMonthLabel = DATENAME(MONTH, DATEADD(DAY, 5, @CurrentDate)) 
			END

			IF DATENAME(WEEKDAY, @CurrentDate) = 'Wednesday' AND (DATEPART(MM, DATEADD(DAY, 4, @CurrentDate)) > DATEPART(MM, @CurrentDate) OR DATEPART(MM, DATEADD(DAY, 4, @CurrentDate)) = 1) AND DATEPART(MM, DATEADD(DAY, 6, @CurrentDate)) <> 8
			BEGIN
				SET @MinistryMonth = CASE WHEN DATEPART(MM, DATEADD(DAY, 4, @CurrentDate)) BETWEEN 1 AND 7 THEN DATEPART(MM, DATEADD(DAY, 4, @CurrentDate)) + 5 ELSE DATEPART(MM, DATEADD(DAY, 4, @CurrentDate)) - 7 END
				SET @MinistryMonthAbbreviation = LEFT(CONVERT(VARCHAR(20), DATEADD(DAY, 4, @CurrentDate) , 107), 3)
				SET @MinistryMonthLabel = DATENAME(MONTH, DATEADD(DAY, 4, @CurrentDate)) 
			END

			IF DATENAME(WEEKDAY, @CurrentDate) = 'Thursday'  AND (DATEPART(MM, DATEADD(DAY, 3, @CurrentDate)) > DATEPART(MM, @CurrentDate) OR DATEPART(MM, DATEADD(DAY, 3, @CurrentDate)) = 1) AND DATEPART(MM, DATEADD(DAY, 6, @CurrentDate)) <> 8
			BEGIN
				SET @MinistryMonth = CASE WHEN DATEPART(MM, DATEADD(DAY, 3, @CurrentDate)) BETWEEN 1 AND 7 THEN DATEPART(MM, DATEADD(DAY, 3, @CurrentDate)) + 5 ELSE DATEPART(MM, DATEADD(DAY, 3, @CurrentDate)) - 7 END
				SET @MinistryMonthAbbreviation = LEFT(CONVERT(VARCHAR(20), DATEADD(DAY, 3, @CurrentDate) , 107), 3)
				SET @MinistryMonthLabel = DATENAME(MONTH, DATEADD(DAY, 3, @CurrentDate)) 
			END

			IF DATENAME(WEEKDAY, @CurrentDate) = 'Friday'    AND (DATEPART(MM, DATEADD(DAY, 2, @CurrentDate)) > DATEPART(MM, @CurrentDate) OR DATEPART(MM, DATEADD(DAY, 2, @CurrentDate)) = 1) AND DATEPART(MM, DATEADD(DAY, 6, @CurrentDate)) <> 8
			BEGIN
				SET @MinistryMonth = CASE WHEN DATEPART(MM, DATEADD(DAY, 2, @CurrentDate)) BETWEEN 1 AND 7 THEN DATEPART(MM, DATEADD(DAY, 2, @CurrentDate)) + 5 ELSE DATEPART(MM, DATEADD(DAY, 2, @CurrentDate)) - 7 END
				SET @MinistryMonthAbbreviation = LEFT(CONVERT(VARCHAR(20), DATEADD(DAY, 2, @CurrentDate) , 107), 3)
				SET @MinistryMonthLabel = DATENAME(MONTH, DATEADD(DAY, 2, @CurrentDate)) 
			END

			IF DATENAME(WEEKDAY, @CurrentDate) = 'Saturday'  AND (DATEPART(MM, DATEADD(DAY, 1, @CurrentDate)) > DATEPART(MM, @CurrentDate) OR DATEPART(MM, DATEADD(DAY, 1, @CurrentDate)) = 1) AND DATEPART(MM, DATEADD(DAY, 6, @CurrentDate)) <> 8
			BEGIN
				SET @MinistryMonth = CASE WHEN DATEPART(MM, DATEADD(DAY, 1, @CurrentDate)) BETWEEN 1 AND 7 THEN DATEPART(MM, DATEADD(DAY, 1, @CurrentDate)) + 5 ELSE DATEPART(MM, DATEADD(DAY, 1, @CurrentDate)) - 7 END
				SET @MinistryMonthAbbreviation = LEFT(CONVERT(VARCHAR(20), DATEADD(DAY, 1, @CurrentDate) , 107), 3)
				SET @MinistryMonthLabel = DATENAME(MONTH, DATEADD(DAY, 1, @CurrentDate)) 
			END

             --Begin day of week logic

		  /*Check for Change in Month of the Current date if Month changed then 
		    Change variable value*/

             IF @CurrentMonth != DATEPART(MM, @CurrentDate)
                 BEGIN
                     UPDATE @DayOfWeek
                       SET
                           MonthCount = 0;
                     SET @CurrentMonth = DATEPART(MM, @CurrentDate);
                 END;

		  /* Check for Change in Quarter of the Current date if Quarter changed then change 
		   Variable value*/

             IF @CurrentQuarter != DATEPART(QQ, @CurrentDate)
                 BEGIN
                     UPDATE @DayOfWeek
                       SET
                           QuarterCount = 0;
                     SET @CurrentQuarter = DATEPART(QQ, @CurrentDate);
                 END;
       
		  /* Check for Change in Year of the Current date if Year changed then change 
		   Variable value*/


             IF @CurrentYear != DATEPART(YY, @CurrentDate)
                 BEGIN
                     UPDATE @DayOfWeek
                       SET
                           YearCount = 0;
                     SET @CurrentYear = DATEPART(YY, @CurrentDate);
                 END;
	
             -- Set values in table data type created above from variables 

             UPDATE @DayOfWeek
               SET
                   MonthCount = MonthCount + 1,
                   QuarterCount = QuarterCount + 1,
                   YearCount = YearCount + 1
             WHERE DayOWeek = DATEPART(DW, @CurrentDate);
             SELECT @DayOfWeekInMonth = MonthCount
                  , @DayOfQuarter = QuarterCount
                  , @DayOfWeekInYear = YearCount
             FROM @DayOfWeek
             WHERE DayOWeek = DATEPART(DW, @CurrentDate);
	
             /*End day of week logic*/

             /* Populate Your Dimension Table with values*/

             INSERT INTO DW.DimDate
             (DateID, ActualDateLabel, ActualDate
			 --Calendar Dates
			 , CalendarWeek, CalendarWeekStartLabel, CalendarWeekEndLabel, CalendarDayOfWeek, CalendarDayOfWeekLabel
			 , CalendarDayOfWeekAbbreviation, CalendarMonth, CalendarMonthAbbreviation, CalendarMonthLabel
			 , CalendarDayOfMonth, CalendarLastDayOfMonthFlag, CalendarQuarter, CalendarQuarterLabel, CalendarYear
			 , CalendarYearLabel, CalendarDayOfYear
			 
			 --special calendar dates
			 , DateDescription, HolidayFlag, WeekendFlag
			 --Fiscal dates
			 , FiscalWeek, FiscalWeekStartLabel, FiscalWeekEndLabel, FiscalDayOfWeek, FiscalDayOfWeekLabel		
			 , FiscalDayOfWeekAbbreviation, FiscalMonth, FiscalMonthAbbreviation, FiscalMonthLabel
			 , FiscalDayOfMonth, FiscalLastDayOfMonthFlag, FiscalQuarter, FiscalQuarterLabel, FiscalYear					
			 , FiscalYearLabel, FiscalDayOfYear			
			 --MinistryDates
			 , MinistryWeek, MinistryWeekStartLabel, MinistryWeekEndLabel, MinistryDayOfWeek, MinistryDayOfWeekLabel		
			 , MinistryDayOfWeekAbbreviation, MinistryMonth, MinistryMonthAbbreviation, MinistryMonthLabel
			 , MinistryDayOfMonth, MinistryLastDayOfMonthFlag, MinistryQuarter, MinistryQuarterLabel, MinistryYear					
			 , MinistryYearLabel, MinistryDayOfYear		
			 --School Dates
			 , SchoolWeek, SchoolWeekStartLabel, SchoolWeekEndLabel, SchoolDayOfWeek, SchoolDayOfWeekLabel		
			 , SchoolDayOfWeekAbbreviation, SchoolMonth, SchoolMonthAbbreviation, SchoolMonthLabel
			 , SchoolDayOfMonth, SchoolLastDayOfMonthFlag, SchoolQuarter, SchoolQuarterLabel, SchoolYear					
			 , SchoolYearLabel, SchoolDayOfYear		
			 --etl columns
			 , ExecutionID, InsertedDateTime, UpdatedDateTime, Hashvalue  )
            SELECT 
				  CONVERT(  CHAR(8), @CurrentDate, 112) AS DateID
                , CONVERT(  CHAR(10), @CurrentDate, 101) AS ActualDateLabel
                , @CurrentDate AS ActualDate
                --Calendar Dates
				, DATEPART(WEEK, @currentDate) AS CalendarWeek
				, NULL AS CalendarWeekStartLabel
				, NULL AS CalendarWeekEndLabel
				, DATEPART(WEEKDAY, @CurrentDate) AS CalendarDayOfWeek
				, DATENAME(WEEKDAY, @CurrentDate) AS CalendarDayOfWeekLabel
				, CASE DATEPART(WEEKDAY, @CurrentDate)
					WHEN 1 THEN 'Sun'
					WHEN 2 THEN 'Mon'
					WHEN 3 THEN 'Tue'
					WHEN 4 THEN 'Wed'
					WHEN 5 THEN 'Thu'
			 		WHEN 6 THEN 'Fri'
					WHEN 7 THEN 'Sat'
				  END AS CalendarDayOfWeekAbbreviation
				, @CurrentMonth AS CalendarMonth
				, LEFT(CONVERT(VARCHAR(20), CONVERT(DATE, @CurrentDate) , 107), 3) AS CalendarMonthAbbreviation
				, DATENAME(MONTH, @currentDate) AS CalendarMonthLabel
				, DATEPART(DAY, @CurrentDate) AS CalendarDayofmonth
				, CASE WHEN @currentDate = CONVERT(  DATETIME, CONVERT(DATE, DATEADD(DD, -(DATEPART(DD, (DATEADD(MM, 1, @CurrentDate)))), DATEADD(MM, 1, @CurrentDate))))
				  THEN 1
				  ELSE 0 END AS CalendarLastDayOfMonthFlag
				, DATEPART(QQ, @CurrentDate)  AS CalendarQuarter
				, 'Q' + CONVERT(CHAR(1), DATEPART(QQ, @CurrentDate)) + '-'
					+ CONVERT(VARCHAR(4), DATEPART(YEAR, @CurrentDate)) AS CalendarQuarterLabel
				, DATEPART(YEAR, @CurrentDate) AS CalendarYear	
				, CONVERT(VARCHAR(4), DATEPART(YEAR, @CurrentDate)) CalendarYearLabel	
				, DATEPART(DAYOFYEAR, @CurrentDate) AS CalendarDayOfYear
			 
				-- not sure what to store in DateDescription
				, NULL AS DateDescription
				, NULL AS HolidayFlag                
				, CASE WHEN DATEPART(WEEKDAY, @CurrentDate) IN (1,7) THEN 1 ELSE 0 END AS WeekendFlag 
			 
			 --Fiscal dates
			 , NULL AS FiscalWeek     
			 , NULL AS FiscalWeekStartLabel       
			 , NULL AS FiscalWeekEndLabel         
			 , DATEPART(WEEKDAY, @CurrentDate) AS FiscalDayOfWeek  
			 , DATENAME(WEEKDAY, @CurrentDate) AS FiscalDayOfWeekLabel
			 , CASE DATEPART(WEEKDAY, @CurrentDate)
				WHEN 1 THEN 'Sun'
				WHEN 2 THEN 'Mon'
				WHEN 3 THEN 'Tue'
				WHEN 4 THEN 'Wed'
				WHEN 5 THEN 'Thu'
			 	WHEN 6 THEN 'Fri'
				WHEN 7 THEN 'Sat'
			   END AS FiscalDayOfWeekAbbreviation      
			 , CASE WHEN @CurrentMonth BETWEEN 1 AND 6 THEN @CurrentMonth + 6 ELSE @CurrentMonth - 6 END AS FiscalMonth  
			 , LEFT(CONVERT(VARCHAR(20), CONVERT(DATE, @CurrentDate) , 107), 3) AS FiscalMonthAbbreviation    
			 , DATENAME(MONTH, @currentDate) AS FiscalMonthLabel           
			 , DATEPART(DAY, @CurrentDate) AS FiscalDayOfMonth           
			 , CASE WHEN @currentDate = CONVERT(  DATETIME, CONVERT(DATE, DATEADD(DD, -(DATEPART(DD, (DATEADD(MM, 1, @CurrentDate)))), DATEADD(MM, 1, @CurrentDate))))
				THEN 1
				ELSE 0 END AS FiscalLastDayOfMonthFlag
			 , NULL AS FiscalQuarter  
			 , NULL AS FiscalQuarterLabel         
			 , CASE WHEN @CurrentMonth BETWEEN 1 AND 6 THEN DATEPART(YEAR, @CurrentDate) ELSE DATEPART(YEAR, @CurrentDate) + 1 END AS FiscalYear   
			 , CONVERT(VARCHAR(4), CASE WHEN @CurrentMonth BETWEEN 1 AND 6 THEN DATEPART(YEAR, @CurrentDate) ELSE DATEPART(YEAR, @CurrentDate) + 1 END) AS FiscalYearLabel   
			 , NULL AS FiscalDayOfYear            
			             
			-- Ministry Dates
			---fix ministry week in an update
			 , NULL AS MinistryWeek  
			 --add week start and end labels later   
			 , NULL AS MinistryWeekStartLabel       
			 , NULL AS MinistryWeekEndLabel         
			 --shift all day of week - 1 (from first day of week sunday, to first day of week is monday)
			 , CASE WHEN DATEPART(WEEKDAY, @CurrentDate) BETWEEN 2 AND 7 THEN DATEPART(WEEKDAY, @CurrentDate) - 1 ELSE 7 END AS MinistryDayOfWeek
			 , DATENAME(WEEKDAY, @CurrentDate) AS MinistryDayOfWeekLabel
			 , CASE DATEPART(WEEKDAY, @CurrentDate)
				WHEN 1 THEN 'Sun'
				WHEN 2 THEN 'Mon'
				WHEN 3 THEN 'Tue'
				WHEN 4 THEN 'Wed'
				WHEN 5 THEN 'Thu'
			 	WHEN 6 THEN 'Fri'
				WHEN 7 THEN 'Sat'
			   END AS MinistryDayOfWeekAbbreviation      
			 , @MinistryMonth AS MinistryMonth  
			 , @MinistryMonthAbbreviation AS MinistryMonthAbbreviation    
			 , @MinistryMonthLabel AS MinistryMonthLabel
			 --The ministry Day of month won't always be right, correct it later         
			 , NULL AS MinistryDayOfMonth           
			 , CASE WHEN @currentDate = CONVERT(  DATETIME, CONVERT(DATE, DATEADD(DD, -(DATEPART(DD, (DATEADD(MM, 1, @CurrentDate)))), DATEADD(MM, 1, @CurrentDate))))
				THEN 1
				ELSE 0 END AS MinistryLastDayOfMonthFlag
			 , NULL AS MinistryQuarter  
			 , NULL AS MinistryQuarterLabel         
			 , CASE WHEN @CurrentMonth BETWEEN 1 AND 7 THEN DATEPART(YEAR, @CurrentDate) ELSE DATEPART(YEAR, @CurrentDate) + 1 END AS MinistryYear   
			 , CONVERT(VARCHAR(4), CASE WHEN @CurrentMonth BETWEEN 1 AND 7 THEN DATEPART(YEAR, @CurrentDate) ELSE DATEPART(YEAR, @CurrentDate) + 1 END) AS MinistryYearLabel   
			 --the ministrydayofyear will be corrected via update
			 , NULL AS MinistryDayOfYear     

			--School Dates
			 , NULL AS SchoolWeek     
			 , NULL AS SchoolWeekStartLabel       
			 , NULL AS SchoolWeekEndLabel         
			 , DATEPART(WEEKDAY, @CurrentDate) AS SchoolDayOfWeek  
			 , DATENAME(WEEKDAY, @CurrentDate) AS SchoolDayOfWeekLabel
			 , CASE DATEPART(WEEKDAY, @CurrentDate)
				WHEN 1 THEN 'Sun'
				WHEN 2 THEN 'Mon'
				WHEN 3 THEN 'Tue'
				WHEN 4 THEN 'Wed'
				WHEN 5 THEN 'Thu'
			 	WHEN 6 THEN 'Fri'
				WHEN 7 THEN 'Sat'
			   END AS SchoolDayOfWeekAbbreviation      
			 , CASE WHEN @CurrentMonth BETWEEN 1 AND 5 THEN @CurrentMonth + 7 ELSE @CurrentMonth - 5 END AS SchoolMonth  
			 , LEFT(CONVERT(VARCHAR(20), CONVERT(DATE, @CurrentDate) , 107), 3) AS SchoolMonthAbbreviation    
			 , DATENAME(MONTH, @currentDate) AS SchoolMonthLabel           
			 , DATEPART(DAY, @CurrentDate) AS SchoolDayOfMonth           
			 , CASE WHEN @currentDate = CONVERT(  DATETIME, CONVERT(DATE, DATEADD(DD, -(DATEPART(DD, (DATEADD(MM, 1, @CurrentDate)))), DATEADD(MM, 1, @CurrentDate))))
				THEN 1
				ELSE 0 END AS SchoolLastDayOfMonthFlag
			 , NULL AS SchoolQuarter  
			 , NULL AS SchoolQuarterLabel         
			 , CASE WHEN @CurrentMonth BETWEEN 1 AND 5 THEN DATEPART(YEAR, @CurrentDate) ELSE DATEPART(YEAR, DATEADD(YEAR, 1, @currentdate)) END AS SchoolYear   
			 , CASE WHEN @CurrentMonth BETWEEN 1 AND 5 THEN 
					CONVERT(VARCHAR(4), DATEPART(YEAR, DATEADD(YEAR, -1, @CurrentDate))) + '/' + RIGHT(CONVERT(VARCHAR(4), DATEPART(YEAR, @CurrentDate)), 2)
			   ELSE 
					CONVERT(VARCHAR(4), DATEPART(YEAR, @CurrentDate)) + '/' + RIGHT(CONVERT(VARCHAR(4), DATEPART(YEAR, DATEADD(YEAR, 1, @CurrentDate))), 2)
			   END AS SchoolYearLabel   
			 , NULL AS SchoolDayOfYear 
			                
			 , -1 AS ExecutionID
			 , GETDATE() AS InsertedDateTime
			 , GETDATE() AS UpdatedDateTime
			 , '' AS Hashvalue
         
             SET @CurrentDate = DATEADD(DD, 1, @CurrentDate);
         END;
	--Correct MinistryDayOfMonth
    ;WITH MinistryDaysInMonth AS (
		SELECT DateID, MinistryMonth, MinistryYear
		, ROW_NUMBER() OVER(PARTITION BY MinistryMonth, MinistryYear ORDER BY DateID ) AS MinistryDayOfMonth
		FROM DW.DimDate
	)
	UPDATE DimDate SET DimDate.MinistryDayOfMonth = MinistryDaysInMonth.MinistryDayOfMonth
	FROM DW.DimDate
	INNER JOIN MinistryDaysInMonth
		ON DimDate.DateID = MinistryDaysInMonth.DateID;

	--Correct MinsitryWeek
	;WITH MinistryWeek AS (
		SELECT
		  DateID, CalendarWeek, CalendarMonth
		, MinistryYear
		, MinistryMonth
		, MinistryDayOfWeek
		, DENSE_RANK() OVER (PARTITION BY MinistryYear, MinistryDayOfWeek ORDER BY MinistryMonth, MinistryDayOfMonth) AS MinistryWeek
	FROM DW.DimDate
	)
	UPDATE DimDate SET DimDate.MinistryWeek = MinistryWeek.MinistryWeek
	FROM DW.DimDate
	INNER JOIN MinistryWeek
		ON DimDate.DateID = MinistryWeek.DateID
	;	

	--Correct MinistryDayOfYear
	;WITH MinistryDayOfYear AS (
		SELECT
		  DateID, CalendarWeek, CalendarMonth
		, MinistryYear
		, MinistryMonth
		, MinistryDayOfWeek
		, DENSE_RANK() OVER (PARTITION BY MinistryYear ORDER BY DateID) AS MinistryDayOfYear
	FROM DW.DimDate
	)
	UPDATE DimDate SET DimDate.MinistryDayOfYear = MinistryDayOfYear.MinistryDayOfYear
	FROM DW.DimDate
	INNER JOIN MinistryDayOfYear
		ON DimDate.DateID = MinistryDayOfYear.DateID
	;	
			 
	
     /*THANKSGIVING - Fourth THURSDAY in November*/

     UPDATE DW.DimDate
       SET
           HolidayFlag = 1 --'Thanksgiving Day'
     WHERE CalendarMonth = 11
           AND CalendarDayOfWeekLabel = 'Thursday'
           --need to calculate this AND DayOfWeekInMonth = 4;
		 AND (DATEPART(WEEK, ActualDate) - DATEPART(WEEK, CONVERT(DATE, '11/1/' + CONVERT(VARCHAR(4), CalendarYear) )) ) + 1 = 4
		 AND ActualDate BETWEEN @StartDate AND @EndDate;

     /*CHRISTMAS*/

     UPDATE DW.DimDate
       SET
           HolidayFlag = 1 --'Christmas Day'
     WHERE CalendarMonth = 12
           AND CalendarDayOfMonth = 25
		 AND ActualDate BETWEEN @StartDate AND @EndDate;

     /*4th of July*/

     UPDATE DW.DimDate
       SET
           HolidayFlag = 1 --'Independance Day'
     WHERE CalendarMonth = 7
           AND CalendarDayOfMonth = 4
		 AND ActualDate BETWEEN @StartDate AND @EndDate;

     /*New Years Day*/

     UPDATE DW.DimDate
       SET
           HolidayFlag = 1 --'New Year''s Day'
     WHERE CalendarMonth = 1
           AND CalendarDayOfMonth = 1
		 AND ActualDate BETWEEN @StartDate AND @EndDate;

     /*Memorial Day - Last Monday in May*/

     UPDATE DW.DimDate
       SET
           HolidayFlag = 1 --'Memorial Day'
     FROM DW.DimDate
     WHERE DateID IN
     (
         SELECT MAX(DateID)
         FROM DW.DimDate
         WHERE CalendarMonthLabel = 'May'
               AND CalendarDayOfWeekLabel = 'Monday'
			AND ActualDate BETWEEN @StartDate AND @EndDate
         GROUP BY CalendarYear
                , CalendarMonth
     )AND ActualDate BETWEEN @StartDate AND @EndDate;

     /*Labor Day - First Monday in September*/

     UPDATE DW.DimDate
       SET
           HolidayFlag = 1 --'Labor Day'
     FROM DW.DimDate
     WHERE DateID IN
     (
         SELECT MIN(DateID)
         FROM DW.DimDate
         WHERE CalendarMonthLabel = 'September'
               AND CalendarDayOfWeekLabel = 'Monday'
			AND ActualDate BETWEEN @StartDate AND @EndDate
         GROUP BY CalendarYear
                , CalendarMonth
     )AND ActualDate BETWEEN @StartDate AND @EndDate;

     /*Valentine's Day*/

     UPDATE DW.DimDate
       SET
           HolidayFlag = 1 --'Valentine''s Day'
     WHERE CalendarMonth = 2
           AND CalendarDayOfMonth = 14
		 AND ActualDate BETWEEN @StartDate AND @EndDate;

     /*Saint Patrick's Day*/

     UPDATE DW.DimDate
       SET
           HolidayFlag = 1 --'Saint Patrick''s Day'
     WHERE CalendarMonth = 3
           AND CalendarDayOfMonth = 17
		 AND ActualDate BETWEEN @StartDate AND @EndDate;

     /*Martin Luthor King Day - Third Monday in January starting in 1983*/

     UPDATE DW.DimDate
       SET
           HolidayFlag = 1 --'Martin Luthor King Jr Day'
     WHERE CalendarMonth = 1
           AND CalendarDayOfWeekLabel = 'Monday'
           AND CalendarYear >= 1983
            AND (DATEPART(WEEK, ActualDate) - DATEPART(WEEK, CONVERT(DATE, '11/1/' + CONVERT(VARCHAR(4), CalendarYear) )) ) + 1 = 3
		 AND ActualDate BETWEEN @StartDate AND @EndDate;

     /*President's Day - Third Monday in February*/

     UPDATE DW.DimDate
       SET
           HolidayFlag = 1 --'President''s Day'
     WHERE CalendarMonth = 2
           AND CalendarDayOfWeekLabel = 'Monday'
            AND (DATEPART(WEEK, ActualDate) - DATEPART(WEEK, CONVERT(DATE, '11/1/' + CONVERT(VARCHAR(4), CalendarYear) )) ) + 1 = 3
		 AND ActualDate BETWEEN @StartDate AND @EndDate;

     /*Mother's Day - Second Sunday of May*/

     UPDATE DW.DimDate
       SET
           HolidayFlag = 1 --'Mother''s Day'
     WHERE CalendarMonth = 5
           AND CalendarDayOfWeekLabel = 'Sunday'
            AND (DATEPART(WEEK, ActualDate) - DATEPART(WEEK, CONVERT(DATE, '11/1/' + CONVERT(VARCHAR(4), CalendarYear) )) ) + 1 = 2
		 AND ActualDate BETWEEN @StartDate AND @EndDate;

     /*Father's Day - Third Sunday of June*/

     UPDATE DW.DimDate
       SET
           HolidayFlag = 1 --'Father''s Day'
     WHERE CalendarMonth = 6
           AND CalendarDayOfWeekLabel = 'Sunday'
            AND (DATEPART(WEEK, ActualDate) - DATEPART(WEEK, CONVERT(DATE, '11/1/' + CONVERT(VARCHAR(4), CalendarYear) )) ) + 1 = 3
		 AND ActualDate BETWEEN @StartDate AND @EndDate;

     /*Halloween 10/31*/

     UPDATE DW.DimDate
       SET
           HolidayFlag = 1 --'Halloween'
     WHERE CalendarMonth = 10
           AND CalendarDayOfMonth = 31
		 AND ActualDate BETWEEN @StartDate AND @EndDate;
     
     RETURN 0;
GO
PRINT N'Creating [dbo].[usp_Initialize_CampusXLTReportGroupRows]...';


GO
CREATE PROCEDURE [dbo].[usp_Initialize_CampusXLTReportGroupRows]
AS

	--truncate the groups first
	TRUNCATE TABLE CampusXLTReportGroup_CampusTab;

	--then load
	INSERT INTO CampusXLTReportGroup_CampusTab
	(CampusXLTReportGroupID	, CampusHeading		, CampusDetail													, CampusDetailSortOrder, CampusCode			, CampusCodeSortOrder	, AllocateByAttendancePercentage)

	SELECT 1				, 'Compensation'	,'Direct (Ops)'													, 1						, 'EL'				, 2						, 0	UNION
	SELECT 2				, 'Compensation'	,'Direct (Ops)'													, 1						, 'RM'				, 3						, 0	UNION
	SELECT 3				, 'Compensation'	,'Indirect (IT)'												, 2						, NULL				, NULL					, 1	UNION
	SELECT 4				, 'Compensation'	,'Indirect (Central Svcs)'										, 3						, NULL				, NULL					, 1	UNION
	SELECT 5				, 'Compensation'	,'Direct (Min Staff/Admin)'										, 4						, 'EL'				, 2						, 0	UNION
	SELECT 6				, 'Compensation'	,'Direct (Min Staff/Admin)'										, 4						, 'RM'				, 3						, 0	UNION
	SELECT 7				, 'Compensation'	,'Direct (Min Staff/Admin)'										, 4						, 'NI'				, 4						, 0	UNION
	SELECT 8				, 'Compensation'	,'Direct (Min Staff/Admin)'										, 4						, 'CL'				, 5						, 0	UNION
	SELECT 9				, 'Compensation'	,'Direct (Min Staff/Admin)'										, 4						, 'CC'				, 6						, 0	UNION
	SELECT 10				, 'Compensation'	,'Direct (Min Staff/Admin)'										, 4						, 'AU'				, 7						, 0	UNION
	SELECT 11				, 'Compensation'	,'Direct (Min Staff/Admin)'										, 4						, 'DR'				, 8						, 0	UNION
	SELECT 12				, 'Compensation'	,'Indirect (Interns)'											, 5						, NULL				, NULL					, 1	UNION
	SELECT 13				, 'Compensation'	,'Indirect (Acctg, VCF net, Development)'						, 6						, NULL				, NULL					, 1 UNION 
	SELECT 14				, 'Compensation'	,'Indirect (Pastoral+Exec Support))'							, 7						, NULL				, NULL					, 1 UNION 
	SELECT 15				, 'Compensation'	,'Indirect (Worship, Prod, CSvcs/Comm, Online, Spec Events)'	, 8						, NULL				, NULL					, 1 UNION 
	SELECT 16				, 'Compensation'	,'Indirect: BSC net'											, 9						, NULL				, NULL					, 1 UNION 
	SELECT 17				, 'Compensation'	,'Health Insurance'												, 10					, 'Initiatives/BB'  , 1						, 0 UNION
	SELECT 18				, 'Compensation'	,'Expense Sharing'												, 11					, 'Initiatives/BB'	, 1						, 0 UNION
	SELECT 19				, 'Compensation'	,'HCA Pastoral Billback' 										, 12					, 'Initiatives/BB'	, 1						, 0 UNION
	SELECT 20				, 'Compensation'	,'HBF Pastoral Billback' 										, 13					, 'Initiatives/BB'	, 1						, 0 UNION
	SELECT 21				, 'Compensation'	,'WITW Pastoral Billback' 										, 14					, 'Initiatives/BB'	, 1						, 0 UNION
	SELECT 22				, 'Compensation'	,'Personal Accounts'											, 15					, 'Initiatives/BB'	, 1						, 0 UNION
	SELECT 23				, 'Compensation'	,'Cell Phones'													, 16					, 'Initiatives/BB'	, 1						, 0 UNION
	SELECT 24				, 'Compensation'	,'Scholarships'													, 17					, 'Initiatives/BB'	, 1						, 0 UNION
	SELECT 25				, 'Compensation'	,'All Staff Meetings'											, 18					, 'Initiatives/BB'	, 1						, 0 UNION
	SELECT 26				, 'Compensation'	,'Retreats'														, 19					, 'Initiatives/BB'	, 1						, 0 UNION
	SELECT 27				, 'Compensation'	,'Awards'														, 20					, 'Initiatives/BB'	, 1						, 0 UNION
	SELECT 28				, 'Compensation'	,'Pulpit Supply'												, 21					, 'Initiatives/BB'	, 1						, 0 UNION
	SELECT 29				, 'Compensation'	,'LTD/Life'														, 22					, 'Initiatives/BB'	, 1						, 0 UNION
	SELECT 30				, 'Compensation'	,'Workers Comp'													, 23					, 'Initiatives/BB'	, 1						, 0 UNION
	SELECT 31				, 'Compensation'	,'Paycor Fees'													, 24					, 'Initiatives/BB'	, 1						, 0 UNION
	SELECT 32				, 'Compensation'	,'Passthrough Billbacks'										, 25					, 'Initiatives/BB'	, 1						, 0 UNION
	SELECT 33				, 'Compensation'	,'Reoccurring Billbacks' 										, 26					, 'Initiatives/BB'	, 1						, 0 UNION
	SELECT 34				, 'Compensation'	,'Other'														, 27					, 'Initiatives/BB'	, 1						, 0 UNION

	--Administration
	--(CampusXLTReportGroupID	, CampusHeading	, CampusDetail												, CampusDetailSortOrder, CampusCode			, CampusCodeSortOrder	, AllocateByAttendancePercentage)																																																 
	SELECT	35				, 'Administration'	, 'General Office'												, 28					, NULL				, NULL					, 1 UNION 
	SELECT	36				, 'Administration'	, 'Office Equipment'											, 29					, NULL				, NULL					, 1 UNION 
	SELECT	37				, 'Administration'	, 'Technology'													, 30 					, NULL				, NULL					, 1 UNION 
	SELECT	38				, 'Administration'	, 'Printing'													, 31 					, NULL				, NULL					, 1 UNION 
	SELECT	39				, 'Administration'	, 'Banking, Legal, Audit, Professional Fees'					, 32 					, NULL				, NULL					, 1 UNION 
	SELECT	40				, 'Administration'	, 'Payroll Processing Fees'										, 33 					, NULL				, NULL					, 1 UNION 
	SELECT	41				, 'Administration'	, 'Insurance'													, 34 					, NULL				, NULL					, 1 UNION 

	--Facilities
	SELECT	42				, 'Facilities'		, 'Facilities & Grounds Maintenance'							, 35 					, NULL				, NULL					, 1 UNION 
	SELECT	43				, 'Facilities'		, 'Utilities'													, 36 					, NULL				, NULL					, 1 UNION 
	SELECT	44				, 'Facilities'		, 'Service Support'												, 37 					, NULL				, NULL					, 1 UNION 
	SELECT	45				, 'Facilities'		, 'Mortgage'													, 38 					, NULL				, NULL					, 1 UNION 

	--Camp Operations
	SELECT  46				, 'Camp Operations' , 'Operating Expense'											, 39 					, NULL				, NULL					, 1 UNION 

	--Ministries
	--(CampusXLTReportGroupID	, CampusHeading	, CampusDetail												, CampusDetailSortOrder, CampusCode			, CampusCodeSortOrder	, AllocateByAttendancePercentage)																																																 
	SELECT	47				, 'Ministries'		, 'Ministry Expansion and Development'						, 40						, NULL				, NULL					, 1 UNION 
	SELECT	48				, 'Ministries'		, 'Special Events'											, 41						, NULL				, NULL					, 1 UNION 
	SELECT	49				, 'Ministries'		, 'Online Services'											, 42						, NULL				, NULL					, 1 UNION 
	SELECT	50				, 'Ministries'		, 'Adult'													, 43						, NULL				, NULL					, 1 UNION 
	SELECT	51				, 'Ministries'		, 'Single Parent'											, 44						, NULL				, NULL					, 1 UNION 
	SELECT	52				, 'Ministries'		, 'Biblical Soul Care'										, 45						, NULL				, NULL					, 1 UNION 
	SELECT	53				, 'Ministries'		, 'Family'													, 46						, NULL				, NULL					, 1 UNION 
	SELECT	54				, 'Ministries'		, 'Student'													, 47						, NULL				, NULL					, 1 UNION 
	SELECT	55				, 'Ministries'		, 'Worship'													, 48						, NULL				, NULL					, 1 UNION 
	SELECT	56				, 'Ministries'		, 'Stewardship'												, 49						, NULL				, NULL					, 1 UNION 
	SELECT	57				, 'Ministries'		, 'Missions & Outreach & Church Plant'						, 50						, NULL				, NULL					, 1 UNION 
	SELECT	58				, 'Ministries'		, 'Congregation/FOCIS'										, 51						, NULL				, NULL					, 1 UNION 
	SELECT	59				, 'Ministries'		, 'Production'												, 52						, NULL				, NULL					, 1 UNION 
	SELECT	60				, 'Ministries'		, 'Creative Services, Video Prod, Media'					, 53						, NULL				, NULL					, 1 UNION 
	SELECT	61				, 'Ministries'		, 'Other'													, 54						, NULL				, NULL					, 1 

	
	--next truncate the Campus Tab mapping
	TRUNCATE TABLE CampusXLTReportGroup_CampusTabMap

	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT
		DimFinancialCategory.FinancialCategoryID, 1 AS CampusXLTReportGroupID
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND CategoryCode = 'PER1'
		AND CampusCode = 'CS'
		AND AccountingCode9 = '8009'

	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT
		DimFinancialCategory.FinancialCategoryID, 2 AS CampusXLTReportGroupID
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND CategoryCode = 'PER1'
		AND CampusCode = 'CS'
		AND AccountingCode9 = '8004'

	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT
		DimFinancialCategory.FinancialCategoryID, 3 AS CampusXLTReportGroupID
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND CategoryCode = 'PER1'
		AND CampusCode = 'CS'
		AND AccountingCode9 = '8032'

	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT
		DimFinancialCategory.FinancialCategoryID, 4 AS CampusXLTReportGroupID
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND CategoryCode = 'PER1'
		AND CampusCode = 'CS'
		AND AccountingCode9 = '8037'

	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT
		DimFinancialCategory.FinancialCategoryID, 5 AS CampusXLTReportGroupID
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND CategoryCode = 'PER1'
		AND CampusCode = 'CS'
		AND AccountingCode9 IN ('8005', '8006', '8007', '8008')

	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT
		DimFinancialCategory.FinancialCategoryID, 6 AS CampusXLTReportGroupID
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND CategoryCode = 'PER1'
		AND CampusCode = 'CS'
		AND AccountingCode9 IN ('8000', '8001', '8002', '8003')

	
	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT
		DimFinancialCategory.FinancialCategoryID, 7 AS CampusXLTReportGroupID
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND CategoryCode = 'PER1'
		AND CampusCode = 'CS'
		AND AccountingCode9 IN ('8010', '8011', '8012', '8013')

	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT
		DimFinancialCategory.FinancialCategoryID, 8 AS CampusXLTReportGroupID
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND CategoryCode = 'PER1'
		AND CampusCode = 'CS'
		AND AccountingCode9 IN ('8014', '8015')

	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT
		DimFinancialCategory.FinancialCategoryID, 9 AS CampusXLTReportGroupID
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND CategoryCode = 'PER1'
		AND CampusCode = 'CS'
		AND AccountingCode9 IN ('8021', '8022', '8023')

	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT
		DimFinancialCategory.FinancialCategoryID, 10 AS CampusXLTReportGroupID
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND CategoryCode = 'PER1'
		AND CampusCode = 'CS'
		AND AccountingCode9 IN ('8017', '8018', '8019', '8020')

	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT
		DimFinancialCategory.FinancialCategoryID, 11 AS CampusXLTReportGroupID
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND CategoryCode = 'PER1'
		AND CampusCode = 'CS'
		AND AccountingCode9 IN ('8024')

	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT
		DimFinancialCategory.FinancialCategoryID, 13 AS CampusXLTReportGroupID
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND CategoryCode = 'PER1'
		AND CampusCode = 'CS'
		AND AccountingCode9 IN ('8031', '8038', '8040')

	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT
		DimFinancialCategory.FinancialCategoryID, 14 AS CampusXLTReportGroupID
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND CategoryCode = 'PER1'
		AND CampusCode = 'CS'
		AND AccountingCode9 IN ('8047', '8036')

	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT
		DimFinancialCategory.FinancialCategoryID, 15 AS CampusXLTReportGroupID
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND CategoryCode = 'PER1'
		AND CampusCode = 'CS'
		AND AccountingCode9 IN ('8030', '8033', '8034', '8035')

	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT
		DimFinancialCategory.FinancialCategoryID, 16 AS CampusXLTReportGroupID
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND CategoryCode = 'PER1'
		AND CampusCode = 'CS'
		AND AccountingCode9 IN ('8029')

	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT
		DimFinancialCategory.FinancialCategoryID, 17 AS CampusXLTReportGroupID
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND CategoryCode = 'PER1'
		AND CampusCode = 'CS'
		AND GLCode IN ('41010', '41011', '41012', '41015', '41016')
		AND AccountingCode9 IN ('9999')
		AND DepartmentCode <> '4056'

	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT
		DimFinancialCategory.FinancialCategoryID, 18 AS CampusXLTReportGroupID
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND CategoryCode = 'PER1'
		AND CampusCode = 'CS'
		AND GLCode IN ('90511', '90512', '90514')
		AND AccountingCode9 IN ('9999')
		AND DepartmentCode <> '4056'

	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT
		DimFinancialCategory.FinancialCategoryID, 19 AS CampusXLTReportGroupID
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND CategoryCode = 'PER1'
		AND CampusCode = 'CS'
		AND AccountingCode9 IN ('8048')
	
	
	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT
		DimFinancialCategory.FinancialCategoryID, 20 AS CampusXLTReportGroupID
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND CategoryCode = 'PER1'
		AND CampusCode = 'CS'
		AND AccountingCode9 IN ('8049')

	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT
		DimFinancialCategory.FinancialCategoryID, 20 AS CampusXLTReportGroupID
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND CategoryCode = 'PER1'
		AND CampusCode = 'CS'
		AND AccountingCode9 IN ('8050')

	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT
		DimFinancialCategory.FinancialCategoryID, 22 AS CampusXLTReportGroupID
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND CategoryCode = 'PER1'
		AND CampusCode = 'CS'
		AND DepartmentCode = '4056'

	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT
		DimFinancialCategory.FinancialCategoryID, 23 AS CampusXLTReportGroupID
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND CategoryCode = 'PER1'
		AND CampusCode = 'CS'
		AND GLCode = '44090'
		AND AccountingCode9 IN ('9999') 
		AND DepartmentCode <> '4056'

	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT
		DimFinancialCategory.FinancialCategoryID, 24 AS CampusXLTReportGroupID
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND CategoryCode = 'PER1'
		AND CampusCode = 'CS'
		AND GLCode = '40020'
		AND AccountingCode9 IN ('9999') 
		AND DepartmentCode <> '4056'

	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT
		DimFinancialCategory.FinancialCategoryID, 25 AS CampusXLTReportGroupID
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND CategoryCode = 'PER1'
		AND CampusCode = 'CS'
		AND ProjectCode = '217'
		AND AccountingCode9 IN ('9999') 
		AND DepartmentCode <> '4056'

	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT
		DimFinancialCategory.FinancialCategoryID, 26 AS CampusXLTReportGroupID
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND CategoryCode = 'PER1'
		AND CampusCode = 'CS'
		AND GLCode = '43026'
		AND AccountingCode9 IN ('9999') 
		AND DepartmentCode <> '4056'

	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT
		DimFinancialCategory.FinancialCategoryID, 27 AS CampusXLTReportGroupID
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND CategoryCode = 'PER1'
		AND CampusCode = 'CS'
		AND GLCode = '44008'
		AND AccountingCode9 IN ('9999') 
		AND DepartmentCode <> '4056'

	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT
		DimFinancialCategory.FinancialCategoryID, 28 AS CampusXLTReportGroupID
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND CategoryCode = 'PER1'
		AND CampusCode = 'CS'
		AND GLCode IN ('45016', '45018', '46022', '46026')
		AND AccountingCode9 IN ('9999') 
		AND DepartmentCode <> '4056'

	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT
		DimFinancialCategory.FinancialCategoryID, 29 AS CampusXLTReportGroupID
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND CategoryCode = 'PER1'
		AND CampusCode = 'CS'
		AND GLCode IN ('41017', '41020', '41025', '41027')
		AND AccountingCode9 IN ('9999') 
		AND DepartmentCode <> '4056'

	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT
		DimFinancialCategory.FinancialCategoryID, 30 AS CampusXLTReportGroupID
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND CategoryCode = 'PER1'
		AND CampusCode = 'CS'
		AND GLCode IN ('52519')
		AND AccountingCode9 IN ('9999') 
		AND DepartmentCode <> '4056'

	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT
		DimFinancialCategory.FinancialCategoryID, 31 AS CampusXLTReportGroupID
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND CategoryCode = 'PER1'
		AND CampusCode = 'CS'
		AND GLCode IN ('60432', '53130')
		AND AccountingCode9 IN ('9999') 
		AND DepartmentCode <> '4056'

	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT
		DimFinancialCategory.FinancialCategoryID, 32 AS CampusXLTReportGroupID
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND CategoryCode = 'PER1'
		AND CampusCode = 'CS'
		AND GLCode IN ('40060')
		AND AccountingCode9 IN ('9999') 
		AND DepartmentCode <> '4056'

	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT
		DimFinancialCategory.FinancialCategoryID, 33 AS CampusXLTReportGroupID
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND CategoryCode = 'PER1'
		AND CampusCode = 'CS'
		AND GLCode IN ('40060')
		AND AccountingCode9 IN ('9999') 
		AND DepartmentCode <> '4056'

	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT
		DimFinancialCategory.FinancialCategoryID, 32 AS CampusXLTReportGroupID
	FROM DW.DimFinancialCategory
	LEFT JOIN [dbo].[CampusXLTReportGroup_CampusTabMap] dest
		ON DimFinancialCategory.FinancialCategoryID = dest.CampusXLTReportGroupID 
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND CategoryCode = 'PER1'
		AND CampusCode = 'CS'
		AND Dest.CampusXLTReportGroupID IS NULL



	--Then load the map values
	--1. General Office
	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT FinancialCategoryID, 35
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND Departmentcode = '5038'

	--2. Office Equipment –Expenses with the department code 5058
	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT FinancialCategoryID, 36
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND Departmentcode = '5058'
		
	--3. Technology
	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT FinancialCategoryID, 37
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND Departmentcode = '5178'

	--4. Printing – Expenses with the department code 5078
	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT FinancialCategoryID, 38
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND Departmentcode = '5078'

	--5. Banking, Legal, Audit, Professional Fees
	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT FinancialCategoryID, 39
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND Departmentcode IN('5018','5138','9020')

	--6. Payroll Processing Fees
	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT FinancialCategoryID, 40
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND Departmentcode IN('9025')

	--7. Insurance
	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT FinancialCategoryID, 41
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND Departmentcode IN('5098')

	--8.Facilities & Grounds Maintenance
	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT FinancialCategoryID, 42
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND Departmentcode IN('6017', '6037', '6057', '6065', '6117', '6157', '6177')

	--9.Utilities
	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT FinancialCategoryID, 43
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND Departmentcode IN('6097')

	--10.Service Support
	--no longer mapped

	--11.Mortgage
	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT FinancialCategoryID, 45
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND Departmentcode IN('9015','9017')

	--12.Operating Expense (under camp operations, also called camp  operating expense on xlt management report tab) – all expenses under fund 058
	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT FinancialCategoryID, 46
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND CampusCode = 'LH'

	--13.Ministry Expansion and Development
	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT FinancialCategoryID, 47
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND Departmentcode IN('7240')

	--14.Special Events
	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT FinancialCategoryID, 48
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND Departmentcode IN('5162')

	--15.Online Services – All expenses with department 5164
	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT FinancialCategoryID, 49
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND Departmentcode IN('5164')

	--16.Adult
	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT FinancialCategoryID, 50
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND Departmentcode IN('7005', '7007', '7011', '7014', '7041', '7047', '7050', '7059', '7066', '7071', '7073', '7075', '7076', '7079', '7084', '7086', '7089', '7111', '7176')

	--18.Biblical Soul Care
	--removed per alan on 20160325

	--19.Family 
	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT FinancialCategoryID, 53
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND Departmentcode IN('7125', '7128', '7131', '7135', '7139', '7143', '7147', '7151')

	--20.Student
	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT FinancialCategoryID, 54
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND Departmentcode IN('7165', '7166', '7170', '7171')

	--21.Worship
	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT FinancialCategoryID, 55
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND Departmentcode IN('7290')

	--22.Stewardship – all expenses with department code 7280
	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT FinancialCategoryID, 56
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND Departmentcode IN('4276')

	--23.Missions & Outreach & Church Plant
	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT FinancialCategoryID, 57
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND Departmentcode IN('7208','7210','7250')

	--24.Congregation/FOCIS
	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT FinancialCategoryID, 58
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND Departmentcode IN('7017','7023','7035')

	--25.Production – all expenses with department 5160
	--no longer mapped

	--26.Creative Services, Video Prod, Media – all expenses in department codes 5158, 5159, or 6137
	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT FinancialCategoryID, 60
	FROM DW.DimFinancialCategory
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND Departmentcode IN('5158','5159','6137')

	--other
	INSERT INTO [dbo].[CampusXLTReportGroup_CampusTabMap]
	( FinancialCategoryID, CampusXLTReportGroupID )
	SELECT DimFinancialCategory.FinancialCategoryID, 61
	FROM DW.DimFinancialCategory
	LEFT JOIN [dbo].[CampusXLTReportGroup_CampusTabMap] dest
		ON DimFinancialCategory.FinancialCategoryID = dest.FinancialCategoryID
	WHERE
		EntityCode = 'HBC'
		AND FundCode = '025'
		AND Dest.CampusXLTReportGroupID IS NULL

RETURN 0
GO
SET NOCOUNT ON;
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

MERGE INTO ETLProcess AS Target
USING (VALUES
      (1, 'TransactionalTenant', NULL)
    , (2, 'FellowshipOne_Attendance', NULL)
    , (3, 'FellowshipOne_FTV', NULL)
    , (4, 'FellowshipOne_AssimilationSteps', NULL)
    , (5, 'FellowshipOne_SmallGroupStatus', NULL)
	, (6, 'MIP_RevenueAndExpense', NULL)	
	, (7, 'MIP_Budget', NULL)
	, (8, 'TransactionalManualDataEntry',NULL)
	, (9, 'Paycor',NULL)
	, (10, 'InfiniteCampus_Enrollment', NULL)
	, (11, 'GoogleAnalytics',NULL)
	, (12, 'Mailchimp_Stats', NULL)
	, (13, 'MPX_Activity', NULL)
)
AS Source (ETLProcessID, Name, [Description])
    ON Target.ETLProcessID = Source.ETLProcessID 
WHEN NOT MATCHED BY Target THEN
    INSERT (ETLProcessID, Name, [Description])
    VALUES (ETLProcessID, Name, [Description])
WHEN MATCHED AND Target.Name != Source.Name THEN
UPDATE SET
      Target.Name = Source.Name
    , Target.[Description] = Source.[Description]
;

MERGE INTO ETLAction AS Target
USING (VALUES
      (0, 'Do Nothing', 'An optional flag. Generally you wont load 0s to your transform table.')
    , (1, 'Insert', NULL)
    , (2, 'Update', NULL)
    , (3, 'Delete', NULL)
)
AS Source (ETLActionID, Name, [Description])
    ON Target.ETLActionID = Source.ETLActionID 
WHEN NOT MATCHED BY Target THEN
    INSERT (ETLActionID, Name, [Description])
    VALUES (ETLActionID, Name, [Description])
WHEN MATCHED AND Target.Name != Source.Name THEN
UPDATE SET
      Target.Name = Source.Name
    , Target.[Description] = Source.[Description] 
;
--base connectionstrings
IF @@SERVERNAME = 'UATANALYTICS' 
BEGIN
	MERGE INTO dbo.ConnectionString AS Target
	USING (VALUES
		 (0, N'FlatFileSource', N'FlatFileSource', -1, GETDATE(), GETDATE(), '')
	  ,	(1, N'Data Source=devharvestbible.database.windows.net;User ID=HB1User;Password=u53r4hb1!;Initial Catalog=HarvestBible;Provider=SQLNCLI11.1;Auto Translate=False;', 'Harvest bible connection string.', -1, GETDATE(), GETDATE(), '')
	  , (2, N'Data Source=192.168.240.219;User ID=52projects01;Password=Proj3ct$;Initial Catalog=CHC;Provider=SQLNCLI11.1;Auto Translate=False;', 'MIP-CHC', -1, GETDATE(), GETDATE(), '')
	  , (3, N'Data Source=192.168.240.219;User ID=52projects01;Password=Proj3ct$;Initial Catalog=HBC;Provider=SQLNCLI11.1;Auto Translate=False;', 'MIP-HBC', -1, GETDATE(), GETDATE(), '')
	  , (4, N'Data Source=192.168.240.219;User ID=52projects01;Password=Proj3ct$;Initial Catalog=HBF;Provider=SQLNCLI11.1;Auto Translate=False;', 'MIP-HBF', -1, GETDATE(), GETDATE(), '')
	  , (5, N'Data Source=192.168.240.219;User ID=52projects01;Password=Proj3ct$;Initial Catalog=HCA;Provider=SQLNCLI11.1;Auto Translate=False;', 'MIP-HCA', -1, GETDATE(), GETDATE(), '')
	  , (6, N'Data Source=192.168.240.219;User ID=52projects01;Password=Proj3ct$;Initial Catalog=HMP;Provider=SQLNCLI11.1;Auto Translate=False;', 'MIP-HMP', -1, GETDATE(), GETDATE(), '')
	  , (7, N'Data Source=192.168.240.219;User ID=52projects01;Password=Proj3ct$;Initial Catalog=WITW;Provider=SQLNCLI11.1;Auto Translate=False;', 'MIP-WITW', -1, GETDATE(), GETDATE(), '')
	  --for some reason the infinite campus data was named harvest on 219
	  , (8 , N'Data Source=192.168.240.219;User ID=52projects01;Password=Proj3ct$;Initial Catalog=harvest;Provider=SQLNCLI11.1;Auto Translate=False;', 'InfiniteCampus', -1, GETDATE(), GETDATE(), '')
	  , (9 , N'Data Source=192.168.240.219;User ID=52projects01;Password=Proj3ct$;Initial Catalog=MPXWIWU;Provider=SQLNCLI11.1;Auto Translate=False;', 'MPX', -1, GETDATE(), GETDATE(), '')
	  , (10, N'Data Source=192.168.240.219;User ID=52projects01;Password=Proj3ct$;Initial Catalog=MPXWIWC;Provider=SQLNCLI11.1;Auto Translate=False;', 'MPX', -1, GETDATE(), GETDATE(), '')
	)
	AS Source (ConnectionStringID, [Source], Note, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
	ON Target.ConnectionStringID = Source.ConnectionStringID
	WHEN MATCHED THEN 
	UPDATE SET 
		  Target.[Source]          = Source.[Source]
		, Target.Note              = Source.Note
		, Target.ExecutionID	      = Source.ExecutionID
		, Target.InsertedDateTime  = Source.InsertedDateTime
		, Target.UpdatedDateTime   = Source.UpdatedDateTime
		, Target.HashValue		 = Source.HashValue
	WHEN NOT MATCHED BY TARGET THEN
	INSERT (ConnectionStringID, [Source], Note, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
	VALUES (ConnectionStringID, [Source], Note, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
	;
END
ELSE
BEGIN
	MERGE INTO dbo.ConnectionString AS Target
	USING (VALUES
		(0, N'FlatFileSource', N'FlatFileSource', -1, GETDATE(), GETDATE(), '')
	  ,	(1, N'Data Source=devharvestbible.database.windows.net;Persist Security Info=True;Initial Catalog=HarvestBible;packet size=4096', 'Harvest bible connection string.', -1, GETDATE(), GETDATE(), '')
			--Data Source=hbcrmmip.harvestbible.org\mipdbase;User ID=52projectsMIP;Password=Proj3ct$;Initial Catalog=CHC;Provider=SQLNCLI11.1;Auto Translate=False;
	  , (2, N'Data Source=hbcrmmip.harvestbible.org\mipdbase;User ID=HBCMIPServices01;Password=S3rv!ce$;Initial Catalog=CHC;Provider=SQLNCLI11.1;Auto Translate=False;', 'MIP-CHC', -1, GETDATE(), GETDATE(), '')
	  , (3, N'Data Source=hbcrmmip.harvestbible.org\mipdbase;User ID=HBCMIPServices01;Password=S3rv!ce$;Initial Catalog=HBC;Provider=SQLNCLI11.1;Auto Translate=False;', 'MIP-HBC', -1, GETDATE(), GETDATE(), '')
	  , (4, N'Data Source=hbcrmmip.harvestbible.org\mipdbase;User ID=HBCMIPServices01;Password=S3rv!ce$;Initial Catalog=HBF;Provider=SQLNCLI11.1;Auto Translate=False;', 'MIP-HBF', -1, GETDATE(), GETDATE(), '')
	  , (5, N'Data Source=hbcrmmip.harvestbible.org\mipdbase;User ID=HBCMIPServices01;Password=S3rv!ce$;Initial Catalog=HCA;Provider=SQLNCLI11.1;Auto Translate=False;', 'MIP-HCA', -1, GETDATE(), GETDATE(), '')
	  , (6, N'Data Source=hbcrmmip.harvestbible.org\mipdbase;User ID=HBCMIPServices01;Password=S3rv!ce$;Initial Catalog=HMP;Provider=SQLNCLI11.1;Auto Translate=False;', 'MIP-HMP', -1, GETDATE(), GETDATE(), '')
	  , (7, N'Data Source=hbcrmmip.harvestbible.org\mipdbase;User ID=HBCMIPServices01;Password=S3rv!ce$;Initial Catalog=WITW;Provider=SQLNCLI11.1;Auto Translate=False;', 'MIP-WITW', -1, GETDATE(), GETDATE(), '')
	  , (8, N'Data Source=localhost;User ID=sa;Password=C4lr1ss14n;Initial Catalog=IC;Provider=SQLNCLI11.1;Auto Translate=False;', 'InfiniteCampus', -1, GETDATE(), GETDATE(), '')
	  , (9, N'Data Source=localhost;User ID=sa;Password=C4lr1ss14n;Initial Catalog=MPXWIWU;Provider=SQLNCLI11.1;Auto Translate=False;', 'MPX-US', -1, GETDATE(), GETDATE(), '')
	  , (10, N'Data Source=localhost;User ID=sa;Password=C4lr1ss14n;Initial Catalog=MPXWIWC;Provider=SQLNCLI11.1;Auto Translate=False;', 'MPX-Canada', -1, GETDATE(), GETDATE(), '')
	  , (11, N'Data Source=localhost;User ID=sa;Password=C4lr1ss14n;Initial Catalog=AsterixAdmin;Provider=SQLNCLI11.1;Auto Translate=False;', 'AsterixAdmin', -1, GETDATE(), GETDATE(), '')
	)
	AS Source (ConnectionStringID, [Source], Note, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
	ON Target.ConnectionStringID = Source.ConnectionStringID
	WHEN MATCHED THEN 
	UPDATE SET 
		  Target.[Source]          = Source.[Source]
		, Target.Note              = Source.Note
		, Target.ExecutionID	      = Source.ExecutionID
		, Target.InsertedDateTime  = Source.InsertedDateTime
		, Target.UpdatedDateTime   = Source.UpdatedDateTime
		, Target.HashValue		 = Source.HashValue
	WHEN NOT MATCHED BY TARGET THEN
	INSERT (ConnectionStringID, [Source], Note, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
	VALUES (ConnectionStringID, [Source], Note, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
	;
END
--define HBC Tenant
MERGE INTO Tenant AS Target
 USING (VALUES
	(3, 'HBC',1, 1, -1, GETDATE(), GETDATE(), '')
) AS Source ( TenantID, TenantName, IsActive, ConnectionStringID, ExecutionID, InsertedDateTime, UpdatedDateTime, Hashvalue)
ON Target.TenantID = Source.TenantID
WHEN MATCHED THEN 
UPDATE SET 
      Target.TenantName          = Source.TenantName
    , Target.IsActive              = Source.IsActive
	, Target.ConnectionStringID              = Source.ConnectionStringID
    , Target.ExecutionID	      = Source.ExecutionID
    , Target.InsertedDateTime  = Source.InsertedDateTime
    , Target.UpdatedDateTime   = Source.UpdatedDateTime
    , Target.HashValue		 = Source.HashValue
WHEN NOT MATCHED BY TARGET THEN
INSERT  ( TenantID, TenantName, IsActive, ConnectionStringID, ExecutionID, InsertedDateTime, UpdatedDateTime, Hashvalue)
VALUES  ( TenantID, TenantName, IsActive, ConnectionStringID, ExecutionID, InsertedDateTime, UpdatedDateTime, Hashvalue)
;

--enable all defined ETLPackages as active for HBC
--MIP imports for HBC
--short term: delete the table and rebuild
DELETE FROM TenantETLProcess;
INSERT INTO TenantETLProcess
VALUES 
    (3, 1, 1)
  , (3, 2, 0)
  , (3, 3, 0)
  , (3, 4, 0)
  , (3, 5, 0)
  , (3, 6, 2)
  , (3, 6, 3)
  , (3, 6, 4)
  , (3, 6, 5)
  , (3, 6, 6)
  , (3, 6, 7)
  , (3, 7, 2)
  , (3, 7, 3)
  , (3, 7, 4)
  , (3, 7, 5)
  , (3, 7, 6)
  , (3, 7, 7)
  , (3, 8, 1)
  , (3, 9, 0)
  , (3, 10, 8)
  , (3, 11, 0)
  , (3, 12, 0)
  , (3, 13, 9)
  , (3, 13, 10);

--base tenants (including HBC
MERGE INTO Tenant AS Target
USING (VALUES
	  (0, 'Global'				, 1, 1, -1, GETDATE(), GETDATE(), '')
	, (1, '52projects Church'	, 1, 1, -1, GETDATE(), GETDATE(), '')
	, (2, 'Integration Church'	, 1, 1, -1, GETDATE(), GETDATE(), '')
	, (3, 'Harvest Bible Chapel'  , 1, 1, -1, GETDATE(), GETDATE(), '')
)
AS Source (TenantID, TenantName, IsActive, ConnectionStringID, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
	ON Target.TenantID = Source.TenantID
WHEN MATCHED THEN
UPDATE SET 
	  target.TenantName = Source.TenantName
	, target.IsActive = Source.IsActive
	, target.ConnectionStringID = Source.ConnectionStringID
	, Target.ExecutionID	   = Source.ExecutionID
	 , Target.InsertedDateTime  = Source.InsertedDateTime
	 , Target.UpdatedDateTime   = Source.UpdatedDateTime
	 , Target.HashValue		   = Source.HashValue
WHEN NOT MATCHED BY TARGET THEN
INSERT (TenantID, TenantName, IsActive, ConnectionStringID, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
VALUES (TenantID, TenantName, IsActive, ConnectionStringID, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
;

--DimActivity depends on DimCampus And DimMinistry, so it's after DimMinistry

--DimAttendanceType
MERGE INTO DW.DimAttendanceType AS Target
USING ( VALUES
      ( -1, 3, 'Unknown'    , ''                   , ''                                  , -1, GETDATE(), GETDATE(), '')
   
) AS Source
(AttendanceTypeID, TenantID, Category, Job, VolStaffSchedule, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
    ON Target.AttendanceTypeID = Source.AttendanceTypeID
    AND Target.TenantID = Source.TenantID
WHEN NOT MATCHED BY Target THEN
    INSERT (AttendanceTypeID, TenantID, Category, Job, VolStaffSchedule, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
    VALUES (AttendanceTypeID, TenantID, Category, Job, VolStaffSchedule, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
WHEN MATCHED THEN
UPDATE SET
        Target.Category         = Source.Category
	 , Target.Job              = Source.Job 
	 , Target.VolStaffSchedule = Source.VolStaffSchedule
	 , Target.ExecutionID	   = Source.ExecutionID
	 , Target.InsertedDateTime  = Source.InsertedDateTime
	 , Target.UpdatedDateTime   = Source.UpdatedDateTime
	 , Target.HashValue		   = Source.HashValue
;

--DimCampus -- hardcoded until we find an authoritative source
MERGE INTO DW.DimCampus AS Target
USING ( VALUES
      (-1, 3, '--', 'Unknown'             , '1/1/1900', 1, -1, GETDATE(), GETDATE(), '')
    , (1 , 3, 'AU', 'Aurora'		       , '1/1/1900', 1, -1, GETDATE(), GETDATE(), '')
    , (2 , 3, 'CC', 'Chicago Cathedral'   , '1/1/1900', 1, -1, GETDATE(), GETDATE(), '')
    , (3 , 3, 'CL', 'Crystal Lake'        , '1/1/1900', 1, -1, GETDATE(), GETDATE(), '')
    , (4 , 3, 'EL', 'Elgin'               , '1/1/1900', 1, -1, GETDATE(), GETDATE(), '')
    , (5 , 3, 'NI', 'Niles'               , '1/1/1900', 1, -1, GETDATE(), GETDATE(), '')
    , (6 , 3, 'DR', 'Deerfield Rd'        , '1/1/1900', 1, -1, GETDATE(), GETDATE(), '')
    , (7 , 3, 'RM', 'Rolling Meadows'     , '1/1/1900', 1, -1, GETDATE(), GETDATE(), '')
    , (8 , 3, 'SP', 'Elgin Campus Spanish', '1/1/1900', 1, -1, GETDATE(), GETDATE(), '')
    , (9 , 3, 'WW', 'Online Church'       , '1/1/1900', 1, -1, GETDATE(), GETDATE(), '')

) AS Source
(CampusID, TenantID, Code, Name, StartDateTime, Active, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
    ON  Target.CampusID = Source.CampusID
    AND Target.TenantID = Source.TenantID
WHEN NOT MATCHED BY Target THEN
    INSERT (CampusID, TenantID, Code, Name, StartDateTime, Active, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
    VALUES (CampusID, TenantID, Code, Name, StartDateTime, Active, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
WHEN MATCHED AND Target.Name != Source.Name OR Target.Code != Source.Code THEN
UPDATE SET
        Target.Code              = Source.Code
	 , Target.Name			   = Source.Name
	 , Target.StartDateTime	   = Source.StartDateTime
	 , Target.Active		   = Source.Active
	 , Target.ExecutionID	   = Source.ExecutionID
	 , Target.InsertedDateTime  = Source.InsertedDateTime
	 , Target.UpdatedDateTime   = Source.UpdatedDateTime
	 , Target.HashValue		   = Source.HashValue
;

--DimDate Load at least the next five years and the previous five years
DECLARE @FiveYearsAgo DATE, @FiveYearsFromNow DATE
SET @FiveYearsAgo = '1/1/' + CONVERT(VARCHAR(4), YEAR(GETDATE()) - 5)
SET @FiveYearsFromNow = '12/31/' + CONVERT(VARCHAR(4), YEAR(GETDATE()) + 5)

EXEC DW.usp_UpsertDimDate @FiveYearsAgo, @FiveYearsFromNow

--DimIndividualStatus

MERGE INTO DW.DimIndividualStatus AS Target
USING ( VALUES
    (-1, 3, 'Unknown','Unknown', -1, -1, GETDATE(), GETDATE(), '')
)AS Source
(IndividualStatusID, TenantID, [Status], SubStatus, CampusID, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
   ON Target.IndividualStatusID = Source.IndividualStatusID
    AND Target.TenantID = Source.TenantID
WHEN NOT MATCHED BY Target THEN
    INSERT (IndividualStatusID, TenantID, [Status], SubStatus, CampusID, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
    VALUES (IndividualStatusID, TenantID, [Status], SubStatus, CampusID, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
WHEN MATCHED THEN
UPDATE SET
        Target.[Status]            = Source.[Status]
      , Target.SubStatus            = Source.SubStatus
	 , Target.CampusID            = Source.CampusID	   
   	 , Target.ExecutionID	   = Source.ExecutionID
	 , Target.InsertedDateTime  = Source.InsertedDateTime
	 , Target.UpdatedDateTime   = Source.UpdatedDateTime
	 , Target.HashValue		   = Source.HashValue
;
--DimLifeEventType
MERGE INTO DW.DimLifeEventType AS Target
USING ( VALUES
        (-1, 3, 'Unknown'                      , -1, GETDATE(), GETDATE(), '')
	 , (1 , 3, 'FTV'                          , -1, GETDATE(), GETDATE(), '')
	 , (2 , 3, 'Step 1: Meet'                 , -1, GETDATE(), GETDATE(), '')
      , (3 , 3, 'Step 2: Connect'              , -1, GETDATE(), GETDATE(), '')
      , (4 , 3, 'Baptized'                     , -1, GETDATE(), GETDATE(), '')  	
	 , (5 , 3, 'Membership Confirmation Sent' , -1, GETDATE(), GETDATE(), '')  	
) AS Source
(LifeEventTypeID, TenantID, Name, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
    ON Target.LifeEventTypeID = Source.LifeEventTypeID
    AND Target.TenantID = Source.TenantID
WHEN NOT MATCHED BY Target THEN
    INSERT (LifeEventTypeID, TenantID, Name, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
    VALUES (LifeEventTypeID, TenantID, Name, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
WHEN MATCHED THEN
UPDATE SET
        Target.Name            = Source.Name
   	 , Target.ExecutionID	   = Source.ExecutionID
	 , Target.InsertedDateTime  = Source.InsertedDateTime
	 , Target.UpdatedDateTime   = Source.UpdatedDateTime
	 , Target.HashValue		   = Source.HashValue
;



--DimMaritalStatus
MERGE INTO DW.DimMaritalStatus AS Target
USING ( VALUES
      (-1, 3, 'Unknown'  , -1, GETDATE(), GETDATE(), '')
    , ( 1, 3, 'Child/Yth', -1, GETDATE(), GETDATE(), '')
    , ( 2, 3, 'Divorced'	, -1, GETDATE(), GETDATE(), '')
    , ( 3, 3, 'Married'	, -1, GETDATE(), GETDATE(), '')
    , ( 4, 3, 'Separated', -1, GETDATE(), GETDATE(), '')
    , ( 5, 3, 'Single'	, -1, GETDATE(), GETDATE(), '')
    , ( 6, 3, 'Widow'	, -1, GETDATE(), GETDATE(), '')
    , ( 7, 3, 'Widower'	, -1, GETDATE(), GETDATE(), '')
) AS Source
(MaritalStatusID, TenantID, Name, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
    ON Target.MaritalStatusID = Source.MaritalStatusID
    AND Target.TenantID = Source.TenantID
WHEN NOT MATCHED BY Target THEN
    INSERT (MaritalStatusID, TenantID, Name, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
    VALUES (MaritalStatusID, TenantID, Name, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
WHEN MATCHED THEN
UPDATE SET
        Target.Name            = Source.Name
   	 , Target.ExecutionID	   = Source.ExecutionID
	 , Target.InsertedDateTime  = Source.InsertedDateTime
	 , Target.UpdatedDateTime   = Source.UpdatedDateTime
	 , Target.HashValue		   = Source.HashValue
;

--DimMinistry
MERGE INTO DW.DimMinistry AS Target
USING ( VALUES
    (-1, 3, 'Undefined', -1, '1/1/1900', NULL, 1, -1, GETDATE(), GETDATE(), '')
) AS Source
    (MinistryID, TenantID, Name, CampusID, StartDateTime, EndDateTime, Active, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
 ON Target.MinistryID = Source.MinistryID
    AND Target.TenantID = Source.TenantID
WHEN NOT MATCHED BY Target THEN
    INSERT (MinistryID, TenantID, Name, CampusID, StartDateTime, EndDateTime, Active, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
    VALUES (MinistryID, TenantID, Name, CampusID, StartDateTime, EndDateTime, Active, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
WHEN MATCHED THEN
UPDATE SET
      Target.Name       = Source.Name
    , Target.CampusID   = Source.CampusID
    , Target.ExecutionID	   = Source.ExecutionID
    , Target.InsertedDateTime  = Source.InsertedDateTime
    , Target.UpdatedDateTime   = Source.UpdatedDateTime
    , Target.HashValue		   = Source.HashValue
;
--handle the 'CS - Worship  & Production' for each campus insert
MERGE INTO DW.DimMinistry AS Target
USING (
	SELECT 
		  ROW_NUMBER() OVER (ORDER BY src.CampusID) + 1 AS MinistryID
		, 3 AS TenantID
		, 'CS - Worship & Production' AS Name
		, CampusID
		, '1/1/1900' AS StartDateTime
		, NULL AS EndDateTime
		, 1  AS Active
		, -1 AS ExecutionID
		, GETDATE() AS InsertedDateTime
		, GETDATE() AS UpdatedDateTime
		, '' AS HashValue
	FROM DW.DimCampus src) AS Source
	ON source.MinistryID = Target.MinistryID
	AND source.TenantID = Target.TenantID
WHEN NOT MATCHED BY Target THEN
    INSERT (MinistryID, TenantID, Name, CampusID, StartDateTime, EndDateTime, Active, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
    VALUES (MinistryID, TenantID, Name, CampusID, StartDateTime, EndDateTime, Active, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
WHEN MATCHED THEN
UPDATE SET
      Target.Name       = Source.Name
    , Target.CampusID   = Source.CampusID
    , Target.ExecutionID	   = Source.ExecutionID
    , Target.InsertedDateTime  = Source.InsertedDateTime
    , Target.UpdatedDateTime   = Source.UpdatedDateTime
    , Target.HashValue		   = Source.HashValue
;



--DimActivity
MERGE INTO DW.DimActivity AS Target
USING ( VALUES
    (-1, 3, 'Undefined', -1, -1, '1/1/1900', NULL, 1, -1, GETDATE(), GETDATE(), '')
) AS Source
(ActivityID, TenantID, Name, MinistryID, CampusID, StartDateTime, EndDateTime, Active, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
 ON Target.ActivityID = Source.ActivityID
    AND Target.TenantID = Source.TenantID
WHEN NOT MATCHED BY Target THEN
    INSERT (ActivityID, TenantID, Name, MinistryID, CampusID, StartDateTime, EndDateTime, Active, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
    VALUES (ActivityID, TenantID, Name, MinistryID, CampusID, StartDateTime, EndDateTime, Active, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
WHEN MATCHED THEN
UPDATE SET
      Target.Name       = Source.Name
    , Target.MinistryID = Source.MinistryID
    , Target.CampusID   = Source.CampusID
    , Target.ExecutionID	   = Source.ExecutionID
    , Target.InsertedDateTime  = Source.InsertedDateTime
    , Target.UpdatedDateTime   = Source.UpdatedDateTime
    , Target.HashValue		   = Source.HashValue
;

--DimRoster
MERGE INTO DW.DimRoster AS Target
USING ( VALUES
    (-1, 3, 'Undefined', 'Undefined', 'Undefined', '1/1/1900', NULL, 1, -1, GETDATE(), GETDATE(), '')
) AS Source
(RosterID, TenantID, RosterFolder, Roster, BreakoutGroup, StartDateTime, EndDateTime, Active, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
 ON Target.RosterID = Source.RosterID
    AND Target.TenantID = Source.TenantID
WHEN NOT MATCHED BY Target THEN
    INSERT (RosterID, TenantID, RosterFolder, Roster, BreakoutGroup, StartDateTime, EndDateTime, Active, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
    VALUES (RosterID, TenantID, RosterFolder, Roster, BreakoutGroup, StartDateTime, EndDateTime, Active, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
WHEN MATCHED THEN
UPDATE SET
      Target.RosterFolder       = Source.RosterFolder
    , Target.Roster = Source.Roster
    , Target.BreakoutGroup   = Source.BreakoutGroup
    , Target.ExecutionID	   = Source.ExecutionID
    , Target.InsertedDateTime  = Source.InsertedDateTime
    , Target.UpdatedDateTime   = Source.UpdatedDateTime
    , Target.HashValue		   = Source.HashValue
;

--DimEntity
MERGE INTO DW.DimEntity AS Target
USING ( VALUES
    (-1, 3, ''    , 'Undefined'                ,  -1, GETDATE(), GETDATE(), '')
  , (1 , 3, 'HBF' , 'Harvest Bible Fellowship' ,  -1, GETDATE(), GETDATE(), '')
  , (2 , 3, 'HCA' , 'Harvest Christian Academy',  -1, GETDATE(), GETDATE(), '')
  , (3 , 3, 'HBC' , 'Harvest Bible Chapel'     ,  -1, GETDATE(), GETDATE(), '')
  , (4 , 3, 'WITW', 'Walk in the Word'         ,  -1, GETDATE(), GETDATE(), '')
) AS Source
(EntityID, TenantID, Code, Name, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
 ON Target.EntityID = Source.EntityID
    AND Target.TenantID = Source.TenantID
WHEN NOT MATCHED BY Target THEN
    INSERT (EntityID, TenantID, Code, Name, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
    VALUES (EntityID, TenantID, Code, Name, ExecutionID, InsertedDateTime, UpdatedDateTime, HashValue)
WHEN MATCHED THEN
UPDATE SET
      Target.Name = Source.Name
    , Target.Code = Source.Code
    , Target.ExecutionID	   = Source.ExecutionID
    , Target.InsertedDateTime  = Source.InsertedDateTime
    , Target.UpdatedDateTime   = Source.UpdatedDateTime
    , Target.HashValue		   = Source.HashValue
;
--entity financial mapping
TRUNCATE TABLE GLReportGrouping

DECLARE @EntityCode NVARCHAR(4)

DECLARE @Entities TABLE (EntityCode NVARCHAR(4) )
INSERT INTO @Entities
SELECT 'HBC' UNION
SELECT 'HCA' UNION
SELECT 'HBF' UNION
SELECT 'WITW'

WHILE EXISTS (Select 1 FROM @Entities)
BEGIN
	SELECT TOP 1 @EntityCode = EntityCode FROM @Entities

	INSERT INTO GLReportGrouping
	SELECT 4, '15126', 'Expense', @EntityCode UNION
	SELECT 3, '15131', 'Expense', @EntityCode UNION
	SELECT 3, '15136', 'Expense', @EntityCode UNION
	SELECT 3, '15141', 'Expense', @EntityCode UNION
	SELECT 5, '15146', 'Expense', @EntityCode UNION
	SELECT 4, '15151', 'Expense', @EntityCode UNION
	SELECT 4, '15156', 'Expense', @EntityCode UNION
	SELECT 3, '15160', 'Expense', @EntityCode UNION
	SELECT 3, '15171', 'Expense', @EntityCode UNION
	SELECT 1, '40013', 'Expense', @EntityCode UNION
	SELECT 1, '40016', 'Expense', @EntityCode UNION
	SELECT 1, '40018', 'Expense', @EntityCode UNION
	SELECT 1, '40019', 'Expense', @EntityCode UNION
	SELECT 1, '40020', 'Expense', @EntityCode UNION
	SELECT 1, '40025', 'Expense', @EntityCode UNION
	SELECT 1, '40060', 'Expense', @EntityCode UNION
	SELECT 1, '40085', 'Expense', @EntityCode UNION
	SELECT 1, '40090', 'Expense', @EntityCode UNION
	SELECT 1, '41006', 'Expense', @EntityCode UNION
	SELECT 1, '41010', 'Expense', @EntityCode UNION
	SELECT 1, '41010', 'Expense', @EntityCode UNION
	SELECT 1, '41011', 'Expense', @EntityCode UNION
	SELECT 1, '41012', 'Expense', @EntityCode UNION
	SELECT 1, '41015', 'Expense', @EntityCode UNION
	SELECT 1, '41016', 'Expense', @EntityCode UNION
	SELECT 1, '41017', 'Expense', @EntityCode UNION
	SELECT 1, '41020', 'Expense', @EntityCode UNION
	SELECT 1, '41025', 'Expense', @EntityCode UNION
	SELECT 1, '41027', 'Expense', @EntityCode UNION
	SELECT 3, '41030', 'Expense', @EntityCode UNION
	SELECT 1, '42012', 'Expense', @EntityCode UNION
	SELECT 1, '42040', 'Expense', @EntityCode UNION
	SELECT 1, '42055', 'Expense', @EntityCode UNION
	SELECT 1, '42065', 'Expense', @EntityCode UNION
	SELECT 1, '43026', 'Expense', @EntityCode UNION
	SELECT 1, '43030', 'Expense', @EntityCode UNION
	SELECT 5, '43035', 'Expense', @EntityCode UNION
	SELECT 1, '44008', 'Expense', @EntityCode UNION
	SELECT 1, '44090', 'Expense', @EntityCode UNION
	SELECT 1, '45016', 'Expense', @EntityCode UNION
	SELECT 1, '45018', 'Expense', @EntityCode UNION
	SELECT 1, '45060', 'Expense', @EntityCode UNION
	SELECT 5, '45064', 'Expense', @EntityCode UNION
	SELECT 1, '46030', 'Expense', @EntityCode UNION
	SELECT 1, '49011', 'Expense', @EntityCode UNION
	SELECT 3, '49099', 'Expense', @EntityCode UNION
	SELECT 3, '50022', 'Expense', @EntityCode UNION
	SELECT 3, '50060', 'Expense', @EntityCode UNION
	SELECT 3, '50071', 'Expense', @EntityCode UNION
	SELECT 3, '50073', 'Expense', @EntityCode UNION
	SELECT 3, '50080', 'Expense', @EntityCode UNION
	SELECT 3, '50110', 'Expense', @EntityCode UNION
	SELECT 3, '50140', 'Expense', @EntityCode UNION
	SELECT 3, '50149', 'Expense', @EntityCode UNION
	SELECT 3, '50161', 'Expense', @EntityCode UNION
	SELECT 6, '50170', 'Expense', @EntityCode UNION
	SELECT 6, '50171', 'Expense', @EntityCode UNION
	SELECT 3, '50182', 'Expense', @EntityCode UNION
	SELECT 3, '52010', 'Expense', @EntityCode UNION
	SELECT 3, '52011', 'Expense', @EntityCode UNION
	SELECT 3, '52045', 'Expense', @EntityCode UNION
	SELECT 3, '52060', 'Expense', @EntityCode UNION
	SELECT 3, '52075', 'Expense', @EntityCode UNION
	SELECT 3, '52516', 'Expense', @EntityCode UNION
	SELECT 3, '52519', 'Expense', @EntityCode UNION
	SELECT 5, '52605', 'Expense', @EntityCode UNION
	SELECT 5, '52606', 'Expense', @EntityCode UNION
	SELECT 3, '52613', 'Expense', @EntityCode UNION
	SELECT 3, '52621', 'Expense', @EntityCode UNION
	SELECT 3, '52641', 'Expense', @EntityCode UNION
	SELECT 3, '52665', 'Expense', @EntityCode UNION
	SELECT 3, '52670', 'Expense', @EntityCode UNION
	SELECT 3, '53110', 'Expense', @EntityCode UNION
	SELECT 3, '53130', 'Expense', @EntityCode UNION
	SELECT 3, '53132', 'Expense', @EntityCode UNION
	SELECT 3, '54040', 'Expense', @EntityCode UNION
	SELECT 3, '54045', 'Expense', @EntityCode UNION
	SELECT 3, '54050', 'Expense', @EntityCode UNION
	SELECT 3, '54065', 'Expense', @EntityCode UNION
	SELECT 6, '54069', 'Expense', @EntityCode UNION
	SELECT 6, '54070', 'Expense', @EntityCode UNION
	SELECT 4, '60307', 'Expense', @EntityCode UNION
	SELECT 4, '60432', 'Expense', @EntityCode UNION
	SELECT 4, '61045', 'Expense', @EntityCode UNION
	SELECT 4, '62050', 'Expense', @EntityCode UNION
	SELECT 4, '62315', 'Expense', @EntityCode UNION
	SELECT 4, '62320', 'Expense', @EntityCode UNION
	SELECT 4, '62328', 'Expense', @EntityCode UNION
	SELECT 4, '62385', 'Expense', @EntityCode UNION
	SELECT 4, '63145', 'Expense', @EntityCode UNION
	SELECT 5, '70110', 'Expense', @EntityCode UNION
	SELECT 5, '70136', 'Expense', @EntityCode UNION
	SELECT 5, '70165', 'Expense', @EntityCode UNION
	SELECT 5, '70172', 'Expense', @EntityCode UNION
	SELECT 4, '70177', 'Expense', @EntityCode UNION
	SELECT 5, '70182', 'Expense', @EntityCode UNION
	SELECT 5, '70198', 'Expense', @EntityCode UNION
	SELECT 5, '70239', 'Expense', @EntityCode UNION
	SELECT 5, '70280', 'Expense', @EntityCode UNION
	SELECT 5, '70305', 'Expense', @EntityCode UNION
	SELECT 5, '78050', 'Expense', @EntityCode UNION
	SELECT 5, '78075', 'Expense', @EntityCode UNION
	SELECT 4, '78105', 'Expense', @EntityCode UNION
	SELECT 5, '78111', 'Expense', @EntityCode UNION
	SELECT 5, '78125', 'Expense', @EntityCode UNION
	SELECT 5, '90420', 'Expense', @EntityCode UNION
	SELECT 5, '90422', 'Expense', @EntityCode UNION
	SELECT 5, '90425', 'Expense', @EntityCode UNION
	SELECT 5, '90430', 'Expense', @EntityCode UNION
	SELECT 5, '90432', 'Expense', @EntityCode UNION
	SELECT 5, '90452', 'Expense', @EntityCode UNION
	SELECT 5, '90485', 'Expense', @EntityCode UNION
	SELECT 5, '90509', 'Expense', @EntityCode UNION
	SELECT 2, '90510', 'Expense', @EntityCode UNION
	SELECT 2, '90511', 'Expense', @EntityCode UNION
	SELECT 2, '90512', 'Expense', @EntityCode UNION
	SELECT 2, '90514', 'Expense', @EntityCode UNION
	SELECT 2, '90516', 'Expense', @EntityCode UNION
	SELECT 2, '90518', 'Expense', @EntityCode UNION
	SELECT 2, '90610', 'Expense', @EntityCode UNION
	SELECT 2, '90615', 'Expense', @EntityCode UNION
	SELECT 1, '40004', 'Expense', @EntityCode UNION
	SELECT 1, '40025', 'Expense', @EntityCode UNION
	SELECT 1, '40060', 'Expense', @EntityCode UNION
	SELECT 1, '40075', 'Expense', @EntityCode UNION
	SELECT 5, '44007', 'Expense', @EntityCode UNION
	SELECT 5, '44015', 'Expense', @EntityCode UNION
	SELECT 5, '45010', 'Expense', @EntityCode UNION
	SELECT 4, '45012', 'Expense', @EntityCode UNION
	SELECT 5, '50152', 'Expense', @EntityCode UNION
	SELECT 5, '70108', 'Expense', @EntityCode UNION
	SELECT 5, '70119', 'Expense', @EntityCode UNION
	SELECT 5, '70120', 'Expense', @EntityCode UNION
	SELECT 5, '70128', 'Expense', @EntityCode UNION
	SELECT 5, '70135', 'Expense', @EntityCode UNION
	SELECT 5, '70160', 'Expense', @EntityCode UNION
	SELECT 5, '70254', 'Expense', @EntityCode UNION
	SELECT 5, '70257', 'Expense', @EntityCode UNION
	SELECT 5, '70265', 'Expense', @EntityCode UNION
	SELECT 5, '70290', 'Expense', @EntityCode UNION
	SELECT 5, '70370', 'Expense', @EntityCode UNION
	SELECT 5, '70380', 'Expense', @EntityCode UNION
	SELECT 5, '70382', 'Expense', @EntityCode UNION
	SELECT 5, '70491', 'Expense', @EntityCode UNION
	SELECT 5, '70494', 'Expense', @EntityCode UNION
	SELECT 5, '70495', 'Expense', @EntityCode UNION
	SELECT 5, '70505', 'Expense', @EntityCode UNION
	SELECT 5, '70540', 'Expense', @EntityCode UNION
	SELECT 5, '70544', 'Expense', @EntityCode UNION
	SELECT 5, '70545', 'Expense', @EntityCode UNION
	SELECT 5, '70560', 'Expense', @EntityCode UNION
	SELECT 5, '70600', 'Expense', @EntityCode UNION
	SELECT 3, '90515', 'Expense', @EntityCode UNION
	--adding "Depreciation and Amortization"
	SELECT 7, '90139', 'Expense', @EntityCode UNION
	SELECT 7, '90145', 'Expense', @EntityCode UNION
	SELECT 7, '90222', 'Expense', @EntityCode UNION
	SELECT 7, '90227', 'Expense', @EntityCode UNION
	SELECT 7, '90232', 'Expense', @EntityCode UNION
	SELECT 7, '90235', 'Expense', @EntityCode UNION
	SELECT 7, '90237', 'Expense', @EntityCode UNION
	SELECT 7, '90242', 'Expense', @EntityCode UNION
	SELECT 7, '90247', 'Expense', @EntityCode UNION
	SELECT 7, '80248', 'Expense', @EntityCode UNION
	SELECT 7, '90252', 'Expense', @EntityCode UNION
	SELECT 7, '90257', 'Expense', @EntityCode UNION
	SELECT 7, '90270', 'Expense', @EntityCode UNION

	--Revenues
	SELECT 3, '30005', 'Revenue', @EntityCode UNION
	SELECT 3, '30007', 'Revenue', @EntityCode UNION
	SELECT 3, '30008', 'Revenue', @EntityCode UNION
	SELECT 1, '30012', 'Revenue', @EntityCode UNION
	SELECT 3, '30015', 'Revenue', @EntityCode UNION
	SELECT 1, '30016', 'Revenue', @EntityCode UNION
	SELECT 3, '30018', 'Revenue', @EntityCode UNION
	SELECT 1, '30024', 'Revenue', @EntityCode UNION
	SELECT 1, '30026', 'Revenue', @EntityCode UNION
	SELECT 1, '30030', 'Revenue', @EntityCode UNION
	SELECT 2, '30031', 'Revenue', @EntityCode UNION
	SELECT 3, '30034', 'Revenue', @EntityCode UNION
	SELECT 3, '30035', 'Revenue', @EntityCode UNION
	SELECT 3, '30038', 'Revenue', @EntityCode UNION
	SELECT 3, '30039', 'Revenue', @EntityCode UNION
	SELECT 3, '30040', 'Revenue', @EntityCode UNION
	SELECT 3, '30041', 'Revenue', @EntityCode UNION
	SELECT 2, '30042', 'Revenue', @EntityCode UNION
	SELECT 3, '30043', 'Revenue', @EntityCode UNION
	SELECT 2, '30046', 'Revenue', @EntityCode UNION
	SELECT 2, '30058', 'Revenue', @EntityCode UNION
	SELECT 3, '30060', 'Revenue', @EntityCode UNION
	SELECT 1, '30065', 'Revenue', @EntityCode UNION
	SELECT 2, '30067', 'Revenue', @EntityCode UNION
	SELECT 3, '30075', 'Revenue', @EntityCode UNION
	SELECT 1, '30085', 'Revenue', @EntityCode UNION
	SELECT 3, '30090', 'Revenue', @EntityCode UNION
	SELECT 3, '30091', 'Revenue', @EntityCode UNION
	SELECT 3, '30093', 'Revenue', @EntityCode UNION
	SELECT 3, '30094', 'Revenue', @EntityCode UNION
	SELECT 3, '30095', 'Revenue', @EntityCode UNION
	SELECT 3, '30096', 'Revenue', @EntityCode UNION
	SELECT 3, '30097', 'Revenue', @EntityCode UNION
	SELECT 3, '30098', 'Revenue', @EntityCode UNION
	SELECT 3, '30100', 'Revenue', @EntityCode UNION
	SELECT 3, '30101', 'Revenue', @EntityCode UNION
	SELECT 3, '30102', 'Revenue', @EntityCode UNION
	SELECT 3, '30104', 'Revenue', @EntityCode UNION
	SELECT 2, '30105', 'Revenue', @EntityCode UNION
	SELECT 3, '30106', 'Revenue', @EntityCode UNION
	SELECT 3, '30108', 'Revenue', @EntityCode UNION
	SELECT 3, '30110', 'Revenue', @EntityCode UNION
	SELECT 3, '30112', 'Revenue', @EntityCode UNION
	SELECT 3, '30114', 'Revenue', @EntityCode UNION
	SELECT 3, '30116', 'Revenue', @EntityCode UNION
	SELECT 3, '30117', 'Revenue', @EntityCode UNION
	SELECT 3, '30118', 'Revenue', @EntityCode UNION
	SELECT 3, '30120', 'Revenue', @EntityCode UNION
	SELECT 1, '30150', 'Revenue', @EntityCode UNION
	SELECT 3, '30190', 'Revenue', @EntityCode UNION
	SELECT 3, '30195', 'Revenue', @EntityCode UNION
	SELECT 3, '30196', 'Revenue', @EntityCode UNION
	SELECT 3, '30197', 'Revenue', @EntityCode UNION
	SELECT 3, '30199', 'Revenue', @EntityCode UNION
	SELECT 3, '30200', 'Revenue', @EntityCode UNION
	SELECT 3, '30202', 'Revenue', @EntityCode UNION
	SELECT 3, '31025', 'Revenue', @EntityCode UNION
	SELECT 3, '31030', 'Revenue', @EntityCode UNION
	SELECT 3, '31035', 'Revenue', @EntityCode UNION
	SELECT 3, '32008', 'Revenue', @EntityCode UNION
	SELECT 3, '32010', 'Revenue', @EntityCode UNION
	SELECT 3, '32012', 'Revenue', @EntityCode UNION
	SELECT 3, '32018', 'Revenue', @EntityCode UNION
	SELECT 3, '32090', 'Revenue', @EntityCode UNION
	SELECT 3, '35001', 'Revenue', @EntityCode UNION
	SELECT 3, '35003', 'Revenue', @EntityCode UNION
	SELECT 3, '35004', 'Revenue', @EntityCode UNION
	SELECT 3, '35005', 'Revenue', @EntityCode UNION
	SELECT 3, '35010', 'Revenue', @EntityCode UNION
	SELECT 3, '35015', 'Revenue', @EntityCode UNION
	SELECT 3, '35020', 'Revenue', @EntityCode UNION
	SELECT 3, '35024', 'Revenue', @EntityCode UNION
	SELECT 3, '35025', 'Revenue', @EntityCode UNION
	SELECT 3, '35026', 'Revenue', @EntityCode UNION
	SELECT 3, '35050', 'Revenue', @EntityCode UNION
	SELECT 3, '35050', 'Revenue', @EntityCode UNION
	SELECT 3, '35060', 'Revenue', @EntityCode UNION
	SELECT 3, '35115', 'Revenue', @EntityCode UNION
	SELECT 3, '35126', 'Revenue', @EntityCode UNION
	SELECT 3, '35135', 'Revenue', @EntityCode UNION
	SELECT 3, '35141', 'Revenue', @EntityCode UNION
	SELECT 3, '35142', 'Revenue', @EntityCode UNION
	SELECT 3, '35143', 'Revenue', @EntityCode UNION
	SELECT 3, '35145', 'Revenue', @EntityCode UNION
	SELECT 3, '35158', 'Revenue', @EntityCode UNION
	SELECT 3, '37005', 'Revenue', @EntityCode UNION
	SELECT 3, '37006', 'Revenue', @EntityCode UNION
	SELECT 3, '37010', 'Revenue', @EntityCode UNION
	SELECT 3, '37012', 'Revenue', @EntityCode UNION
	SELECT 3, '37020', 'Revenue', @EntityCode UNION
	SELECT 3, '37020', 'Revenue', @EntityCode UNION
	SELECT 3, '37020', 'Revenue', @EntityCode UNION
	SELECT 3, '37021', 'Revenue', @EntityCode UNION
	SELECT 3, '37022', 'Revenue', @EntityCode UNION
	SELECT 3, '37022', 'Revenue', @EntityCode UNION
	SELECT 3, '37023', 'Revenue', @EntityCode UNION
	SELECT 3, '37024', 'Revenue', @EntityCode UNION
	SELECT 3, '37025', 'Revenue', @EntityCode UNION
	SELECT 3, '37025', 'Revenue', @EntityCode UNION
	SELECT 3, '37030', 'Revenue', @EntityCode UNION
	SELECT 3, '37030', 'Revenue', @EntityCode UNION
	SELECT 3, '37432', 'Revenue', @EntityCode UNION
	SELECT 3, '39999', 'Revenue', @EntityCode

	DELETE FROM @entities WHERE EntityCode = @EntityCode
END
	--hca exception for 30010
	INSERT INTO GLReportGrouping
	SELECT 1, '30010', 'Revenue', 'HBC'  UNION
	SELECT 1, '30010', 'Revenue', 'HBF'  UNION
	SELECT 1, '30010', 'Revenue', 'WITW' UNION
	SELECT 3, '30010', 'Revenue', 'HCA'  UNION

	SELECT 1, '30022', 'Revenue', 'HBC' UNION
	SELECT 1, '30022', 'Revenue', 'HBF' UNION
	SELECT 1, '30022', 'Revenue', 'WITW' UNION
	SELECT 3, '30022', 'Revenue', 'HCA' 

SELECT 
	GroupID
	, CASE WHEN Category = 'Revenue' THEN
		CASE GroupID	
			WHEN 1 THEN 'Unrestricted Donations'			
			WHEN 2 THEN 'Restricted Donations'
			WHEN 3 THEN 'Other Sales (VCB, VCF, WITW, Curriculum)' END 
	  ELSE 
		CASE GroupID
			WHEN 1 THEN 'Compensation'			
			WHEN 2 THEN 'Allocated Overhead'			
			WHEN 3 THEN 'Admin/IT'			
			WHEN 4 THEN 'Facilities'			
			WHEN 5 THEN 'Ministry Expense'			
			WHEN 6 THEN 'Broadcast Expense'			
			WHEN 7 THEN 'Depreciation and Amortization'			
			WHEN 8 THEN 'Other (less than 5% of Overall expense)' END
	  END AS GroupName
	, GLCode
	, Category
	, EntityCode			
FROM GLReportGrouping

TRUNCATE TABLE GoogleImportConfig

INSERT INTO GoogleImportConfig
SELECT 1, 22458219 AS AccountID, 'UA-22458219-1' AS WebProperty, 44282754 AS ProfileID, 'Main' AS ReportingSection UNION
SELECT 2, 29527341 AS AccountID, 'UA-29527341-1' AS WebProperty, 56721937 AS ProfileID, 'Store' AS ReportingSection UNION
SELECT 3, 29527341 AS AccountID, 'UA-29527341-2' AS WebProperty, 92087633 AS ProfileID, 'Store' AS ReportingSection

--set up the mapping for Campus and XLT report
EXEC [dbo].[usp_Initialize_CampusXLTReportGroupRows];
GO

GO
PRINT N'Update complete.';


GO
